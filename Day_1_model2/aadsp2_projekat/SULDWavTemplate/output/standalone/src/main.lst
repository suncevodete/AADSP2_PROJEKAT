1     	 0000					.public _INITIAL_GAIN
2     	 0000					.public _MODE
3     	 0000					.extern ___TIMER0_COUNT
4     	 0000					.extern ___TIMER1_COUNT
5     	 0000					.extern ___TIMER1_ENABLE
6     	 0000					.public _coefficients_11k_lpf
7     	 0000					.public _coefficients_3k_hpf
8     	 0000					.public _coefficients_5k_hpf
9     	 0000					.public _sampleBuffer
10    	 0000					.public _temp_left
11    	 0000					.public _temp_nizL11k
12    	 0000					.public _temp_nizL3k
13    	 0000					.public _temp_nizL5k
14    	 0000					.public _temp_nizR11k
15    	 0000					.public _temp_nizR3k
16    	 0000					.public _temp_nizR5k
17    	 0000					.public _temp_right
18    	 0000					.public _x_history0
19    	 0000					.public _x_history1
20    	 0000					.public _x_history2
21    	 0000					.public _x_history3
22    	 0000					.public _x_history4
23    	 0000					.public _x_history5
24    	 0000					.public _y_history0
25    	 0000					.public _y_history1
26    	 0000					.public _y_history2
27    	 0000					.public _y_history3
28    	 0000					.public _y_history4
29    	 0000					.public _y_history5
30    	 0000					.extern _cl_wavread_bits_per_sample
31    	 0000					.extern _cl_wavread_close
32    	 0000					.extern _cl_wavread_frame_rate
33    	 0000					.extern _cl_wavread_getnchannels
34    	 0000					.extern _cl_wavread_number_of_frames
35    	 0000					.extern _cl_wavread_open
36    	 0000					.extern _cl_wavread_recvsample
37    	 0000					.extern _cl_wavwrite_close
38    	 0000					.extern _cl_wavwrite_open
39    	 0000					.extern _cl_wavwrite_sendsample
40    	 0000					.public _main
41    	 0000					.extern _memset
42    	 0000					.public _processing
43    	 0000					.public _second_order_IIR
44    	 0000					.extern _strcpy
45    	 0000					.extern __div
46    	 0000					.extern __int_to_laccum
47    	 0000					.extern __mul_sat_laccum
48    							.xdata_ovly
48     >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
49    	 0000				_INITIAL_GAIN
50    	 0000					.dw  (0x0)
	 0000	 00000000	 
51    							.xdata_ovly
51     >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
52    	 0000				_MODE
53    	 0000					.bss (0x1)
54    							.xdata_ovly
54     >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
55    	 0000				__extractedConst_0_1
56    	 0000					.dw  (0x287a26c5)
	 0000	 287A26C5	 
57    							.xdata_ovly
57     >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
58    	 0000				__extractedConst_1_1
59    	 0000					.dw  (0x2ae025c3)
	 0000	 2AE025C3	 
60    							.xdata_ovly
60     >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
61    	 0000				__extractedConst_2_1
62    	 0000					.dw  (0x50c335d4)
	 0000	 50C335D4	 
63    							.xdata_ovly
63     >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
64    	 0000				__extractedConst_3_1
65    	 0000					.dw  (0x51b29e30)
	 0000	 51B29E30	 
66    							.xdata_ovly
66     >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
67    	 0000				_coefficients_11k_lpf
68    	 0000					.dw  (0x255b5d64)
	 0000	 255B5D64	 
69    	 0001					.dw  (0x255b5d64)
	 0001	 255B5D64	 
70    	 0002					.dw  (0x255b5d64)
	 0002	 255B5D64	 
71    	 0003					.dw  (0x40000000)
	 0003	 40000000	 
72    	 0004					.dw  (0xffbba112)
	 0004	 FFBBA112	 
73    	 0005					.dw  (0x15f6336b)
	 0005	 15F6336B	 
74    							.xdata_ovly
74     >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
75    	 0000				_coefficients_3k_hpf
76    	 0000					.dw  (0x4ce53a53)
	 0000	 4CE53A53	 
77    	 0001					.dw  (0xb31ac5ad)
	 0001	 B31AC5AD	 
78    	 0002					.dw  (0x4ce53a53)
	 0002	 4CE53A53	 
79    	 0003					.dw  (0x40000000)
	 0003	 40000000	 
80    	 0004					.dw  (0xbdbfc141)
	 0004	 BDBFC141	 
81    	 0005					.dw  (0x2f146bb1)
	 0005	 2F146BB1	 
82    							.xdata_ovly
82     >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
83    	 0000				_coefficients_5k_hpf
84    	 0000					.dw  (0x5e88f2e5)
	 0000	 5E88F2E5	 
85    	 0001					.dw  (0xa1770d1b)
	 0001	 A1770D1B	 
86    	 0002					.dw  (0x5e88f2e5)
	 0002	 5E88F2E5	 
87    	 0003					.dw  (0x40000000)
	 0003	 40000000	 
88    	 0004					.dw  (0xa5eb6eb5)
	 0004	 A5EB6EB5	 
89    	 0005					.dw  (0x45f89c51)
	 0005	 45F89C51	 
90    							.xdata_ovly
90     >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
91    	 0000				_sampleBuffer
92    	 0000					.bss (0x50)
93    							.xdata_ovly
93     >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
94    	 0000				_string_const_0
95    	 0000					.dw  (0x43)
	 0000	 00000043	 
96    	 0001					.dw  (0x3a)
	 0001	 0000003A	 
97    	 0002					.dw  (0x5c)
	 0002	 0000005C	 
98    	 0003					.dw  (0x55)
	 0003	 00000055	 
99    	 0004					.dw  (0x73)
	 0004	 00000073	 
100   	 0005					.dw  (0x65)
	 0005	 00000065	 
101   	 0006					.dw  (0x72)
	 0006	 00000072	 
102   	 0007					.dw  (0x73)
	 0007	 00000073	 
103   	 0008					.dw  (0x5c)
	 0008	 0000005C	 
104   	 0009					.dw  (0x73)
	 0009	 00000073	 
105   	 000A					.dw  (0x74)
	 000A	 00000074	 
106   	 000B					.dw  (0x75)
	 000B	 00000075	 
107   	 000C					.dw  (0x64)
	 000C	 00000064	 
108   	 000D					.dw  (0x65)
	 000D	 00000065	 
109   	 000E					.dw  (0x6e)
	 000E	 0000006E	 
110   	 000F					.dw  (0x74)
	 000F	 00000074	 
111   	 0010					.dw  (0x5c)
	 0010	 0000005C	 
112   	 0011					.dw  (0x44)
	 0011	 00000044	 
113   	 0012					.dw  (0x65)
	 0012	 00000065	 
114   	 0013					.dw  (0x73)
	 0013	 00000073	 
115   	 0014					.dw  (0x6b)
	 0014	 0000006B	 
116   	 0015					.dw  (0x74)
	 0015	 00000074	 
117   	 0016					.dw  (0x6f)
	 0016	 0000006F	 
118   	 0017					.dw  (0x70)
	 0017	 00000070	 
119   	 0018					.dw  (0x5c)
	 0018	 0000005C	 
120   	 0019					.dw  (0x72)
	 0019	 00000072	 
121   	 001A					.dw  (0x61)
	 001A	 00000061	 
122   	 001B					.dw  (0x32)
	 001B	 00000032	 
123   	 001C					.dw  (0x32)
	 001C	 00000032	 
124   	 001D					.dw  (0x2d)
	 001D	 0000002D	 
125   	 001E					.dw  (0x32)
	 001E	 00000032	 
126   	 001F					.dw  (0x30)
	 001F	 00000030	 
127   	 0020					.dw  (0x31)
	 0020	 00000031	 
128   	 0021					.dw  (0x35)
	 0021	 00000035	 
129   	 0022					.dw  (0x5c)
	 0022	 0000005C	 
130   	 0023					.dw  (0x41)
	 0023	 00000041	 
131   	 0024					.dw  (0x41)
	 0024	 00000041	 
132   	 0025					.dw  (0x44)
	 0025	 00000044	 
133   	 0026					.dw  (0x53)
	 0026	 00000053	 
134   	 0027					.dw  (0x50)
	 0027	 00000050	 
135   	 0028					.dw  (0x32)
	 0028	 00000032	 
136   	 0029					.dw  (0x5f)
	 0029	 0000005F	 
137   	 002A					.dw  (0x50)
	 002A	 00000050	 
138   	 002B					.dw  (0x52)
	 002B	 00000052	 
139   	 002C					.dw  (0x4f)
	 002C	 0000004F	 
140   	 002D					.dw  (0x4a)
	 002D	 0000004A	 
141   	 002E					.dw  (0x45)
	 002E	 00000045	 
142   	 002F					.dw  (0x4b)
	 002F	 0000004B	 
143   	 0030					.dw  (0x41)
	 0030	 00000041	 
144   	 0031					.dw  (0x54)
	 0031	 00000054	 
145   	 0032					.dw  (0x5c)
	 0032	 0000005C	 
146   	 0033					.dw  (0x44)
	 0033	 00000044	 
147   	 0034					.dw  (0x61)
	 0034	 00000061	 
148   	 0035					.dw  (0x79)
	 0035	 00000079	 
149   	 0036					.dw  (0x5f)
	 0036	 0000005F	 
150   	 0037					.dw  (0x31)
	 0037	 00000031	 
151   	 0038					.dw  (0x5f)
	 0038	 0000005F	 
152   	 0039					.dw  (0x6d)
	 0039	 0000006D	 
153   	 003A					.dw  (0x6f)
	 003A	 0000006F	 
154   	 003B					.dw  (0x64)
	 003B	 00000064	 
155   	 003C					.dw  (0x65)
	 003C	 00000065	 
156   	 003D					.dw  (0x6c)
	 003D	 0000006C	 
157   	 003E					.dw  (0x32)
	 003E	 00000032	 
158   	 003F					.dw  (0x5c)
	 003F	 0000005C	 
159   	 0040					.dw  (0x61)
	 0040	 00000061	 
160   	 0041					.dw  (0x61)
	 0041	 00000061	 
161   	 0042					.dw  (0x64)
	 0042	 00000064	 
162   	 0043					.dw  (0x73)
	 0043	 00000073	 
163   	 0044					.dw  (0x70)
	 0044	 00000070	 
164   	 0045					.dw  (0x32)
	 0045	 00000032	 
165   	 0046					.dw  (0x5f)
	 0046	 0000005F	 
166   	 0047					.dw  (0x70)
	 0047	 00000070	 
167   	 0048					.dw  (0x72)
	 0048	 00000072	 
168   	 0049					.dw  (0x6f)
	 0049	 0000006F	 
169   	 004A					.dw  (0x6a)
	 004A	 0000006A	 
170   	 004B					.dw  (0x65)
	 004B	 00000065	 
171   	 004C					.dw  (0x6b)
	 004C	 0000006B	 
172   	 004D					.dw  (0x61)
	 004D	 00000061	 
173   	 004E					.dw  (0x74)
	 004E	 00000074	 
174   	 004F					.dw  (0x5c)
	 004F	 0000005C	 
175   	 0050					.dw  (0x54)
	 0050	 00000054	 
176   	 0051					.dw  (0x65)
	 0051	 00000065	 
177   	 0052					.dw  (0x73)
	 0052	 00000073	 
178   	 0053					.dw  (0x74)
	 0053	 00000074	 
179   	 0054					.dw  (0x53)
	 0054	 00000053	 
180   	 0055					.dw  (0x74)
	 0055	 00000074	 
181   	 0056					.dw  (0x72)
	 0056	 00000072	 
182   	 0057					.dw  (0x65)
	 0057	 00000065	 
183   	 0058					.dw  (0x61)
	 0058	 00000061	 
184   	 0059					.dw  (0x6d)
	 0059	 0000006D	 
185   	 005A					.dw  (0x73)
	 005A	 00000073	 
186   	 005B					.dw  (0x5c)
	 005B	 0000005C	 
187   	 005C					.dw  (0x32)
	 005C	 00000032	 
188   	 005D					.dw  (0x63)
	 005D	 00000063	 
189   	 005E					.dw  (0x68)
	 005E	 00000068	 
190   	 005F					.dw  (0x5f)
	 005F	 0000005F	 
191   	 0060					.dw  (0x6c)
	 0060	 0000006C	 
192   	 0061					.dw  (0x76)
	 0061	 00000076	 
193   	 0062					.dw  (0x6c)
	 0062	 0000006C	 
194   	 0063					.dw  (0x5f)
	 0063	 0000005F	 
195   	 0064					.dw  (0x61)
	 0064	 00000061	 
196   	 0065					.dw  (0x6d)
	 0065	 0000006D	 
197   	 0066					.dw  (0x74)
	 0066	 00000074	 
198   	 0067					.dw  (0x5f)
	 0067	 0000005F	 
199   	 0068					.dw  (0x34)
	 0068	 00000034	 
200   	 0069					.dw  (0x38)
	 0069	 00000038	 
201   	 006A					.dw  (0x6b)
	 006A	 0000006B	 
202   	 006B					.dw  (0x2e)
	 006B	 0000002E	 
203   	 006C					.dw  (0x77)
	 006C	 00000077	 
204   	 006D					.dw  (0x61)
	 006D	 00000061	 
205   	 006E					.dw  (0x76)
	 006E	 00000076	 
206   	 006F					.dw  (0x0)
	 006F	 00000000	 
207   							.xdata_ovly
207    >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
208   	 0000				_string_const_1
209   	 0000					.dw  (0x6d)
	 0000	 0000006D	 
210   	 0001					.dw  (0x6f)
	 0001	 0000006F	 
211   	 0002					.dw  (0x64)
	 0002	 00000064	 
212   	 0003					.dw  (0x65)
	 0003	 00000065	 
213   	 0004					.dw  (0x6c)
	 0004	 0000006C	 
214   	 0005					.dw  (0x33)
	 0005	 00000033	 
215   	 0006					.dw  (0x5f)
	 0006	 0000005F	 
216   	 0007					.dw  (0x6f)
	 0007	 0000006F	 
217   	 0008					.dw  (0x75)
	 0008	 00000075	 
218   	 0009					.dw  (0x74)
	 0009	 00000074	 
219   	 000A					.dw  (0x70)
	 000A	 00000070	 
220   	 000B					.dw  (0x75)
	 000B	 00000075	 
221   	 000C					.dw  (0x74)
	 000C	 00000074	 
222   	 000D					.dw  (0x5f)
	 000D	 0000005F	 
223   	 000E					.dw  (0x73)
	 000E	 00000073	 
224   	 000F					.dw  (0x70)
	 000F	 00000070	 
225   	 0010					.dw  (0x65)
	 0010	 00000065	 
226   	 0011					.dw  (0x65)
	 0011	 00000065	 
227   	 0012					.dw  (0x63)
	 0012	 00000063	 
228   	 0013					.dw  (0x68)
	 0013	 00000068	 
229   	 0014					.dw  (0x5f)
	 0014	 0000005F	 
230   	 0015					.dw  (0x32)
	 0015	 00000032	 
231   	 0016					.dw  (0x63)
	 0016	 00000063	 
232   	 0017					.dw  (0x68)
	 0017	 00000068	 
233   	 0018					.dw  (0x5f)
	 0018	 0000005F	 
234   	 0019					.dw  (0x32)
	 0019	 00000032	 
235   	 001A					.dw  (0x2e)
	 001A	 0000002E	 
236   	 001B					.dw  (0x77)
	 001B	 00000077	 
237   	 001C					.dw  (0x61)
	 001C	 00000061	 
238   	 001D					.dw  (0x76)
	 001D	 00000076	 
239   	 001E					.dw  (0x0)
	 001E	 00000000	 
240   							.xdata_ovly
240    >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
241   	 0000				_temp_left
242   	 0000					.bss (0x10)
243   							.xdata_ovly
243    >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
244   	 0000				_temp_nizL11k
245   	 0000					.bss (0x10)
246   							.xdata_ovly
246    >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
247   	 0000				_temp_nizL3k
248   	 0000					.bss (0x10)
249   							.xdata_ovly
249    >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
250   	 0000				_temp_nizL5k
251   	 0000					.bss (0x10)
252   							.xdata_ovly
252    >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
253   	 0000				_temp_nizR11k
254   	 0000					.bss (0x10)
255   							.xdata_ovly
255    >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
256   	 0000				_temp_nizR3k
257   	 0000					.bss (0x10)
258   							.xdata_ovly
258    >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
259   	 0000				_temp_nizR5k
260   	 0000					.bss (0x10)
261   							.xdata_ovly
261    >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
262   	 0000				_temp_right
263   	 0000					.bss (0x10)
264   							.xdata_ovly
264    >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
265   	 0000				_x_history0
266   	 0000					.dw  (0x0)
	 0000	 00000000	 
267   	 0001					.dw  (0x0)
	 0001	 00000000	 
268   							.xdata_ovly
268    >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
269   	 0000				_x_history1
270   	 0000					.dw  (0x0)
	 0000	 00000000	 
271   	 0001					.dw  (0x0)
	 0001	 00000000	 
272   							.xdata_ovly
272    >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
273   	 0000				_x_history2
274   	 0000					.dw  (0x0)
	 0000	 00000000	 
275   	 0001					.dw  (0x0)
	 0001	 00000000	 
276   							.xdata_ovly
276    >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
277   	 0000				_x_history3
278   	 0000					.dw  (0x0)
	 0000	 00000000	 
279   	 0001					.dw  (0x0)
	 0001	 00000000	 
280   							.xdata_ovly
280    >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
281   	 0000				_x_history4
282   	 0000					.dw  (0x0)
	 0000	 00000000	 
283   	 0001					.dw  (0x0)
	 0001	 00000000	 
284   							.xdata_ovly
284    >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
285   	 0000				_x_history5
286   	 0000					.dw  (0x0)
	 0000	 00000000	 
287   	 0001					.dw  (0x0)
	 0001	 00000000	 
288   							.xdata_ovly
288    >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
289   	 0000				_y_history0
290   	 0000					.dw  (0x0)
	 0000	 00000000	 
291   	 0001					.dw  (0x0)
	 0001	 00000000	 
292   							.xdata_ovly
292    >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
293   	 0000				_y_history1
294   	 0000					.dw  (0x0)
	 0000	 00000000	 
295   	 0001					.dw  (0x0)
	 0001	 00000000	 
296   							.xdata_ovly
296    >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
297   	 0000				_y_history2
298   	 0000					.dw  (0x0)
	 0000	 00000000	 
299   	 0001					.dw  (0x0)
	 0001	 00000000	 
300   							.xdata_ovly
300    >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
301   	 0000				_y_history3
302   	 0000					.dw  (0x0)
	 0000	 00000000	 
303   	 0001					.dw  (0x0)
	 0001	 00000000	 
304   							.xdata_ovly
304    >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
305   	 0000				_y_history4
306   	 0000					.dw  (0x0)
	 0000	 00000000	 
307   	 0001					.dw  (0x0)
	 0001	 00000000	 
308   							.xdata_ovly
308    >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
309   	 0000				_y_history5
310   	 0000					.dw  (0x0)
	 0000	 00000000	 
311   	 0001					.dw  (0x0)
	 0001	 00000000	 
312   							.code_ovly
312    >> start of macro: .code_ovly
1+    									seg_single , "CODE_OVLY", CODE
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_CODE_ )
2+    						    segment
3+    						  .else
4+    						    segment "CODE_OVLY"
5+    							.if "" != ""
6+    						___SegStart_CODE_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .code_ovly
313   						
314   						
315   						
316   							# This construction should ensure linking of crt0 in case when target is a standalone program without the OS
317   							.if defined(_OVLY_)
318   								.if .strcmp('standalone',_OVLY_)=0
319   								.if .strcmp('crystal32',_TARGET_FAMILY_)=0
320   	 0000							.extern __start         # dummy use of __start to force linkage of crt0
321   	 0000				dummy		.equ(__start)
322   								.else
323   									.extern __intvec         # dummy use of __intvec to force linkage of intvec
324   						dummy		.equ(__intvec)
325   								.endif
326   								.endif
327   							.endif
328   						
329   	 0000				_main:			/* LN: 162 | CYCLE: 0 | RULES: () */ 
330   	 0000	 BB540007		xmem[i7] = i7			# LN: 162 | 
331   	 0001	 020F7FFF		i7 += 1			# LN: 162 | 
332   	 0002	 8775020D		i7 = i7 + (0x20d)			# LN: 162 | 
333   	 0003	 91750001		i1 = i7 - (0x1)			# LN: 162 | 
334   	 0004	 98540001		xmem[i1] = a0h			# LN: 162 | 
335   	 0005	 91750002		i1 = i7 - (0x2)			# LN: 162 | 
336   	 0006	 B0540001		xmem[i1] = i0			# LN: 162 | 
337   	 0007				cline_162_0:			/* LN: 177 | CYCLE: 0 | RULES: () */ 
338   	 0007	 90750003		i0 = i7 - (0x3)			# LN: 177 | 
339   	 0008	 00004DC0		a0 = 0			# LN: 177 | 
340   	 0009	 98540000		xmem[i0] = a0h			# LN: 177 | 
341   	 000A	 80500017		do (0x5), label_end_96			# LN: 177 | 
342   	 000B				cline_177_0:			/* LN: 178 | CYCLE: 0 | RULES: () */ 
343   	 000B				label_begin_96:			/* LN: 177 | CYCLE: 0 | RULES: () */ 
344   	 000B	 90750003		i0 = i7 - (0x3)			# LN: 178 | 
345   	 000C	 19404DC0		a1 = xmem[i0]; a0 = 0			# LN: 178, 178 | 
346   	 000D	 00004EC1		a1 = a1 << 4			# LN: 178 | 
347   	 000E	 49707FFF		i0 = a1			# LN: 178 | 
348   	 000F	 894A0010		uhalfword(a1) = (0x10)			# LN: 178 | 
349   	 0010	 80050000		i0 = i0 + (_sampleBuffer + 0)			# LN: 178 | 
350   	 0011	 80880000		call (_memset)			# LN: 178 | 
351   	 0012				cline_178_0:			/* LN: 177 | CYCLE: 0 | RULES: () */ 
352   	 0012				init_latch_label_4:			/* LN: 178 | CYCLE: 0 | RULES: () */ 
353   	 0012	 90750003		i0 = i7 - (0x3)			# LN: 177 | 
354   	 0013	 88140000		a0 = xmem[i0]			# LN: 177 | 
355   	 0014	 894A0001		uhalfword(a1) = (0x1)			# LN: 177 | 
356   	 0015	 00004408		a0 = a0 + a1			# LN: 177 | 
357   	 0016	 90750003		i0 = i7 - (0x3)			# LN: 177 | 
358   	 0017				label_end_96:			# LN: 177 | CYCLE: 5 | RULES: ()
359   	 0017	 98540000		xmem[i0] = a0h			# LN: 177 | 
360   	 0018				cline_177_1:			/* LN: 182 | CYCLE: 0 | RULES: () */ 
361   	 0018				for_end_4:			/* LN: 177 | CYCLE: 0 | RULES: () */ 
362   	 0018	 90750103		i0 = i7 - (259 - 0)			# LN: 182 | 
363   	 0019	 A1050000		i1 = (0) + (_string_const_0)			# LN: 182 | 
364   	 001A	 80880000		call (_strcpy)			# LN: 182 | 
365   	 001B				cline_182_0:			/* LN: 183 | CYCLE: 0 | RULES: () */ 
366   	 001B	 90750103		i0 = i7 - (259 - 0)			# LN: 183 | 
367   	 001C	 80880000		call (_cl_wavread_open)			# LN: 183 | 
368   	 001D	 98090030		AnyReg(i0, a0h)			# LN: 183 | 
369   	 001E	 91750104		i1 = i7 - (0x104)			# LN: 183 | 
370   	 001F	 B0540001		xmem[i1] = i0			# LN: 183 | 
371   	 0020				cline_183_0:			/* LN: 184 | CYCLE: 0 | RULES: () */ 
372   	 0020	 90750104		i0 = i7 - (0x104)			# LN: 184 | 
373   	 0021	 88140000		a0 = xmem[i0]			# LN: 184 | 
374   	 0022	 00004E80		a0 & a0			# LN: 184 | 
375   	 0023	 84480026		if (a != 0) jmp (else_2)			# LN: 184 | 
376   	 0024				cline_184_0:			/* LN: 187 | CYCLE: 0 | RULES: () */ 
377   	 0024	 886AFFFF		halfword(a0) = (0xffff)			# LN: 187 | 
378   	 0025	 800800C1		jmp (__epilogue_200)			# LN: 187 | 
379   	 0026				cline_187_0:			/* LN: 193 | CYCLE: 0 | RULES: () */ 
380   	 0026				endif_2:			/* LN: 184 | CYCLE: 0 | RULES: () */ 
381   	 0026				else_2:			/* LN: 184 | CYCLE: 0 | RULES: () */ 
382   	 0026	 90750104		i0 = i7 - (0x104)			# LN: 193 | 
383   	 0027	 B0140000		i0 = xmem[i0]			# LN: 193 | 
384   	 0028	 80880000		call (_cl_wavread_getnchannels)			# LN: 193 | 
385   	 0029	 90750105		i0 = i7 - (0x105)			# LN: 193 | 
386   	 002A	 98540000		xmem[i0] = a0h			# LN: 193 | 
387   	 002B				cline_193_0:			/* LN: 194 | CYCLE: 0 | RULES: () */ 
388   	 002B	 90750104		i0 = i7 - (0x104)			# LN: 194 | 
389   	 002C	 B0140000		i0 = xmem[i0]			# LN: 194 | 
390   	 002D	 80880000		call (_cl_wavread_bits_per_sample)			# LN: 194 | 
391   	 002E	 90750106		i0 = i7 - (0x106)			# LN: 194 | 
392   	 002F	 98540000		xmem[i0] = a0h			# LN: 194 | 
393   	 0030				cline_194_0:			/* LN: 195 | CYCLE: 0 | RULES: () */ 
394   	 0030	 90750104		i0 = i7 - (0x104)			# LN: 195 | 
395   	 0031	 B0140000		i0 = xmem[i0]			# LN: 195 | 
396   	 0032	 80880000		call (_cl_wavread_frame_rate)			# LN: 195 | 
397   	 0033	 90750107		i0 = i7 - (0x107)			# LN: 195 | 
398   	 0034	 98540000		xmem[i0] = a0h			# LN: 195 | 
399   	 0035				cline_195_0:			/* LN: 196 | CYCLE: 0 | RULES: () */ 
400   	 0035	 90750104		i0 = i7 - (0x104)			# LN: 196 | 
401   	 0036	 B0140000		i0 = xmem[i0]			# LN: 196 | 
402   	 0037	 80880000		call (_cl_wavread_number_of_frames)			# LN: 196 | 
403   	 0038	 90750108		i0 = i7 - (0x108)			# LN: 196 | 
404   	 0039	 98540000		xmem[i0] = a0h			# LN: 196 | 
405   	 003A				cline_196_0:			/* LN: 201 | CYCLE: 0 | RULES: () */ 
406   	 003A	 90750208		i0 = i7 - (520 - 0)			# LN: 201 | 
407   	 003B	 A1050000		i1 = (0) + (_string_const_1)			# LN: 201 | 
408   	 003C	 80880000		call (_strcpy)			# LN: 201 | 
409   	 003D				cline_201_0:			/* LN: 202 | CYCLE: 0 | RULES: () */ 
410   	 003D	 90750208		i0 = i7 - (520 - 0)			# LN: 202 | 
411   	 003E	 91750106		i1 = i7 - (0x106)			# LN: 202 | 
412   	 003F	 88140001		a0 = xmem[i1]			# LN: 202 | 
413   	 0040	 91750105		i1 = i7 - (0x105)			# LN: 202 | 
414   	 0041	 89140001		a1 = xmem[i1]			# LN: 202 | 
415   	 0042	 91750107		i1 = i7 - (0x107)			# LN: 202 | 
416   	 0043	 8C140001		b0 = xmem[i1]			# LN: 202 | 
417   	 0044	 80880000		call (_cl_wavwrite_open)			# LN: 202 | 
418   	 0045	 98090030		AnyReg(i0, a0h)			# LN: 202 | 
419   	 0046	 91750209		i1 = i7 - (0x209)			# LN: 202 | 
420   	 0047	 B0540001		xmem[i1] = i0			# LN: 202 | 
421   	 0048				cline_202_0:			/* LN: 203 | CYCLE: 0 | RULES: () */ 
422   	 0048	 90750209		i0 = i7 - (0x209)			# LN: 203 | 
423   	 0049	 88140000		a0 = xmem[i0]			# LN: 203 | 
424   	 004A	 00004E80		a0 & a0			# LN: 203 | 
425   	 004B	 8448004E		if (a != 0) jmp (else_3)			# LN: 203 | 
426   	 004C				cline_203_0:			/* LN: 206 | CYCLE: 0 | RULES: () */ 
427   	 004C	 886AFFFF		halfword(a0) = (0xffff)			# LN: 206 | 
428   	 004D	 800800C1		jmp (__epilogue_200)			# LN: 206 | 
429   	 004E				cline_206_0:			/* LN: 219 | CYCLE: 0 | RULES: () */ 
430   	 004E				endif_3:			/* LN: 203 | CYCLE: 0 | RULES: () */ 
431   	 004E				else_3:			/* LN: 203 | CYCLE: 0 | RULES: () */ 
432   	 004E	 9075020A		i0 = i7 - (0x20a)			# LN: 219 | 
433   	 004F	 00004DC0		a0 = 0			# LN: 219 | 
434   	 0050	 98540000		xmem[i0] = a0h			# LN: 219 | 
435   	 0051				for_5:			/* LN: 219 | CYCLE: 0 | RULES: () */ 
436   	 0051	 90750108		i0 = i7 - (0x108)			# LN: 219 | 
437   	 0052	 88140000		a0 = xmem[i0]			# LN: 219 | 
438   	 0053	 894A0010		uhalfword(a1) = (0x10)			# LN: 219 | 
439   	 0054	 80880000		call (__div)			# LN: 219 | 
440   	 0055	 9075020A		i0 = i7 - (0x20a)			# LN: 219 | 
441   	 0056	 89140000		a1 = xmem[i0]			# LN: 219 | 
442   	 0057	 00004F01		a1 - a0			# LN: 219 | 
443   	 0058	 84C800B9		if (a >= 0) jmp (for_end_5)			# LN: 219 | 
444   	 0059				cline_219_0:			/* LN: 221 | CYCLE: 0 | RULES: () */ 
445   	 0059	 9075020B		i0 = i7 - (0x20b)			# LN: 221 | 
446   	 005A	 00004DC0		a0 = 0			# LN: 221 | 
447   	 005B	 98540000		xmem[i0] = a0h			# LN: 221 | 
448   	 005C	 81000084		do (0x10), label_end_97			# LN: 221 | 
449   	 005D				cline_221_0:			/* LN: 223 | CYCLE: 0 | RULES: () */ 
450   	 005D				label_begin_97:			/* LN: 221 | CYCLE: 0 | RULES: () */ 
451   	 005D	 9075020C		i0 = i7 - (0x20c)			# LN: 223 | 
452   	 005E	 00004DC0		a0 = 0			# LN: 223 | 
453   	 005F	 98540000		xmem[i0] = a0h			# LN: 223 | 
454   	 0060				for_7:			/* LN: 223 | CYCLE: 0 | RULES: () */ 
455   	 0060	 9075020C		i0 = i7 - (0x20c)			# LN: 223 | 
456   	 0061	 88140000		a0 = xmem[i0]			# LN: 223 | 
457   	 0062	 90750105		i0 = i7 - (0x105)			# LN: 223 | 
458   	 0063	 89140000		a1 = xmem[i0]			# LN: 223 | 
459   	 0064	 00004F08		a0 - a1			# LN: 223 | 
460   	 0065	 84C8007F		if (a >= 0) jmp (for_end_7)			# LN: 223 | 
461   	 0066				cline_223_0:			/* LN: 225 | CYCLE: 0 | RULES: () */ 
462   	 0066	 90750104		i0 = i7 - (0x104)			# LN: 225 | 
463   	 0067	 B0140000		i0 = xmem[i0]			# LN: 225 | 
464   	 0068	 80880000		call (_cl_wavread_recvsample)			# LN: 225 | 
465   	 0069	 9075020D		i0 = i7 - (0x20d)			# LN: 225 | 
466   	 006A	 98540000		xmem[i0] = a0h			# LN: 225 | 
467   	 006B				cline_225_0:			/* LN: 226 | CYCLE: 0 | RULES: () */ 
468   	 006B	 9075020C		i0 = i7 - (0x20c)			# LN: 226 | 
469   	 006C	 88140000		a0 = xmem[i0]			# LN: 226 | 
470   	 006D	 00004EC0		a0 = a0 << 4			# LN: 226 | 
471   	 006E	 48707FFF		i0 = a0			# LN: 226 | 
472   	 006F	 9175020B		i1 = i7 - (0x20b)			# LN: 226 | 
473   	 0070	 80050000		i0 = i0 + (_sampleBuffer + 0)			# LN: 226 | 
474   	 0071	 88140001		a0 = xmem[i1]			# LN: 226 | 
475   	 0072	 09707FFF		a1 = i0			# LN: 226 | 
476   	 0073	 00004480		a0 = a1 + a0			# LN: 226 | 
477   	 0074	 98090030		AnyReg(i0, a0h)			# LN: 226 | 
478   	 0075	 9175020D		i1 = i7 - (0x20d)			# LN: 226 | 
479   	 0076	 88140001		a0 = xmem[i1]			# LN: 226 | 
480   	 0077	 98540000		xmem[i0] = a0h			# LN: 226 | 
481   	 0078				cline_226_0:			/* LN: 223 | CYCLE: 0 | RULES: () */ 
482   	 0078				init_latch_label_5:			/* LN: 227 | CYCLE: 0 | RULES: () */ 
483   	 0078	 9075020C		i0 = i7 - (0x20c)			# LN: 223 | 
484   	 0079	 88140000		a0 = xmem[i0]			# LN: 223 | 
485   	 007A	 894A0001		uhalfword(a1) = (0x1)			# LN: 223 | 
486   	 007B	 00004408		a0 = a0 + a1			# LN: 223 | 
487   	 007C	 9075020C		i0 = i7 - (0x20c)			# LN: 223 | 
488   	 007D	 98540000		xmem[i0] = a0h			# LN: 223 | 
489   	 007E	 80080060		jmp (for_7)			# LN: 223 | 
490   	 007F				cline_223_1:			/* LN: 221 | CYCLE: 0 | RULES: () */ 
491   	 007F				init_latch_label_6:			/* LN: 228 | CYCLE: 0 | RULES: () */ 
492   	 007F				for_end_7:			/* LN: 223 | CYCLE: 0 | RULES: () */ 
493   	 007F	 9075020B		i0 = i7 - (0x20b)			# LN: 221 | 
494   	 0080	 88140000		a0 = xmem[i0]			# LN: 221 | 
495   	 0081	 894A0001		uhalfword(a1) = (0x1)			# LN: 221 | 
496   	 0082	 00004408		a0 = a0 + a1			# LN: 221 | 
497   	 0083	 9075020B		i0 = i7 - (0x20b)			# LN: 221 | 
498   	 0084				label_end_97:			# LN: 221 | CYCLE: 5 | RULES: ()
499   	 0084	 98540000		xmem[i0] = a0h			# LN: 221 | 
500   	 0085				cline_221_1:			/* LN: 230 | CYCLE: 0 | RULES: () */ 
501   	 0085				for_end_6:			/* LN: 221 | CYCLE: 0 | RULES: () */ 
502   	 0085	 808800C4		call (_processing)			# LN: 230 | 
503   	 0086				cline_230_0:			/* LN: 232 | CYCLE: 0 | RULES: () */ 
504   	 0086	 9075020B		i0 = i7 - (0x20b)			# LN: 232 | 
505   	 0087	 00004DC0		a0 = 0			# LN: 232 | 
506   	 0088	 98540000		xmem[i0] = a0h			# LN: 232 | 
507   	 0089	 810000B1		do (0x10), label_end_98			# LN: 232 | 
508   	 008A				cline_232_0:			/* LN: 234 | CYCLE: 0 | RULES: () */ 
509   	 008A				label_begin_98:			/* LN: 232 | CYCLE: 0 | RULES: () */ 
510   	 008A	 9075020C		i0 = i7 - (0x20c)			# LN: 234 | 
511   	 008B	 00004DC0		a0 = 0			# LN: 234 | 
512   	 008C	 98540000		xmem[i0] = a0h			# LN: 234 | 
513   	 008D				for_9:			/* LN: 234 | CYCLE: 0 | RULES: () */ 
514   	 008D	 9075020C		i0 = i7 - (0x20c)			# LN: 234 | 
515   	 008E	 88140000		a0 = xmem[i0]			# LN: 234 | 
516   	 008F	 90750105		i0 = i7 - (0x105)			# LN: 234 | 
517   	 0090	 89140000		a1 = xmem[i0]			# LN: 234 | 
518   	 0091	 00004F08		a0 - a1			# LN: 234 | 
519   	 0092	 84C800AC		if (a >= 0) jmp (for_end_9)			# LN: 234 | 
520   	 0093				cline_234_0:			/* LN: 236 | CYCLE: 0 | RULES: () */ 
521   	 0093	 9075020C		i0 = i7 - (0x20c)			# LN: 236 | 
522   	 0094	 88140000		a0 = xmem[i0]			# LN: 236 | 
523   	 0095	 00004EC0		a0 = a0 << 4			# LN: 236 | 
524   	 0096	 48707FFF		i0 = a0			# LN: 236 | 
525   	 0097	 9175020B		i1 = i7 - (0x20b)			# LN: 236 | 
526   	 0098	 80050000		i0 = i0 + (_sampleBuffer + 0)			# LN: 236 | 
527   	 0099	 88140001		a0 = xmem[i1]			# LN: 236 | 
528   	 009A	 09707FFF		a1 = i0			# LN: 236 | 
529   	 009B	 00004480		a0 = a1 + a0			# LN: 236 | 
530   	 009C	 98090030		AnyReg(i0, a0h)			# LN: 236 | 
531   	 009D	 9175020D		i1 = i7 - (0x20d)			# LN: 236 | 
532   	 009E	 88140000		a0 = xmem[i0]			# LN: 236 | 
533   	 009F	 98540001		xmem[i1] = a0h			# LN: 236 | 
534   	 00A0				cline_236_0:			/* LN: 237 | CYCLE: 0 | RULES: () */ 
535   	 00A0	 90750209		i0 = i7 - (0x209)			# LN: 237 | 
536   	 00A1	 9175020D		i1 = i7 - (0x20d)			# LN: 237 | 
537   	 00A2	 88140001		a0 = xmem[i1]			# LN: 237 | 
538   	 00A3	 B0140000		i0 = xmem[i0]			# LN: 237 | 
539   	 00A4	 80880000		call (_cl_wavwrite_sendsample)			# LN: 237 | 
540   	 00A5				cline_237_0:			/* LN: 234 | CYCLE: 0 | RULES: () */ 
541   	 00A5				init_latch_label_7:			/* LN: 238 | CYCLE: 0 | RULES: () */ 
542   	 00A5	 9075020C		i0 = i7 - (0x20c)			# LN: 234 | 
543   	 00A6	 88140000		a0 = xmem[i0]			# LN: 234 | 
544   	 00A7	 894A0001		uhalfword(a1) = (0x1)			# LN: 234 | 
545   	 00A8	 00004408		a0 = a0 + a1			# LN: 234 | 
546   	 00A9	 9075020C		i0 = i7 - (0x20c)			# LN: 234 | 
547   	 00AA	 98540000		xmem[i0] = a0h			# LN: 234 | 
548   	 00AB	 8008008D		jmp (for_9)			# LN: 234 | 
549   	 00AC				cline_234_1:			/* LN: 232 | CYCLE: 0 | RULES: () */ 
550   	 00AC				init_latch_label_8:			/* LN: 239 | CYCLE: 0 | RULES: () */ 
551   	 00AC				for_end_9:			/* LN: 234 | CYCLE: 0 | RULES: () */ 
552   	 00AC	 9075020B		i0 = i7 - (0x20b)			# LN: 232 | 
553   	 00AD	 88140000		a0 = xmem[i0]			# LN: 232 | 
554   	 00AE	 894A0001		uhalfword(a1) = (0x1)			# LN: 232 | 
555   	 00AF	 00004408		a0 = a0 + a1			# LN: 232 | 
556   	 00B0	 9075020B		i0 = i7 - (0x20b)			# LN: 232 | 
557   	 00B1				label_end_98:			# LN: 232 | CYCLE: 5 | RULES: ()
558   	 00B1	 98540000		xmem[i0] = a0h			# LN: 232 | 
559   	 00B2				cline_232_1:			/* LN: 219 | CYCLE: 0 | RULES: () */ 
560   	 00B2				init_latch_label_9:			/* LN: 240 | CYCLE: 0 | RULES: () */ 
561   	 00B2				for_end_8:			/* LN: 232 | CYCLE: 0 | RULES: () */ 
562   	 00B2	 9075020A		i0 = i7 - (0x20a)			# LN: 219 | 
563   	 00B3	 88140000		a0 = xmem[i0]			# LN: 219 | 
564   	 00B4	 894A0001		uhalfword(a1) = (0x1)			# LN: 219 | 
565   	 00B5	 00004408		a0 = a0 + a1			# LN: 219 | 
566   	 00B6	 9075020A		i0 = i7 - (0x20a)			# LN: 219 | 
567   	 00B7	 98540000		xmem[i0] = a0h			# LN: 219 | 
568   	 00B8	 80080051		jmp (for_5)			# LN: 219 | 
569   	 00B9				cline_219_1:			/* LN: 245 | CYCLE: 0 | RULES: () */ 
570   	 00B9				for_end_5:			/* LN: 219 | CYCLE: 0 | RULES: () */ 
571   	 00B9	 90750104		i0 = i7 - (0x104)			# LN: 245 | 
572   	 00BA	 B0140000		i0 = xmem[i0]			# LN: 245 | 
573   	 00BB	 80880000		call (_cl_wavread_close)			# LN: 245 | 
574   	 00BC				cline_245_0:			/* LN: 246 | CYCLE: 0 | RULES: () */ 
575   	 00BC	 90750209		i0 = i7 - (0x209)			# LN: 246 | 
576   	 00BD	 B0140000		i0 = xmem[i0]			# LN: 246 | 
577   	 00BE	 80880000		call (_cl_wavwrite_close)			# LN: 246 | 
578   	 00BF				cline_246_0:			/* LN: 249 | CYCLE: 0 | RULES: () */ 
579   	 00BF	 00004DC0		a0 = 0			# LN: 249 | 
580   	 00C0	 800800C1		jmp (__epilogue_200)			# LN: 249 | 
581   	 00C1				cline_249_0:			/* LN: 250 | CYCLE: 0 | RULES: () */ 
582   	 00C1				__epilogue_200:			/* LN: 250 | CYCLE: 0 | RULES: () */ 
583   	 00C1	 9775020D		i7 = i7 - (0x20d)			# LN: 250 | 
584   	 00C2	 02177FFF		i7 -= 1			# LN: 250 | 
585   	 00C3	 81880000		ret			# LN: 250 | 
586   						
587   						
588   						
589   	 00C4				_processing:			/* LN: 59 | CYCLE: 0 | RULES: () */ 
590   	 00C4	 BB540007		xmem[i7] = i7			# LN: 59 | 
591   	 00C5	 020F7FFF		i7 += 1			# LN: 59 | 
592   	 00C6	 B2540017		xmem[i7] = i2; i7 += 1			# LN: 59, 59 | 
593   	 00C7	 87750011		i7 = i7 + (0x11)			# LN: 59 | 
594   	 00C8				cline_59_0:			/* LN: 61 | CYCLE: 0 | RULES: () */ 
595   	 00C8	 90750001		i0 = i7 - (0x1)			# LN: 61 | 
596   	 00C9	 884A0000		uhalfword(a0) = (_sampleBuffer + 0)			# LN: 61 | 
597   	 00CA	 88540000		xmem[i0] = a0			# LN: 61 | 
598   	 00CB				cline_61_0:			/* LN: 62 | CYCLE: 0 | RULES: () */ 
599   	 00CB	 90750002		i0 = i7 - (0x2)			# LN: 62 | 
600   	 00CC	 884A0010		uhalfword(a0) = (_sampleBuffer + 16)			# LN: 62 | 
601   	 00CD	 88540000		xmem[i0] = a0			# LN: 62 | 
602   	 00CE				cline_62_0:			/* LN: 63 | CYCLE: 0 | RULES: () */ 
603   	 00CE	 90750003		i0 = i7 - (0x3)			# LN: 63 | 
604   	 00CF	 884A0020		uhalfword(a0) = (_sampleBuffer + 32)			# LN: 63 | 
605   	 00D0	 88540000		xmem[i0] = a0			# LN: 63 | 
606   	 00D1				cline_63_0:			/* LN: 64 | CYCLE: 0 | RULES: () */ 
607   	 00D1	 90750004		i0 = i7 - (0x4)			# LN: 64 | 
608   	 00D2	 884A0030		uhalfword(a0) = (_sampleBuffer + 48)			# LN: 64 | 
609   	 00D3	 88540000		xmem[i0] = a0			# LN: 64 | 
610   	 00D4				cline_64_0:			/* LN: 65 | CYCLE: 0 | RULES: () */ 
611   	 00D4	 90750005		i0 = i7 - (0x5)			# LN: 65 | 
612   	 00D5	 884A0040		uhalfword(a0) = (_sampleBuffer + 64)			# LN: 65 | 
613   	 00D6	 88540000		xmem[i0] = a0			# LN: 65 | 
614   	 00D7				cline_65_0:			/* LN: 68 | CYCLE: 0 | RULES: () */ 
615   	 00D7	 90750006		i0 = i7 - (0x6)			# LN: 68 | 
616   	 00D8	 884A0000		uhalfword(a0) = (_temp_left + 0)			# LN: 68 | 
617   	 00D9	 88540000		xmem[i0] = a0			# LN: 68 | 
618   	 00DA				cline_68_0:			/* LN: 69 | CYCLE: 0 | RULES: () */ 
619   	 00DA	 90750007		i0 = i7 - (0x7)			# LN: 69 | 
620   	 00DB	 884A0000		uhalfword(a0) = (_temp_right + 0)			# LN: 69 | 
621   	 00DC	 88540000		xmem[i0] = a0			# LN: 69 | 
622   	 00DD				cline_69_0:			/* LN: 70 | CYCLE: 0 | RULES: () */ 
623   	 00DD	 90750008		i0 = i7 - (0x8)			# LN: 70 | 
624   	 00DE	 884A0000		uhalfword(a0) = (_temp_nizL11k + 0)			# LN: 70 | 
625   	 00DF	 88540000		xmem[i0] = a0			# LN: 70 | 
626   	 00E0				cline_70_0:			/* LN: 71 | CYCLE: 0 | RULES: () */ 
627   	 00E0	 90750009		i0 = i7 - (0x9)			# LN: 71 | 
628   	 00E1	 884A0000		uhalfword(a0) = (_temp_nizR11k + 0)			# LN: 71 | 
629   	 00E2	 88540000		xmem[i0] = a0			# LN: 71 | 
630   	 00E3				cline_71_0:			/* LN: 72 | CYCLE: 0 | RULES: () */ 
631   	 00E3	 9075000A		i0 = i7 - (0xa)			# LN: 72 | 
632   	 00E4	 884A0000		uhalfword(a0) = (_temp_nizL5k + 0)			# LN: 72 | 
633   	 00E5	 88540000		xmem[i0] = a0			# LN: 72 | 
634   	 00E6				cline_72_0:			/* LN: 73 | CYCLE: 0 | RULES: () */ 
635   	 00E6	 9075000B		i0 = i7 - (0xb)			# LN: 73 | 
636   	 00E7	 884A0000		uhalfword(a0) = (_temp_nizR5k + 0)			# LN: 73 | 
637   	 00E8	 88540000		xmem[i0] = a0			# LN: 73 | 
638   	 00E9				cline_73_0:			/* LN: 74 | CYCLE: 0 | RULES: () */ 
639   	 00E9	 9075000C		i0 = i7 - (0xc)			# LN: 74 | 
640   	 00EA	 884A0000		uhalfword(a0) = (_temp_nizL3k + 0)			# LN: 74 | 
641   	 00EB	 88540000		xmem[i0] = a0			# LN: 74 | 
642   	 00EC				cline_74_0:			/* LN: 75 | CYCLE: 0 | RULES: () */ 
643   	 00EC	 9075000D		i0 = i7 - (0xd)			# LN: 75 | 
644   	 00ED	 884A0000		uhalfword(a0) = (_temp_nizR3k + 0)			# LN: 75 | 
645   	 00EE	 88540000		xmem[i0] = a0			# LN: 75 | 
646   	 00EF				cline_75_0:			/* LN: 80 | CYCLE: 0 | RULES: () */ 
647   	 00EF	 9075000E		i0 = i7 - (0xe)			# LN: 80 | 
648   	 00F0	 00004DC0		a0 = 0			# LN: 80 | 
649   	 00F1	 98540000		xmem[i0] = a0h			# LN: 80 | 
650   	 00F2	 810001D3		do (0x10), label_end_92			# LN: 80 | 
651   	 00F3				cline_80_0:			/* LN: 82 | CYCLE: 0 | RULES: () */ 
652   	 00F3				label_begin_92:			/* LN: 80 | CYCLE: 0 | RULES: () */ 
653   	 00F3	 90750001		i0 = i7 - (0x1)			# LN: 82 | 
654   	 00F4	 B0140000		i0 = xmem[i0]			# LN: 82 | 
655   	 00F5	 91750006		i1 = i7 - (0x6)			# LN: 82 | 
656   	 00F6	 B1140001		i1 = xmem[i1]			# LN: 82 | 
657   	 00F7	 88140000		a0 = xmem[i0]			# LN: 82 | 
658   	 00F8	 98540001		xmem[i1] = a0h			# LN: 82 | 
659   	 00F9	 90750001		i0 = i7 - (0x1)			# LN: 82 | 
660   	 00FA	 B0140000		i0 = xmem[i0]			# LN: 82 | 
661   	 00FB	 91750001		i1 = i7 - (0x1)			# LN: 82 | 
662   	 00FC	 02087FFF		i0 += 1			# LN: 82 | 
663   	 00FD	 B0540001		xmem[i1] = i0			# LN: 82 | 
664   	 00FE				cline_82_0:			/* LN: 83 | CYCLE: 0 | RULES: () */ 
665   	 00FE	 90750002		i0 = i7 - (0x2)			# LN: 83 | 
666   	 00FF	 B0140000		i0 = xmem[i0]			# LN: 83 | 
667   	 0100	 91750007		i1 = i7 - (0x7)			# LN: 83 | 
668   	 0101	 B1140001		i1 = xmem[i1]			# LN: 83 | 
669   	 0102	 88140000		a0 = xmem[i0]			# LN: 83 | 
670   	 0103	 98540001		xmem[i1] = a0h			# LN: 83 | 
671   	 0104	 90750002		i0 = i7 - (0x2)			# LN: 83 | 
672   	 0105	 B0140000		i0 = xmem[i0]			# LN: 83 | 
673   	 0106	 91750002		i1 = i7 - (0x2)			# LN: 83 | 
674   	 0107	 02087FFF		i0 += 1			# LN: 83 | 
675   	 0108	 B0540001		xmem[i1] = i0			# LN: 83 | 
676   	 0109				cline_83_0:			/* LN: 84 | CYCLE: 0 | RULES: () */ 
677   	 0109	 90750006		i0 = i7 - (0x6)			# LN: 84 | 
678   	 010A	 B0140000		i0 = xmem[i0]			# LN: 84 | 
679   	 010B	 80040000		x0 = xmem[_INITIAL_GAIN + 0]			# LN: 84 | 
680   	 010C	 81140000		x1 = xmem[i0]			# LN: 84 | 
681   	 010D	 90750006		i0 = i7 - (0x6)			# LN: 84 | 
682   	 010E	 B0140000		i0 = xmem[i0]			# LN: 84 | 
683   	 010F	 00002020		a0 = x1 * x0			# LN: 84 | 
684   	 0110	 88540000		xmem[i0] = a0			# LN: 84 | 
685   	 0111				cline_84_0:			/* LN: 85 | CYCLE: 0 | RULES: () */ 
686   	 0111	 90750007		i0 = i7 - (0x7)			# LN: 85 | 
687   	 0112	 B0140000		i0 = xmem[i0]			# LN: 85 | 
688   	 0113	 80040000		x0 = xmem[_INITIAL_GAIN + 0]			# LN: 85 | 
689   	 0114	 81140000		x1 = xmem[i0]			# LN: 85 | 
690   	 0115	 90750007		i0 = i7 - (0x7)			# LN: 85 | 
691   	 0116	 B0140000		i0 = xmem[i0]			# LN: 85 | 
692   	 0117	 00002020		a0 = x1 * x0			# LN: 85 | 
693   	 0118	 88540000		xmem[i0] = a0			# LN: 85 | 
694   	 0119				cline_85_0:			/* LN: 86 | CYCLE: 0 | RULES: () */ 
695   	 0119	 90750006		i0 = i7 - (0x6)			# LN: 86 | 
696   	 011A	 B0140000		i0 = xmem[i0]			# LN: 86 | 
697   	 011B	 A1050000		i1 = (0) + (_coefficients_11k_lpf)			# LN: 86 | 
698   	 011C	 88140000		a0 = xmem[i0]			# LN: 86 | 
699   	 011D	 A4050000		i4 = (0) + (_x_history0)			# LN: 86 | 
700   	 011E	 90750006		i0 = i7 - (0x6)			# LN: 86 | 
701   	 011F	 B0140000		i0 = xmem[i0]			# LN: 86 | 
702   	 0120	 A5050000		i5 = (0) + (_y_history0)			# LN: 86 | 
703   	 0121	 02087FFF		i0 += 1			# LN: 86 | 
704   	 0122	 92750006		i2 = i7 - (0x6)			# LN: 86 | 
705   	 0123	 B0540002		xmem[i2] = i0			# LN: 86 | 
706   	 0124	 B1090030		i0 = i1			# LN: 86 | 
707   	 0125	 B8090031		i1 = i4			# LN: 86 | 
708   	 0126	 B9090038		i4 = i5			# LN: 86 | 
709   	 0127	 808802C9		call (_second_order_IIR)			# LN: 86 | 
710   	 0128	 90750008		i0 = i7 - (0x8)			# LN: 86 | 
711   	 0129	 B0140000		i0 = xmem[i0]			# LN: 86 | 
712   	 012A	 00007FFF		nop #empty cycle
713   	 012B	 88540000		xmem[i0] = a0			# LN: 86 | 
714   	 012C				cline_86_0:			/* LN: 87 | CYCLE: 0 | RULES: () */ 
715   	 012C	 90750007		i0 = i7 - (0x7)			# LN: 87 | 
716   	 012D	 B0140000		i0 = xmem[i0]			# LN: 87 | 
717   	 012E	 A1050000		i1 = (0) + (_coefficients_11k_lpf)			# LN: 87 | 
718   	 012F	 88140000		a0 = xmem[i0]			# LN: 87 | 
719   	 0130	 A4050000		i4 = (0) + (_x_history1)			# LN: 87 | 
720   	 0131	 A5050000		i5 = (0) + (_y_history1)			# LN: 87 | 
721   	 0132	 B1090030		i0 = i1			# LN: 87 | 
722   	 0133	 B8090031		i1 = i4			# LN: 87 | 
723   	 0134	 B9090038		i4 = i5			# LN: 87 | 
724   	 0135	 808802C9		call (_second_order_IIR)			# LN: 87 | 
725   	 0136	 90750009		i0 = i7 - (0x9)			# LN: 87 | 
726   	 0137	 B0140000		i0 = xmem[i0]			# LN: 87 | 
727   	 0138	 00007FFF		nop #empty cycle
728   	 0139	 88540000		xmem[i0] = a0			# LN: 87 | 
729   	 013A				cline_87_0:			/* LN: 88 | CYCLE: 0 | RULES: () */ 
730   	 013A	 90750006		i0 = i7 - (0x6)			# LN: 88 | 
731   	 013B	 B0140000		i0 = xmem[i0]			# LN: 88 | 
732   	 013C	 A1050000		i1 = (0) + (_coefficients_5k_hpf)			# LN: 88 | 
733   	 013D	 88140000		a0 = xmem[i0]			# LN: 88 | 
734   	 013E	 A4050000		i4 = (0) + (_x_history2)			# LN: 88 | 
735   	 013F	 A5050000		i5 = (0) + (_y_history2)			# LN: 88 | 
736   	 0140	 B1090030		i0 = i1			# LN: 88 | 
737   	 0141	 B8090031		i1 = i4			# LN: 88 | 
738   	 0142	 B9090038		i4 = i5			# LN: 88 | 
739   	 0143	 808802C9		call (_second_order_IIR)			# LN: 88 | 
740   	 0144	 9075000A		i0 = i7 - (0xa)			# LN: 88 | 
741   	 0145	 B0140000		i0 = xmem[i0]			# LN: 88 | 
742   	 0146	 00007FFF		nop #empty cycle
743   	 0147	 88540000		xmem[i0] = a0			# LN: 88 | 
744   	 0148				cline_88_0:			/* LN: 89 | CYCLE: 0 | RULES: () */ 
745   	 0148	 90750006		i0 = i7 - (0x6)			# LN: 89 | 
746   	 0149	 B0140000		i0 = xmem[i0]			# LN: 89 | 
747   	 014A	 91750006		i1 = i7 - (0x6)			# LN: 89 | 
748   	 014B	 02087FFF		i0 += 1			# LN: 89 | 
749   	 014C	 B0540001		xmem[i1] = i0			# LN: 89 | 
750   	 014D				cline_89_0:			/* LN: 90 | CYCLE: 0 | RULES: () */ 
751   	 014D	 9075000A		i0 = i7 - (0xa)			# LN: 90 | 
752   	 014E	 B0140000		i0 = xmem[i0]			# LN: 90 | 
753   	 014F	 80040000		x0 = xmem[__extractedConst_0_1 + 0]			# LN: 90 | 
754   	 0150	 81140000		x1 = xmem[i0]			# LN: 90 | 
755   	 0151	 9075000A		i0 = i7 - (0xa)			# LN: 90 | 
756   	 0152	 B0140000		i0 = xmem[i0]			# LN: 90 | 
757   	 0153	 00002020		a0 = x1 * x0			# LN: 90 | 
758   	 0154	 88540000		xmem[i0] = a0			# LN: 90 | 
759   	 0155				cline_90_0:			/* LN: 91 | CYCLE: 0 | RULES: () */ 
760   	 0155	 90750007		i0 = i7 - (0x7)			# LN: 91 | 
761   	 0156	 B0140000		i0 = xmem[i0]			# LN: 91 | 
762   	 0157	 A1050000		i1 = (0) + (_coefficients_5k_hpf)			# LN: 91 | 
763   	 0158	 88140000		a0 = xmem[i0]			# LN: 91 | 
764   	 0159	 A4050000		i4 = (0) + (_x_history3)			# LN: 91 | 
765   	 015A	 A5050000		i5 = (0) + (_y_history3)			# LN: 91 | 
766   	 015B	 B1090030		i0 = i1			# LN: 91 | 
767   	 015C	 B8090031		i1 = i4			# LN: 91 | 
768   	 015D	 B9090038		i4 = i5			# LN: 91 | 
769   	 015E	 808802C9		call (_second_order_IIR)			# LN: 91 | 
770   	 015F	 9075000B		i0 = i7 - (0xb)			# LN: 91 | 
771   	 0160	 B0140000		i0 = xmem[i0]			# LN: 91 | 
772   	 0161	 00007FFF		nop #empty cycle
773   	 0162	 88540000		xmem[i0] = a0			# LN: 91 | 
774   	 0163				cline_91_0:			/* LN: 92 | CYCLE: 0 | RULES: () */ 
775   	 0163	 90750007		i0 = i7 - (0x7)			# LN: 92 | 
776   	 0164	 B0140000		i0 = xmem[i0]			# LN: 92 | 
777   	 0165	 91750007		i1 = i7 - (0x7)			# LN: 92 | 
778   	 0166	 02087FFF		i0 += 1			# LN: 92 | 
779   	 0167	 B0540001		xmem[i1] = i0			# LN: 92 | 
780   	 0168				cline_92_0:			/* LN: 93 | CYCLE: 0 | RULES: () */ 
781   	 0168	 9075000B		i0 = i7 - (0xb)			# LN: 93 | 
782   	 0169	 B0140000		i0 = xmem[i0]			# LN: 93 | 
783   	 016A	 80040000		x0 = xmem[__extractedConst_1_1 + 0]			# LN: 93 | 
784   	 016B	 81140000		x1 = xmem[i0]			# LN: 93 | 
785   	 016C	 9075000B		i0 = i7 - (0xb)			# LN: 93 | 
786   	 016D	 B0140000		i0 = xmem[i0]			# LN: 93 | 
787   	 016E	 00002020		a0 = x1 * x0			# LN: 93 | 
788   	 016F	 88540000		xmem[i0] = a0			# LN: 93 | 
789   	 0170				cline_93_0:			/* LN: 94 | CYCLE: 0 | RULES: () */ 
790   	 0170	 90750008		i0 = i7 - (0x8)			# LN: 94 | 
791   	 0171	 B0140000		i0 = xmem[i0]			# LN: 94 | 
792   	 0172	 A1050000		i1 = (0) + (_coefficients_3k_hpf)			# LN: 94 | 
793   	 0173	 88140000		a0 = xmem[i0]			# LN: 94 | 
794   	 0174	 A4050000		i4 = (0) + (_x_history4)			# LN: 94 | 
795   	 0175	 A5050000		i5 = (0) + (_y_history4)			# LN: 94 | 
796   	 0176	 B1090030		i0 = i1			# LN: 94 | 
797   	 0177	 B8090031		i1 = i4			# LN: 94 | 
798   	 0178	 B9090038		i4 = i5			# LN: 94 | 
799   	 0179	 808802C9		call (_second_order_IIR)			# LN: 94 | 
800   	 017A	 9075000C		i0 = i7 - (0xc)			# LN: 94 | 
801   	 017B	 B0140000		i0 = xmem[i0]			# LN: 94 | 
802   	 017C	 00007FFF		nop #empty cycle
803   	 017D	 88540000		xmem[i0] = a0			# LN: 94 | 
804   	 017E				cline_94_0:			/* LN: 95 | CYCLE: 0 | RULES: () */ 
805   	 017E	 90750008		i0 = i7 - (0x8)			# LN: 95 | 
806   	 017F	 B0140000		i0 = xmem[i0]			# LN: 95 | 
807   	 0180	 91750008		i1 = i7 - (0x8)			# LN: 95 | 
808   	 0181	 02087FFF		i0 += 1			# LN: 95 | 
809   	 0182	 B0540001		xmem[i1] = i0			# LN: 95 | 
810   	 0183				cline_95_0:			/* LN: 96 | CYCLE: 0 | RULES: () */ 
811   	 0183	 9075000C		i0 = i7 - (0xc)			# LN: 96 | 
812   	 0184	 B0140000		i0 = xmem[i0]			# LN: 96 | 
813   	 0185	 80040000		x0 = xmem[__extractedConst_2_1 + 0]			# LN: 96 | 
814   	 0186	 81140000		x1 = xmem[i0]			# LN: 96 | 
815   	 0187	 9075000C		i0 = i7 - (0xc)			# LN: 96 | 
816   	 0188	 B0140000		i0 = xmem[i0]			# LN: 96 | 
817   	 0189	 00002020		a0 = x1 * x0			# LN: 96 | 
818   	 018A	 88540000		xmem[i0] = a0			# LN: 96 | 
819   	 018B				cline_96_0:			/* LN: 97 | CYCLE: 0 | RULES: () */ 
820   	 018B	 90750009		i0 = i7 - (0x9)			# LN: 97 | 
821   	 018C	 B0140000		i0 = xmem[i0]			# LN: 97 | 
822   	 018D	 A1050000		i1 = (0) + (_coefficients_3k_hpf)			# LN: 97 | 
823   	 018E	 88140000		a0 = xmem[i0]			# LN: 97 | 
824   	 018F	 A4050000		i4 = (0) + (_x_history5)			# LN: 97 | 
825   	 0190	 A5050000		i5 = (0) + (_y_history5)			# LN: 97 | 
826   	 0191	 B1090030		i0 = i1			# LN: 97 | 
827   	 0192	 B8090031		i1 = i4			# LN: 97 | 
828   	 0193	 B9090038		i4 = i5			# LN: 97 | 
829   	 0194	 808802C9		call (_second_order_IIR)			# LN: 97 | 
830   	 0195	 9075000D		i0 = i7 - (0xd)			# LN: 97 | 
831   	 0196	 B0140000		i0 = xmem[i0]			# LN: 97 | 
832   	 0197	 00007FFF		nop #empty cycle
833   	 0198	 88540000		xmem[i0] = a0			# LN: 97 | 
834   	 0199				cline_97_0:			/* LN: 98 | CYCLE: 0 | RULES: () */ 
835   	 0199	 90750009		i0 = i7 - (0x9)			# LN: 98 | 
836   	 019A	 B0140000		i0 = xmem[i0]			# LN: 98 | 
837   	 019B	 91750009		i1 = i7 - (0x9)			# LN: 98 | 
838   	 019C	 02087FFF		i0 += 1			# LN: 98 | 
839   	 019D	 B0540001		xmem[i1] = i0			# LN: 98 | 
840   	 019E				cline_98_0:			/* LN: 99 | CYCLE: 0 | RULES: () */ 
841   	 019E	 9075000D		i0 = i7 - (0xd)			# LN: 99 | 
842   	 019F	 B0140000		i0 = xmem[i0]			# LN: 99 | 
843   	 01A0	 80040000		x0 = xmem[__extractedConst_3_1 + 0]			# LN: 99 | 
844   	 01A1	 81140000		x1 = xmem[i0]			# LN: 99 | 
845   	 01A2	 9075000D		i0 = i7 - (0xd)			# LN: 99 | 
846   	 01A3	 B0140000		i0 = xmem[i0]			# LN: 99 | 
847   	 01A4	 00002020		a0 = x1 * x0			# LN: 99 | 
848   	 01A5	 88540000		xmem[i0] = a0			# LN: 99 | 
849   	 01A6				cline_99_0:			/* LN: 100 | CYCLE: 0 | RULES: () */ 
850   	 01A6	 9075000C		i0 = i7 - (0xc)			# LN: 100 | 
851   	 01A7	 B0140000		i0 = xmem[i0]			# LN: 100 | 
852   	 01A8	 9175000A		i1 = i7 - (0xa)			# LN: 100 | 
853   	 01A9	 B1140001		i1 = xmem[i1]			# LN: 100 | 
854   	 01AA	 88140000		a0 = xmem[i0]			# LN: 100 | 
855   	 01AB	 89140001		a1 = xmem[i1]			# LN: 100 | 
856   	 01AC	 9075000C		i0 = i7 - (0xc)			# LN: 100 | 
857   	 01AD	 B0140000		i0 = xmem[i0]			# LN: 100 | 
858   	 01AE	 00004408		a0 = a0 + a1			# LN: 100 | 
859   	 01AF	 98540000		xmem[i0] = a0h			# LN: 100 | 
860   	 01B0				cline_100_0:			/* LN: 101 | CYCLE: 0 | RULES: () */ 
861   	 01B0	 9075000C		i0 = i7 - (0xc)			# LN: 101 | 
862   	 01B1	 B0140000		i0 = xmem[i0]			# LN: 101 | 
863   	 01B2	 9175000C		i1 = i7 - (0xc)			# LN: 101 | 
864   	 01B3	 02087FFF		i0 += 1			# LN: 101 | 
865   	 01B4	 B0540001		xmem[i1] = i0			# LN: 101 | 
866   	 01B5				cline_101_0:			/* LN: 102 | CYCLE: 0 | RULES: () */ 
867   	 01B5	 9075000A		i0 = i7 - (0xa)			# LN: 102 | 
868   	 01B6	 B0140000		i0 = xmem[i0]			# LN: 102 | 
869   	 01B7	 9175000A		i1 = i7 - (0xa)			# LN: 102 | 
870   	 01B8	 02087FFF		i0 += 1			# LN: 102 | 
871   	 01B9	 B0540001		xmem[i1] = i0			# LN: 102 | 
872   	 01BA				cline_102_0:			/* LN: 103 | CYCLE: 0 | RULES: () */ 
873   	 01BA	 9075000D		i0 = i7 - (0xd)			# LN: 103 | 
874   	 01BB	 B0140000		i0 = xmem[i0]			# LN: 103 | 
875   	 01BC	 9175000B		i1 = i7 - (0xb)			# LN: 103 | 
876   	 01BD	 B1140001		i1 = xmem[i1]			# LN: 103 | 
877   	 01BE	 88140000		a0 = xmem[i0]			# LN: 103 | 
878   	 01BF	 89140001		a1 = xmem[i1]			# LN: 103 | 
879   	 01C0	 9075000D		i0 = i7 - (0xd)			# LN: 103 | 
880   	 01C1	 B0140000		i0 = xmem[i0]			# LN: 103 | 
881   	 01C2	 00004408		a0 = a0 + a1			# LN: 103 | 
882   	 01C3	 98540000		xmem[i0] = a0h			# LN: 103 | 
883   	 01C4				cline_103_0:			/* LN: 104 | CYCLE: 0 | RULES: () */ 
884   	 01C4	 9075000D		i0 = i7 - (0xd)			# LN: 104 | 
885   	 01C5	 B0140000		i0 = xmem[i0]			# LN: 104 | 
886   	 01C6	 9175000D		i1 = i7 - (0xd)			# LN: 104 | 
887   	 01C7	 02087FFF		i0 += 1			# LN: 104 | 
888   	 01C8	 B0540001		xmem[i1] = i0			# LN: 104 | 
889   	 01C9				cline_104_0:			/* LN: 105 | CYCLE: 0 | RULES: () */ 
890   	 01C9	 9075000B		i0 = i7 - (0xb)			# LN: 105 | 
891   	 01CA	 B0140000		i0 = xmem[i0]			# LN: 105 | 
892   	 01CB	 9175000B		i1 = i7 - (0xb)			# LN: 105 | 
893   	 01CC	 02087FFF		i0 += 1			# LN: 105 | 
894   	 01CD	 B0540001		xmem[i1] = i0			# LN: 105 | 
895   	 01CE				cline_105_0:			/* LN: 80 | CYCLE: 0 | RULES: () */ 
896   	 01CE				init_latch_label_0:			/* LN: 106 | CYCLE: 0 | RULES: () */ 
897   	 01CE	 9075000E		i0 = i7 - (0xe)			# LN: 80 | 
898   	 01CF	 88140000		a0 = xmem[i0]			# LN: 80 | 
899   	 01D0	 894A0001		uhalfword(a1) = (0x1)			# LN: 80 | 
900   	 01D1	 00004408		a0 = a0 + a1			# LN: 80 | 
901   	 01D2	 9075000E		i0 = i7 - (0xe)			# LN: 80 | 
902   	 01D3				label_end_92:			# LN: 80 | CYCLE: 5 | RULES: ()
903   	 01D3	 98540000		xmem[i0] = a0h			# LN: 80 | 
904   	 01D4				cline_80_1:			/* LN: 108 | CYCLE: 0 | RULES: () */ 
905   	 01D4				for_end_0:			/* LN: 80 | CYCLE: 0 | RULES: () */ 
906   	 01D4	 90750001		i0 = i7 - (0x1)			# LN: 108 | 
907   	 01D5	 884A0000		uhalfword(a0) = (_sampleBuffer + 0)			# LN: 108 | 
908   	 01D6	 88540000		xmem[i0] = a0			# LN: 108 | 
909   	 01D7				cline_108_0:			/* LN: 109 | CYCLE: 0 | RULES: () */ 
910   	 01D7	 90750002		i0 = i7 - (0x2)			# LN: 109 | 
911   	 01D8	 884A0010		uhalfword(a0) = (_sampleBuffer + 16)			# LN: 109 | 
912   	 01D9	 88540000		xmem[i0] = a0			# LN: 109 | 
913   	 01DA				cline_109_0:			/* LN: 110 | CYCLE: 0 | RULES: () */ 
914   	 01DA	 90750008		i0 = i7 - (0x8)			# LN: 110 | 
915   	 01DB	 884A0000		uhalfword(a0) = (_temp_nizL11k + 0)			# LN: 110 | 
916   	 01DC	 88540000		xmem[i0] = a0			# LN: 110 | 
917   	 01DD				cline_110_0:			/* LN: 111 | CYCLE: 0 | RULES: () */ 
918   	 01DD	 90750009		i0 = i7 - (0x9)			# LN: 111 | 
919   	 01DE	 884A0000		uhalfword(a0) = (_temp_nizR11k + 0)			# LN: 111 | 
920   	 01DF	 88540000		xmem[i0] = a0			# LN: 111 | 
921   	 01E0				cline_111_0:			/* LN: 112 | CYCLE: 0 | RULES: () */ 
922   	 01E0	 9075000A		i0 = i7 - (0xa)			# LN: 112 | 
923   	 01E1	 884A0000		uhalfword(a0) = (_temp_nizL5k + 0)			# LN: 112 | 
924   	 01E2	 88540000		xmem[i0] = a0			# LN: 112 | 
925   	 01E3				cline_112_0:			/* LN: 113 | CYCLE: 0 | RULES: () */ 
926   	 01E3	 9075000B		i0 = i7 - (0xb)			# LN: 113 | 
927   	 01E4	 884A0000		uhalfword(a0) = (_temp_nizR5k + 0)			# LN: 113 | 
928   	 01E5	 88540000		xmem[i0] = a0			# LN: 113 | 
929   	 01E6				cline_113_0:			/* LN: 114 | CYCLE: 0 | RULES: () */ 
930   	 01E6	 9075000C		i0 = i7 - (0xc)			# LN: 114 | 
931   	 01E7	 884A0000		uhalfword(a0) = (_temp_nizL3k + 0)			# LN: 114 | 
932   	 01E8	 88540000		xmem[i0] = a0			# LN: 114 | 
933   	 01E9				cline_114_0:			/* LN: 115 | CYCLE: 0 | RULES: () */ 
934   	 01E9	 9075000D		i0 = i7 - (0xd)			# LN: 115 | 
935   	 01EA	 884A0000		uhalfword(a0) = (_temp_nizR3k + 0)			# LN: 115 | 
936   	 01EB	 88540000		xmem[i0] = a0			# LN: 115 | 
937   	 01EC				cline_115_0:			/* LN: 118 | CYCLE: 0 | RULES: () */ 
938   	 01EC	 88040000		a0 = xmem[_MODE + 0]			# LN: 118 | 
939   	 01ED	 894A0140		uhalfword(a1) = (0x140)			# LN: 118 | 
940   	 01EE	 00004F08		a0 - a1			# LN: 118 | 
941   	 01EF	 8448024B		if (a != 0) jmp (else_0)			# LN: 118 | 
942   	 01F0				cline_118_0:			/* LN: 121 | CYCLE: 0 | RULES: () */ 
943   	 01F0	 9075000F		i0 = i7 - (0xf)			# LN: 121 | 
944   	 01F1	 00004DC0		a0 = 0			# LN: 121 | 
945   	 01F2	 98540000		xmem[i0] = a0h			# LN: 121 | 
946   	 01F3	 81000249		do (0x10), label_end_93			# LN: 121 | 
947   	 01F4				cline_121_0:			/* LN: 123 | CYCLE: 0 | RULES: () */ 
948   	 01F4				label_begin_93:			/* LN: 121 | CYCLE: 0 | RULES: () */ 
949   	 01F4	 9075000C		i0 = i7 - (0xc)			# LN: 123 | 
950   	 01F5	 B0140000		i0 = xmem[i0]			# LN: 123 | 
951   	 01F6	 91750001		i1 = i7 - (0x1)			# LN: 123 | 
952   	 01F7	 B1140001		i1 = xmem[i1]			# LN: 123 | 
953   	 01F8	 88140000		a0 = xmem[i0]			# LN: 123 | 
954   	 01F9	 98540001		xmem[i1] = a0h			# LN: 123 | 
955   	 01FA				cline_123_0:			/* LN: 124 | CYCLE: 0 | RULES: () */ 
956   	 01FA	 9075000D		i0 = i7 - (0xd)			# LN: 124 | 
957   	 01FB	 B0140000		i0 = xmem[i0]			# LN: 124 | 
958   	 01FC	 91750002		i1 = i7 - (0x2)			# LN: 124 | 
959   	 01FD	 B1140001		i1 = xmem[i1]			# LN: 124 | 
960   	 01FE	 88140000		a0 = xmem[i0]			# LN: 124 | 
961   	 01FF	 98540001		xmem[i1] = a0h			# LN: 124 | 
962   	 0200				cline_124_0:			/* LN: 125 | CYCLE: 0 | RULES: () */ 
963   	 0200	 90750008		i0 = i7 - (0x8)			# LN: 125 | 
964   	 0201	 B0140000		i0 = xmem[i0]			# LN: 125 | 
965   	 0202	 91750003		i1 = i7 - (0x3)			# LN: 125 | 
966   	 0203	 B1140001		i1 = xmem[i1]			# LN: 125 | 
967   	 0204	 88140000		a0 = xmem[i0]			# LN: 125 | 
968   	 0205	 98540001		xmem[i1] = a0h			# LN: 125 | 
969   	 0206				cline_125_0:			/* LN: 126 | CYCLE: 0 | RULES: () */ 
970   	 0206	 90750009		i0 = i7 - (0x9)			# LN: 126 | 
971   	 0207	 B0140000		i0 = xmem[i0]			# LN: 126 | 
972   	 0208	 91750004		i1 = i7 - (0x4)			# LN: 126 | 
973   	 0209	 B1140001		i1 = xmem[i1]			# LN: 126 | 
974   	 020A	 88140000		a0 = xmem[i0]			# LN: 126 | 
975   	 020B	 98540001		xmem[i1] = a0h			# LN: 126 | 
976   	 020C				cline_126_0:			/* LN: 127 | CYCLE: 0 | RULES: () */ 
977   	 020C	 9075000A		i0 = i7 - (0xa)			# LN: 127 | 
978   	 020D	 B0140000		i0 = xmem[i0]			# LN: 127 | 
979   	 020E	 91750005		i1 = i7 - (0x5)			# LN: 127 | 
980   	 020F	 B1140001		i1 = xmem[i1]			# LN: 127 | 
981   	 0210	 88140000		a0 = xmem[i0]			# LN: 127 | 
982   	 0211	 98540001		xmem[i1] = a0h			# LN: 127 | 
983   	 0212				cline_127_0:			/* LN: 128 | CYCLE: 0 | RULES: () */ 
984   	 0212	 90750001		i0 = i7 - (0x1)			# LN: 128 | 
985   	 0213	 B0140000		i0 = xmem[i0]			# LN: 128 | 
986   	 0214	 91750001		i1 = i7 - (0x1)			# LN: 128 | 
987   	 0215	 02087FFF		i0 += 1			# LN: 128 | 
988   	 0216	 B0540001		xmem[i1] = i0			# LN: 128 | 
989   	 0217				cline_128_0:			/* LN: 129 | CYCLE: 0 | RULES: () */ 
990   	 0217	 90750002		i0 = i7 - (0x2)			# LN: 129 | 
991   	 0218	 B0140000		i0 = xmem[i0]			# LN: 129 | 
992   	 0219	 91750002		i1 = i7 - (0x2)			# LN: 129 | 
993   	 021A	 02087FFF		i0 += 1			# LN: 129 | 
994   	 021B	 B0540001		xmem[i1] = i0			# LN: 129 | 
995   	 021C				cline_129_0:			/* LN: 130 | CYCLE: 0 | RULES: () */ 
996   	 021C	 90750003		i0 = i7 - (0x3)			# LN: 130 | 
997   	 021D	 B0140000		i0 = xmem[i0]			# LN: 130 | 
998   	 021E	 91750003		i1 = i7 - (0x3)			# LN: 130 | 
999   	 021F	 02087FFF		i0 += 1			# LN: 130 | 
1000  	 0220	 B0540001		xmem[i1] = i0			# LN: 130 | 
1001  	 0221				cline_130_0:			/* LN: 131 | CYCLE: 0 | RULES: () */ 
1002  	 0221	 90750004		i0 = i7 - (0x4)			# LN: 131 | 
1003  	 0222	 B0140000		i0 = xmem[i0]			# LN: 131 | 
1004  	 0223	 91750004		i1 = i7 - (0x4)			# LN: 131 | 
1005  	 0224	 02087FFF		i0 += 1			# LN: 131 | 
1006  	 0225	 B0540001		xmem[i1] = i0			# LN: 131 | 
1007  	 0226				cline_131_0:			/* LN: 132 | CYCLE: 0 | RULES: () */ 
1008  	 0226	 90750005		i0 = i7 - (0x5)			# LN: 132 | 
1009  	 0227	 B0140000		i0 = xmem[i0]			# LN: 132 | 
1010  	 0228	 91750005		i1 = i7 - (0x5)			# LN: 132 | 
1011  	 0229	 02087FFF		i0 += 1			# LN: 132 | 
1012  	 022A	 B0540001		xmem[i1] = i0			# LN: 132 | 
1013  	 022B				cline_132_0:			/* LN: 133 | CYCLE: 0 | RULES: () */ 
1014  	 022B	 9075000C		i0 = i7 - (0xc)			# LN: 133 | 
1015  	 022C	 B0140000		i0 = xmem[i0]			# LN: 133 | 
1016  	 022D	 9175000C		i1 = i7 - (0xc)			# LN: 133 | 
1017  	 022E	 02087FFF		i0 += 1			# LN: 133 | 
1018  	 022F	 B0540001		xmem[i1] = i0			# LN: 133 | 
1019  	 0230				cline_133_0:			/* LN: 134 | CYCLE: 0 | RULES: () */ 
1020  	 0230	 9075000D		i0 = i7 - (0xd)			# LN: 134 | 
1021  	 0231	 B0140000		i0 = xmem[i0]			# LN: 134 | 
1022  	 0232	 9175000D		i1 = i7 - (0xd)			# LN: 134 | 
1023  	 0233	 02087FFF		i0 += 1			# LN: 134 | 
1024  	 0234	 B0540001		xmem[i1] = i0			# LN: 134 | 
1025  	 0235				cline_134_0:			/* LN: 135 | CYCLE: 0 | RULES: () */ 
1026  	 0235	 90750008		i0 = i7 - (0x8)			# LN: 135 | 
1027  	 0236	 B0140000		i0 = xmem[i0]			# LN: 135 | 
1028  	 0237	 91750008		i1 = i7 - (0x8)			# LN: 135 | 
1029  	 0238	 02087FFF		i0 += 1			# LN: 135 | 
1030  	 0239	 B0540001		xmem[i1] = i0			# LN: 135 | 
1031  	 023A				cline_135_0:			/* LN: 136 | CYCLE: 0 | RULES: () */ 
1032  	 023A	 90750009		i0 = i7 - (0x9)			# LN: 136 | 
1033  	 023B	 B0140000		i0 = xmem[i0]			# LN: 136 | 
1034  	 023C	 91750009		i1 = i7 - (0x9)			# LN: 136 | 
1035  	 023D	 02087FFF		i0 += 1			# LN: 136 | 
1036  	 023E	 B0540001		xmem[i1] = i0			# LN: 136 | 
1037  	 023F				cline_136_0:			/* LN: 137 | CYCLE: 0 | RULES: () */ 
1038  	 023F	 9075000A		i0 = i7 - (0xa)			# LN: 137 | 
1039  	 0240	 B0140000		i0 = xmem[i0]			# LN: 137 | 
1040  	 0241	 9175000A		i1 = i7 - (0xa)			# LN: 137 | 
1041  	 0242	 02087FFF		i0 += 1			# LN: 137 | 
1042  	 0243	 B0540001		xmem[i1] = i0			# LN: 137 | 
1043  	 0244				cline_137_0:			/* LN: 121 | CYCLE: 0 | RULES: () */ 
1044  	 0244				init_latch_label_1:			/* LN: 138 | CYCLE: 0 | RULES: () */ 
1045  	 0244	 9075000F		i0 = i7 - (0xf)			# LN: 121 | 
1046  	 0245	 88140000		a0 = xmem[i0]			# LN: 121 | 
1047  	 0246	 894A0001		uhalfword(a1) = (0x1)			# LN: 121 | 
1048  	 0247	 00004408		a0 = a0 + a1			# LN: 121 | 
1049  	 0248	 9075000F		i0 = i7 - (0xf)			# LN: 121 | 
1050  	 0249				label_end_93:			# LN: 121 | CYCLE: 5 | RULES: ()
1051  	 0249	 98540000		xmem[i0] = a0h			# LN: 121 | 
1052  	 024A				for_end_1:			/* LN: 121 | CYCLE: 0 | RULES: () */ 
1053  	 024A	 800802C4		jmp (endif_0)			# LN: 121 | 
1054  	 024B				cline_121_1:			/* LN: 139 | CYCLE: 0 | RULES: () */ 
1055  	 024B				else_0:			/* LN: 118 | CYCLE: 0 | RULES: () */ 
1056  	 024B	 88040000		a0 = xmem[_MODE + 0]			# LN: 139 | 
1057  	 024C	 894A00DC		uhalfword(a1) = (0xdc)			# LN: 139 | 
1058  	 024D	 00004F08		a0 - a1			# LN: 139 | 
1059  	 024E	 8448029A		if (a != 0) jmp (else_1)			# LN: 139 | 
1060  	 024F				cline_139_0:			/* LN: 142 | CYCLE: 0 | RULES: () */ 
1061  	 024F	 90750010		i0 = i7 - (0x10)			# LN: 142 | 
1062  	 0250	 00004DC0		a0 = 0			# LN: 142 | 
1063  	 0251	 98540000		xmem[i0] = a0h			# LN: 142 | 
1064  	 0252	 81000298		do (0x10), label_end_94			# LN: 142 | 
1065  	 0253				cline_142_0:			/* LN: 144 | CYCLE: 0 | RULES: () */ 
1066  	 0253				label_begin_94:			/* LN: 142 | CYCLE: 0 | RULES: () */ 
1067  	 0253	 90750001		i0 = i7 - (0x1)			# LN: 144 | 
1068  	 0254	 9175000C		i1 = i7 - (0xc)			# LN: 144 | 
1069  	 0255	 B1140001		i1 = xmem[i1]			# LN: 144 | 
1070  	 0256	 B0140000		i0 = xmem[i0]			# LN: 144 | 
1071  	 0257	 88140001		a0 = xmem[i1]			# LN: 144 | 
1072  	 0258	 98540000		xmem[i0] = a0h			# LN: 144 | 
1073  	 0259	 90750001		i0 = i7 - (0x1)			# LN: 144 | 
1074  	 025A	 B0140000		i0 = xmem[i0]			# LN: 144 | 
1075  	 025B	 91750001		i1 = i7 - (0x1)			# LN: 144 | 
1076  	 025C	 02087FFF		i0 += 1			# LN: 144 | 
1077  	 025D	 B0540001		xmem[i1] = i0			# LN: 144 | 
1078  	 025E	 9075000C		i0 = i7 - (0xc)			# LN: 144 | 
1079  	 025F	 B0140000		i0 = xmem[i0]			# LN: 144 | 
1080  	 0260	 9175000C		i1 = i7 - (0xc)			# LN: 144 | 
1081  	 0261	 02087FFF		i0 += 1			# LN: 144 | 
1082  	 0262	 B0540001		xmem[i1] = i0			# LN: 144 | 
1083  	 0263				cline_144_0:			/* LN: 145 | CYCLE: 0 | RULES: () */ 
1084  	 0263	 90750002		i0 = i7 - (0x2)			# LN: 145 | 
1085  	 0264	 9175000D		i1 = i7 - (0xd)			# LN: 145 | 
1086  	 0265	 B1140001		i1 = xmem[i1]			# LN: 145 | 
1087  	 0266	 B0140000		i0 = xmem[i0]			# LN: 145 | 
1088  	 0267	 88140001		a0 = xmem[i1]			# LN: 145 | 
1089  	 0268	 98540000		xmem[i0] = a0h			# LN: 145 | 
1090  	 0269	 90750002		i0 = i7 - (0x2)			# LN: 145 | 
1091  	 026A	 B0140000		i0 = xmem[i0]			# LN: 145 | 
1092  	 026B	 91750002		i1 = i7 - (0x2)			# LN: 145 | 
1093  	 026C	 02087FFF		i0 += 1			# LN: 145 | 
1094  	 026D	 B0540001		xmem[i1] = i0			# LN: 145 | 
1095  	 026E	 9075000D		i0 = i7 - (0xd)			# LN: 145 | 
1096  	 026F	 B0140000		i0 = xmem[i0]			# LN: 145 | 
1097  	 0270	 9175000D		i1 = i7 - (0xd)			# LN: 145 | 
1098  	 0271	 02087FFF		i0 += 1			# LN: 145 | 
1099  	 0272	 B0540001		xmem[i1] = i0			# LN: 145 | 
1100  	 0273				cline_145_0:			/* LN: 146 | CYCLE: 0 | RULES: () */ 
1101  	 0273	 90750003		i0 = i7 - (0x3)			# LN: 146 | 
1102  	 0274	 91750008		i1 = i7 - (0x8)			# LN: 146 | 
1103  	 0275	 B1140001		i1 = xmem[i1]			# LN: 146 | 
1104  	 0276	 B0140000		i0 = xmem[i0]			# LN: 146 | 
1105  	 0277	 88140001		a0 = xmem[i1]			# LN: 146 | 
1106  	 0278	 98540000		xmem[i0] = a0h			# LN: 146 | 
1107  	 0279	 90750003		i0 = i7 - (0x3)			# LN: 146 | 
1108  	 027A	 B0140000		i0 = xmem[i0]			# LN: 146 | 
1109  	 027B	 91750003		i1 = i7 - (0x3)			# LN: 146 | 
1110  	 027C	 02087FFF		i0 += 1			# LN: 146 | 
1111  	 027D	 B0540001		xmem[i1] = i0			# LN: 146 | 
1112  	 027E	 90750008		i0 = i7 - (0x8)			# LN: 146 | 
1113  	 027F	 B0140000		i0 = xmem[i0]			# LN: 146 | 
1114  	 0280	 91750008		i1 = i7 - (0x8)			# LN: 146 | 
1115  	 0281	 02087FFF		i0 += 1			# LN: 146 | 
1116  	 0282	 B0540001		xmem[i1] = i0			# LN: 146 | 
1117  	 0283				cline_146_0:			/* LN: 147 | CYCLE: 0 | RULES: () */ 
1118  	 0283	 90750004		i0 = i7 - (0x4)			# LN: 147 | 
1119  	 0284	 91750009		i1 = i7 - (0x9)			# LN: 147 | 
1120  	 0285	 B1140001		i1 = xmem[i1]			# LN: 147 | 
1121  	 0286	 B0140000		i0 = xmem[i0]			# LN: 147 | 
1122  	 0287	 88140001		a0 = xmem[i1]			# LN: 147 | 
1123  	 0288	 98540000		xmem[i0] = a0h			# LN: 147 | 
1124  	 0289	 90750004		i0 = i7 - (0x4)			# LN: 147 | 
1125  	 028A	 B0140000		i0 = xmem[i0]			# LN: 147 | 
1126  	 028B	 91750004		i1 = i7 - (0x4)			# LN: 147 | 
1127  	 028C	 02087FFF		i0 += 1			# LN: 147 | 
1128  	 028D	 B0540001		xmem[i1] = i0			# LN: 147 | 
1129  	 028E	 90750009		i0 = i7 - (0x9)			# LN: 147 | 
1130  	 028F	 B0140000		i0 = xmem[i0]			# LN: 147 | 
1131  	 0290	 91750009		i1 = i7 - (0x9)			# LN: 147 | 
1132  	 0291	 02087FFF		i0 += 1			# LN: 147 | 
1133  	 0292	 B0540001		xmem[i1] = i0			# LN: 147 | 
1134  	 0293				cline_147_0:			/* LN: 142 | CYCLE: 0 | RULES: () */ 
1135  	 0293				init_latch_label_2:			/* LN: 148 | CYCLE: 0 | RULES: () */ 
1136  	 0293	 90750010		i0 = i7 - (0x10)			# LN: 142 | 
1137  	 0294	 88140000		a0 = xmem[i0]			# LN: 142 | 
1138  	 0295	 894A0001		uhalfword(a1) = (0x1)			# LN: 142 | 
1139  	 0296	 00004408		a0 = a0 + a1			# LN: 142 | 
1140  	 0297	 90750010		i0 = i7 - (0x10)			# LN: 142 | 
1141  	 0298				label_end_94:			# LN: 142 | CYCLE: 5 | RULES: ()
1142  	 0298	 98540000		xmem[i0] = a0h			# LN: 142 | 
1143  	 0299				for_end_2:			/* LN: 142 | CYCLE: 0 | RULES: () */ 
1144  	 0299	 800802C4		jmp (endif_1)			# LN: 142 | 
1145  	 029A				cline_142_1:			/* LN: 151 | CYCLE: 0 | RULES: () */ 
1146  	 029A				else_1:			/* LN: 139 | CYCLE: 0 | RULES: () */ 
1147  	 029A	 90750011		i0 = i7 - (0x11)			# LN: 151 | 
1148  	 029B	 00004DC0		a0 = 0			# LN: 151 | 
1149  	 029C	 98540000		xmem[i0] = a0h			# LN: 151 | 
1150  	 029D	 810002C3		do (0x10), label_end_95			# LN: 151 | 
1151  	 029E				cline_151_0:			/* LN: 153 | CYCLE: 0 | RULES: () */ 
1152  	 029E				label_begin_95:			/* LN: 151 | CYCLE: 0 | RULES: () */ 
1153  	 029E	 90750001		i0 = i7 - (0x1)			# LN: 153 | 
1154  	 029F	 91750006		i1 = i7 - (0x6)			# LN: 153 | 
1155  	 02A0	 B1140001		i1 = xmem[i1]			# LN: 153 | 
1156  	 02A1	 B0140000		i0 = xmem[i0]			# LN: 153 | 
1157  	 02A2	 88140001		a0 = xmem[i1]			# LN: 153 | 
1158  	 02A3	 98540000		xmem[i0] = a0h			# LN: 153 | 
1159  	 02A4	 90750001		i0 = i7 - (0x1)			# LN: 153 | 
1160  	 02A5	 B0140000		i0 = xmem[i0]			# LN: 153 | 
1161  	 02A6	 91750001		i1 = i7 - (0x1)			# LN: 153 | 
1162  	 02A7	 02087FFF		i0 += 1			# LN: 153 | 
1163  	 02A8	 B0540001		xmem[i1] = i0			# LN: 153 | 
1164  	 02A9	 90750006		i0 = i7 - (0x6)			# LN: 153 | 
1165  	 02AA	 B0140000		i0 = xmem[i0]			# LN: 153 | 
1166  	 02AB	 91750006		i1 = i7 - (0x6)			# LN: 153 | 
1167  	 02AC	 02087FFF		i0 += 1			# LN: 153 | 
1168  	 02AD	 B0540001		xmem[i1] = i0			# LN: 153 | 
1169  	 02AE				cline_153_0:			/* LN: 154 | CYCLE: 0 | RULES: () */ 
1170  	 02AE	 90750002		i0 = i7 - (0x2)			# LN: 154 | 
1171  	 02AF	 91750007		i1 = i7 - (0x7)			# LN: 154 | 
1172  	 02B0	 B1140001		i1 = xmem[i1]			# LN: 154 | 
1173  	 02B1	 B0140000		i0 = xmem[i0]			# LN: 154 | 
1174  	 02B2	 88140001		a0 = xmem[i1]			# LN: 154 | 
1175  	 02B3	 98540000		xmem[i0] = a0h			# LN: 154 | 
1176  	 02B4	 90750002		i0 = i7 - (0x2)			# LN: 154 | 
1177  	 02B5	 B0140000		i0 = xmem[i0]			# LN: 154 | 
1178  	 02B6	 91750002		i1 = i7 - (0x2)			# LN: 154 | 
1179  	 02B7	 02087FFF		i0 += 1			# LN: 154 | 
1180  	 02B8	 B0540001		xmem[i1] = i0			# LN: 154 | 
1181  	 02B9	 90750007		i0 = i7 - (0x7)			# LN: 154 | 
1182  	 02BA	 B0140000		i0 = xmem[i0]			# LN: 154 | 
1183  	 02BB	 91750007		i1 = i7 - (0x7)			# LN: 154 | 
1184  	 02BC	 02087FFF		i0 += 1			# LN: 154 | 
1185  	 02BD	 B0540001		xmem[i1] = i0			# LN: 154 | 
1186  	 02BE				cline_154_0:			/* LN: 151 | CYCLE: 0 | RULES: () */ 
1187  	 02BE				init_latch_label_3:			/* LN: 155 | CYCLE: 0 | RULES: () */ 
1188  	 02BE	 90750011		i0 = i7 - (0x11)			# LN: 151 | 
1189  	 02BF	 88140000		a0 = xmem[i0]			# LN: 151 | 
1190  	 02C0	 894A0001		uhalfword(a1) = (0x1)			# LN: 151 | 
1191  	 02C1	 00004408		a0 = a0 + a1			# LN: 151 | 
1192  	 02C2	 90750011		i0 = i7 - (0x11)			# LN: 151 | 
1193  	 02C3				label_end_95:			# LN: 151 | CYCLE: 5 | RULES: ()
1194  	 02C3	 98540000		xmem[i0] = a0h			# LN: 151 | 
1195  	 02C4				cline_151_1:			/* LN: 158 | CYCLE: 0 | RULES: () */ 
1196  	 02C4				endif_0:			/* LN: 118 | CYCLE: 0 | RULES: () */ 
1197  	 02C4				endif_1:			/* LN: 139 | CYCLE: 0 | RULES: () */ 
1198  	 02C4				for_end_3:			/* LN: 151 | CYCLE: 0 | RULES: () */ 
1199  	 02C4	 800802C5		jmp (__epilogue_198)			# LN: 158 | 
1200  	 02C5				cline_158_0:			/* LN: 159 | CYCLE: 0 | RULES: () */ 
1201  	 02C5				__epilogue_198:			/* LN: 159 | CYCLE: 0 | RULES: () */ 
1202  	 02C5	 97750011		i7 = i7 - (0x11)			# LN: 159 | 
1203  	 02C6	 02177FFF		i7 -= 1			# LN: 159 | 
1204  	 02C7	 B2140027		i2 = xmem[i7]; i7 -= 1			# LN: 159, 159 | 
1205  	 02C8	 81880000		ret			# LN: 159 | 
1206  						
1207  						
1208  						
1209  	 02C9				_second_order_IIR:			/* LN: 42 | CYCLE: 0 | RULES: () */ 
1210  	 02C9	 BB540007		xmem[i7] = i7			# LN: 42 | 
1211  	 02CA	 020F7FFF		i7 += 1			# LN: 42 | 
1212  	 02CB	 87750007		i7 = i7 + (0x7)			# LN: 42 | 
1213  	 02CC	 95750001		i5 = i7 - (0x1)			# LN: 42 | 
1214  	 02CD	 98540005		xmem[i5] = a0h			# LN: 42 | 
1215  	 02CE	 95750002		i5 = i7 - (0x2)			# LN: 42 | 
1216  	 02CF	 B0540005		xmem[i5] = i0			# LN: 42 | 
1217  	 02D0	 90750003		i0 = i7 - (0x3)			# LN: 42 | 
1218  	 02D1	 B1540000		xmem[i0] = i1			# LN: 42 | 
1219  	 02D2	 90750004		i0 = i7 - (0x4)			# LN: 42 | 
1220  	 02D3	 B8540000		xmem[i0] = i4			# LN: 42 | 
1221  	 02D4				cline_42_0:			/* LN: 43 | CYCLE: 0 | RULES: () */ 
1222  	 02D4	 90750007		i0 = i7 - (0x7)			# LN: 43 | 
1223  	 02D5	 00004DC0		a0 = 0			# LN: 43 | 
1224  	 02D6	 A0540010		xmem[i0] = a0g; i0 += 1			# LN: 43, 43 | 
1225  	 02D7	 98540010		xmem[i0] = a0h; i0 += 1			# LN: 43, 43 | 
1226  	 02D8	 90540000		xmem[i0] = a0l			# LN: 43 | 
1227  	 02D9				cline_43_0:			/* LN: 45 | CYCLE: 0 | RULES: () */ 
1228  	 02D9	 90750002		i0 = i7 - (0x2)			# LN: 45 | 
1229  	 02DA	 B0140000		i0 = xmem[i0]			# LN: 45 | 
1230  	 02DB	 91750001		i1 = i7 - (0x1)			# LN: 45 | 
1231  	 02DC	 80140000		x0 = xmem[i0]			# LN: 45 | 
1232  	 02DD	 81140001		x1 = xmem[i1]			# LN: 45 | 
1233  	 02DE	 90750007		i0 = i7 - (0x7)			# LN: 45 | 
1234  	 02DF	 A0140010		a0g = xmem[i0]; i0 += 1			# LN: 45, 45 | 
1235  	 02E0	 98140010		a0h = xmem[i0]; i0 += 1			# LN: 45, 45 | 
1236  	 02E1	 90140000		a0l = xmem[i0]			# LN: 45 | 
1237  	 02E2	 00002088		a0 += x0 * x1			# LN: 45 | 
1238  	 02E3	 90750007		i0 = i7 - (0x7)			# LN: 45 | 
1239  	 02E4	 A0540010		xmem[i0] = a0g; i0 += 1			# LN: 45, 45 | 
1240  	 02E5	 98540010		xmem[i0] = a0h; i0 += 1			# LN: 45, 45 | 
1241  	 02E6	 90540000		xmem[i0] = a0l			# LN: 45 | 
1242  	 02E7				cline_45_0:			/* LN: 46 | CYCLE: 0 | RULES: () */ 
1243  	 02E7	 90750002		i0 = i7 - (0x2)			# LN: 46 | 
1244  	 02E8	 B0140000		i0 = xmem[i0]			# LN: 46 | 
1245  	 02E9	 91750003		i1 = i7 - (0x3)			# LN: 46 | 
1246  	 02EA	 02087FFF		i0 += 1			# LN: 46 | 
1247  	 02EB	 80140000		x0 = xmem[i0]			# LN: 46 | 
1248  	 02EC	 B0140001		i0 = xmem[i1]			# LN: 46 | 
1249  	 02ED	 884A0002		uhalfword(a0) = (0x2)			# LN: 46 | 
1250  	 02EE	 81140000		x1 = xmem[i0]			# LN: 46 | 
1251  	 02EF	 00002084		b0 = x0 * x1			# LN: 46 | 
1252  	 02F0	 80880000		call (__int_to_laccum)			# LN: 46 | 
1253  	 02F1	 00005C21		a1 =+ b0; b1 =+ a0			# LN: 46, 46 | 
1254  	 02F2	 00004C28		a0 =+ b1			# LN: 46 | 
1255  	 02F3	 80880000		call (__mul_sat_laccum)			# LN: 46 | 
1256  	 02F4	 90750007		i0 = i7 - (0x7)			# LN: 46 | 
1257  	 02F5	 A1140010		a1g = xmem[i0]; i0 += 1			# LN: 46, 46 | 
1258  	 02F6	 99140010		a1h = xmem[i0]; i0 += 1			# LN: 46, 46 | 
1259  	 02F7	 91140000		a1l = xmem[i0]			# LN: 46 | 
1260  	 02F8	 00004480		a0 = a1 + a0			# LN: 46 | 
1261  	 02F9	 90750007		i0 = i7 - (0x7)			# LN: 46 | 
1262  	 02FA	 A0540010		xmem[i0] = a0g; i0 += 1			# LN: 46, 46 | 
1263  	 02FB	 98540010		xmem[i0] = a0h; i0 += 1			# LN: 46, 46 | 
1264  	 02FC	 90540000		xmem[i0] = a0l			# LN: 46 | 
1265  	 02FD				cline_46_0:			/* LN: 47 | CYCLE: 0 | RULES: () */ 
1266  	 02FD	 90750002		i0 = i7 - (0x2)			# LN: 47 | 
1267  	 02FE	 B0140000		i0 = xmem[i0]			# LN: 47 | 
1268  	 02FF	 91750003		i1 = i7 - (0x3)			# LN: 47 | 
1269  	 0300	 02287FFF		i0 += 2			# LN: 47 | 
1270  	 0301	 B1140001		i1 = xmem[i1]			# LN: 47 | 
1271  	 0302	 80140000		x0 = xmem[i0]			# LN: 47 | 
1272  	 0303	 02097FFF		i1 += 1			# LN: 47 | 
1273  	 0304	 81140001		x1 = xmem[i1]			# LN: 47 | 
1274  	 0305	 90750007		i0 = i7 - (0x7)			# LN: 47 | 
1275  	 0306	 A0140010		a0g = xmem[i0]; i0 += 1			# LN: 47, 47 | 
1276  	 0307	 98140010		a0h = xmem[i0]; i0 += 1			# LN: 47, 47 | 
1277  	 0308	 90140000		a0l = xmem[i0]			# LN: 47 | 
1278  	 0309	 00002088		a0 += x0 * x1			# LN: 47 | 
1279  	 030A	 90750007		i0 = i7 - (0x7)			# LN: 47 | 
1280  	 030B	 A0540010		xmem[i0] = a0g; i0 += 1			# LN: 47, 47 | 
1281  	 030C	 98540010		xmem[i0] = a0h; i0 += 1			# LN: 47, 47 | 
1282  	 030D	 90540000		xmem[i0] = a0l			# LN: 47 | 
1283  	 030E				cline_47_0:			/* LN: 48 | CYCLE: 0 | RULES: () */ 
1284  	 030E	 90750002		i0 = i7 - (0x2)			# LN: 48 | 
1285  	 030F	 B0140000		i0 = xmem[i0]			# LN: 48 | 
1286  	 0310	 91750004		i1 = i7 - (0x4)			# LN: 48 | 
1287  	 0311	 80050004		i0 = i0 + (0x4)			# LN: 48 | 
1288  	 0312	 80140000		x0 = xmem[i0]			# LN: 48 | 
1289  	 0313	 B0140001		i0 = xmem[i1]			# LN: 48 | 
1290  	 0314	 884A0002		uhalfword(a0) = (0x2)			# LN: 48 | 
1291  	 0315	 81140000		x1 = xmem[i0]			# LN: 48 | 
1292  	 0316	 00002084		b0 = x0 * x1			# LN: 48 | 
1293  	 0317	 80880000		call (__int_to_laccum)			# LN: 48 | 
1294  	 0318	 00005C21		a1 =+ b0; b1 =+ a0			# LN: 48, 48 | 
1295  	 0319	 00004C28		a0 =+ b1			# LN: 48 | 
1296  	 031A	 80880000		call (__mul_sat_laccum)			# LN: 48 | 
1297  	 031B	 90750007		i0 = i7 - (0x7)			# LN: 48 | 
1298  	 031C	 A1140010		a1g = xmem[i0]; i0 += 1			# LN: 48, 48 | 
1299  	 031D	 99140010		a1h = xmem[i0]; i0 += 1			# LN: 48, 48 | 
1300  	 031E	 91140000		a1l = xmem[i0]			# LN: 48 | 
1301  	 031F	 000044C0		a0 = a1 - a0			# LN: 48 | 
1302  	 0320	 90750007		i0 = i7 - (0x7)			# LN: 48 | 
1303  	 0321	 A0540010		xmem[i0] = a0g; i0 += 1			# LN: 48, 48 | 
1304  	 0322	 98540010		xmem[i0] = a0h; i0 += 1			# LN: 48, 48 | 
1305  	 0323	 90540000		xmem[i0] = a0l			# LN: 48 | 
1306  	 0324				cline_48_0:			/* LN: 49 | CYCLE: 0 | RULES: () */ 
1307  	 0324	 90750002		i0 = i7 - (0x2)			# LN: 49 | 
1308  	 0325	 B0140000		i0 = xmem[i0]			# LN: 49 | 
1309  	 0326	 91750004		i1 = i7 - (0x4)			# LN: 49 | 
1310  	 0327	 80050005		i0 = i0 + (0x5)			# LN: 49 | 
1311  	 0328	 B1140001		i1 = xmem[i1]			# LN: 49 | 
1312  	 0329	 80140000		x0 = xmem[i0]			# LN: 49 | 
1313  	 032A	 02097FFF		i1 += 1			# LN: 49 | 
1314  	 032B	 81140001		x1 = xmem[i1]			# LN: 49 | 
1315  	 032C	 90750007		i0 = i7 - (0x7)			# LN: 49 | 
1316  	 032D	 A0140010		a0g = xmem[i0]; i0 += 1			# LN: 49, 49 | 
1317  	 032E	 98140010		a0h = xmem[i0]; i0 += 1			# LN: 49, 49 | 
1318  	 032F	 90140000		a0l = xmem[i0]			# LN: 49 | 
1319  	 0330	 00002098		a0 -= x0 * x1			# LN: 49 | 
1320  	 0331	 90750007		i0 = i7 - (0x7)			# LN: 49 | 
1321  	 0332	 A0540010		xmem[i0] = a0g; i0 += 1			# LN: 49, 49 | 
1322  	 0333	 98540010		xmem[i0] = a0h; i0 += 1			# LN: 49, 49 | 
1323  	 0334	 90540000		xmem[i0] = a0l			# LN: 49 | 
1324  	 0335				cline_49_0:			/* LN: 51 | CYCLE: 0 | RULES: () */ 
1325  	 0335	 90750004		i0 = i7 - (0x4)			# LN: 51 | 
1326  	 0336	 B0140000		i0 = xmem[i0]			# LN: 51 | 
1327  	 0337	 91750004		i1 = i7 - (0x4)			# LN: 51 | 
1328  	 0338	 B1140001		i1 = xmem[i1]			# LN: 51 | 
1329  	 0339	 02087FFF		i0 += 1			# LN: 51 | 
1330  	 033A	 88140001		a0 = xmem[i1]			# LN: 51 | 
1331  	 033B	 98540000		xmem[i0] = a0h			# LN: 51 | 
1332  	 033C				cline_51_0:			/* LN: 52 | CYCLE: 0 | RULES: () */ 
1333  	 033C	 90750007		i0 = i7 - (0x7)			# LN: 52 | 
1334  	 033D	 A0140010		a0g = xmem[i0]; i0 += 1			# LN: 52, 52 | 
1335  	 033E	 98140010		a0h = xmem[i0]; i0 += 1			# LN: 52, 52 | 
1336  	 033F	 91750004		i1 = i7 - (0x4)			# LN: 52 | 
1337  	 0340	 B1140001		i1 = xmem[i1]			# LN: 52 | 
1338  	 0341	 90140000		a0l = xmem[i0]			# LN: 52 | 
1339  	 0342	 88540001		xmem[i1] = a0			# LN: 52 | 
1340  	 0343				cline_52_0:			/* LN: 53 | CYCLE: 0 | RULES: () */ 
1341  	 0343	 90750003		i0 = i7 - (0x3)			# LN: 53 | 
1342  	 0344	 B0140000		i0 = xmem[i0]			# LN: 53 | 
1343  	 0345	 91750003		i1 = i7 - (0x3)			# LN: 53 | 
1344  	 0346	 B1140001		i1 = xmem[i1]			# LN: 53 | 
1345  	 0347	 02087FFF		i0 += 1			# LN: 53 | 
1346  	 0348	 88140001		a0 = xmem[i1]			# LN: 53 | 
1347  	 0349	 98540000		xmem[i0] = a0h			# LN: 53 | 
1348  	 034A				cline_53_0:			/* LN: 54 | CYCLE: 0 | RULES: () */ 
1349  	 034A	 90750001		i0 = i7 - (0x1)			# LN: 54 | 
1350  	 034B	 91750003		i1 = i7 - (0x3)			# LN: 54 | 
1351  	 034C	 B1140001		i1 = xmem[i1]			# LN: 54 | 
1352  	 034D	 88140000		a0 = xmem[i0]			# LN: 54 | 
1353  	 034E	 98540001		xmem[i1] = a0h			# LN: 54 | 
1354  	 034F				cline_54_0:			/* LN: 56 | CYCLE: 0 | RULES: () */ 
1355  	 034F	 90750007		i0 = i7 - (0x7)			# LN: 56 | 
1356  	 0350	 A0140010		a0g = xmem[i0]; i0 += 1			# LN: 56, 56 | 
1357  	 0351	 98140010		a0h = xmem[i0]; i0 += 1			# LN: 56, 56 | 
1358  	 0352	 90140000		a0l = xmem[i0]			# LN: 56 | 
1359  	 0353	 80080354		jmp (__epilogue_196)			# LN: 56 | 
1360  	 0354				cline_56_0:			/* LN: 57 | CYCLE: 0 | RULES: () */ 
1361  	 0354				__epilogue_196:			/* LN: 57 | CYCLE: 0 | RULES: () */ 
1362  	 0354	 97750007		i7 = i7 - (0x7)			# LN: 57 | 
1363  	 0355	 02177FFF		i7 -= 1			# LN: 57 | 
1364  	 0356	 81880000		ret			# LN: 57 | 
1365  						(null)
				 SYMBOL TABLE 

    Name                                                                                    Type                  Value 

_COMMON_INC_PATH_                                                               					 Define                 "C:/CirrusDSP/crystal32/common/inc/"
_DSP_                                                                           					 Define                 "a"
_INITIAL_GAIN                                                                   			  Public Relocatable       main_GEN_0000:0000H
_LOCAL_INC_PATH_                                                                					 Define                 "inc/"
_LOCAL_SRC_PATH_                                                                					 Define                 "src/"
_MODE                                                                           			  Public Relocatable       main_GEN_0001:0000H
_MUI_VERSION_                                                                   					 Define                 "020000"
_OVLY_                                                                          					 Define                 "standalone"
_OVLY_REVISION_                                                                 					 Define                 "020000"
_ROUTER_INC_PATH_                                                               					 Define                 "rom_inc/"
_SLOT_                                                                          					 Define                 "0"
_TARGET_FAMILY_                                                                 					 Define                 "crystal32"
_TOOLS_VERSION_                                                                 					 Define                 "0x0701"
_VERSION_                                                                       					 Define                 "00"
__CASM_VER__                                                                    			  Unused Variable		        0 (701H)
___TIMER0_COUNT                                                                 					 External   
___TIMER1_COUNT                                                                 					 External   
___TIMER1_ENABLE                                                                					 External   
__div                                                                           					 External   
__epilogue_196                                                                  			         Relocatable         main_GEN_0032:0354H
__epilogue_198                                                                  			         Relocatable         main_GEN_0032:02C5H
__epilogue_200                                                                  			         Relocatable         main_GEN_0032:00C1H
__extractedConst_0_1                                                            			         Relocatable         main_GEN_0002:0000H
__extractedConst_1_1                                                            			         Relocatable         main_GEN_0003:0000H
__extractedConst_2_1                                                            			         Relocatable         main_GEN_0004:0000H
__extractedConst_3_1                                                            			         Relocatable         main_GEN_0005:0000H
__int_to_laccum                                                                 					 External   
__mul_sat_laccum                                                                					 External   
__start                                                                         					 External   
_cl_wavread_bits_per_sample                                                     					 External   
_cl_wavread_close                                                               					 External   
_cl_wavread_frame_rate                                                          					 External   
_cl_wavread_getnchannels                                                        					 External   
_cl_wavread_number_of_frames                                                    					 External   
_cl_wavread_open                                                                					 External   
_cl_wavread_recvsample                                                          					 External   
_cl_wavwrite_close                                                              					 External   
_cl_wavwrite_open                                                               					 External   
_cl_wavwrite_sendsample                                                         					 External   
_coefficients_11k_lpf                                                           			  Public Relocatable       main_GEN_0006:0000H
_coefficients_3k_hpf                                                            			  Public Relocatable       main_GEN_0007:0000H
_coefficients_5k_hpf                                                            			  Public Relocatable       main_GEN_0008:0000H
_main                                                                           			  Public Relocatable       main_GEN_0032:0000H
_memset                                                                         					 External   
_processing                                                                     			  Public Relocatable       main_GEN_0032:00C4H
_sampleBuffer                                                                   			  Public Relocatable       main_GEN_0009:0000H
_second_order_IIR                                                               			  Public Relocatable       main_GEN_0032:02C9H
_strcpy                                                                         					 External   
_string_const_0                                                                 			         Relocatable         main_GEN_0010:0000H
_string_const_1                                                                 			         Relocatable         main_GEN_0011:0000H
_temp_left                                                                      			  Public Relocatable       main_GEN_0012:0000H
_temp_nizL11k                                                                   			  Public Relocatable       main_GEN_0013:0000H
_temp_nizL3k                                                                    			  Public Relocatable       main_GEN_0014:0000H
_temp_nizL5k                                                                    			  Public Relocatable       main_GEN_0015:0000H
_temp_nizR11k                                                                   			  Public Relocatable       main_GEN_0016:0000H
_temp_nizR3k                                                                    			  Public Relocatable       main_GEN_0017:0000H
_temp_nizR5k                                                                    			  Public Relocatable       main_GEN_0018:0000H
_temp_right                                                                     			  Public Relocatable       main_GEN_0019:0000H
_x_history0                                                                     			  Public Relocatable       main_GEN_0020:0000H
_x_history1                                                                     			  Public Relocatable       main_GEN_0021:0000H
_x_history2                                                                     			  Public Relocatable       main_GEN_0022:0000H
_x_history3                                                                     			  Public Relocatable       main_GEN_0023:0000H
_x_history4                                                                     			  Public Relocatable       main_GEN_0024:0000H
_x_history5                                                                     			  Public Relocatable       main_GEN_0025:0000H
_y_history0                                                                     			  Public Relocatable       main_GEN_0026:0000H
_y_history1                                                                     			  Public Relocatable       main_GEN_0027:0000H
_y_history2                                                                     			  Public Relocatable       main_GEN_0028:0000H
_y_history3                                                                     			  Public Relocatable       main_GEN_0029:0000H
_y_history4                                                                     			  Public Relocatable       main_GEN_0030:0000H
_y_history5                                                                     			  Public Relocatable       main_GEN_0031:0000H
cline_100_0                                                                     			  Unused Relocatable        main_GEN_0032:01B0H
cline_101_0                                                                     			  Unused Relocatable        main_GEN_0032:01B5H
cline_102_0                                                                     			  Unused Relocatable        main_GEN_0032:01BAH
cline_103_0                                                                     			  Unused Relocatable        main_GEN_0032:01C4H
cline_104_0                                                                     			  Unused Relocatable        main_GEN_0032:01C9H
cline_105_0                                                                     			  Unused Relocatable        main_GEN_0032:01CEH
cline_108_0                                                                     			  Unused Relocatable        main_GEN_0032:01D7H
cline_109_0                                                                     			  Unused Relocatable        main_GEN_0032:01DAH
cline_110_0                                                                     			  Unused Relocatable        main_GEN_0032:01DDH
cline_111_0                                                                     			  Unused Relocatable        main_GEN_0032:01E0H
cline_112_0                                                                     			  Unused Relocatable        main_GEN_0032:01E3H
cline_113_0                                                                     			  Unused Relocatable        main_GEN_0032:01E6H
cline_114_0                                                                     			  Unused Relocatable        main_GEN_0032:01E9H
cline_115_0                                                                     			  Unused Relocatable        main_GEN_0032:01ECH
cline_118_0                                                                     			  Unused Relocatable        main_GEN_0032:01F0H
cline_121_0                                                                     			  Unused Relocatable        main_GEN_0032:01F4H
cline_121_1                                                                     			  Unused Relocatable        main_GEN_0032:024BH
cline_123_0                                                                     			  Unused Relocatable        main_GEN_0032:01FAH
cline_124_0                                                                     			  Unused Relocatable        main_GEN_0032:0200H
cline_125_0                                                                     			  Unused Relocatable        main_GEN_0032:0206H
cline_126_0                                                                     			  Unused Relocatable        main_GEN_0032:020CH
cline_127_0                                                                     			  Unused Relocatable        main_GEN_0032:0212H
cline_128_0                                                                     			  Unused Relocatable        main_GEN_0032:0217H
cline_129_0                                                                     			  Unused Relocatable        main_GEN_0032:021CH
cline_130_0                                                                     			  Unused Relocatable        main_GEN_0032:0221H
cline_131_0                                                                     			  Unused Relocatable        main_GEN_0032:0226H
cline_132_0                                                                     			  Unused Relocatable        main_GEN_0032:022BH
cline_133_0                                                                     			  Unused Relocatable        main_GEN_0032:0230H
cline_134_0                                                                     			  Unused Relocatable        main_GEN_0032:0235H
cline_135_0                                                                     			  Unused Relocatable        main_GEN_0032:023AH
cline_136_0                                                                     			  Unused Relocatable        main_GEN_0032:023FH
cline_137_0                                                                     			  Unused Relocatable        main_GEN_0032:0244H
cline_139_0                                                                     			  Unused Relocatable        main_GEN_0032:024FH
cline_142_0                                                                     			  Unused Relocatable        main_GEN_0032:0253H
cline_142_1                                                                     			  Unused Relocatable        main_GEN_0032:029AH
cline_144_0                                                                     			  Unused Relocatable        main_GEN_0032:0263H
cline_145_0                                                                     			  Unused Relocatable        main_GEN_0032:0273H
cline_146_0                                                                     			  Unused Relocatable        main_GEN_0032:0283H
cline_147_0                                                                     			  Unused Relocatable        main_GEN_0032:0293H
cline_151_0                                                                     			  Unused Relocatable        main_GEN_0032:029EH
cline_151_1                                                                     			  Unused Relocatable        main_GEN_0032:02C4H
cline_153_0                                                                     			  Unused Relocatable        main_GEN_0032:02AEH
cline_154_0                                                                     			  Unused Relocatable        main_GEN_0032:02BEH
cline_158_0                                                                     			  Unused Relocatable        main_GEN_0032:02C5H
cline_162_0                                                                     			  Unused Relocatable        main_GEN_0032:0007H
cline_177_0                                                                     			  Unused Relocatable        main_GEN_0032:000BH
cline_177_1                                                                     			  Unused Relocatable        main_GEN_0032:0018H
cline_178_0                                                                     			  Unused Relocatable        main_GEN_0032:0012H
cline_182_0                                                                     			  Unused Relocatable        main_GEN_0032:001BH
cline_183_0                                                                     			  Unused Relocatable        main_GEN_0032:0020H
cline_184_0                                                                     			  Unused Relocatable        main_GEN_0032:0024H
cline_187_0                                                                     			  Unused Relocatable        main_GEN_0032:0026H
cline_193_0                                                                     			  Unused Relocatable        main_GEN_0032:002BH
cline_194_0                                                                     			  Unused Relocatable        main_GEN_0032:0030H
cline_195_0                                                                     			  Unused Relocatable        main_GEN_0032:0035H
cline_196_0                                                                     			  Unused Relocatable        main_GEN_0032:003AH
cline_201_0                                                                     			  Unused Relocatable        main_GEN_0032:003DH
cline_202_0                                                                     			  Unused Relocatable        main_GEN_0032:0048H
cline_203_0                                                                     			  Unused Relocatable        main_GEN_0032:004CH
cline_206_0                                                                     			  Unused Relocatable        main_GEN_0032:004EH
cline_219_0                                                                     			  Unused Relocatable        main_GEN_0032:0059H
cline_219_1                                                                     			  Unused Relocatable        main_GEN_0032:00B9H
cline_221_0                                                                     			  Unused Relocatable        main_GEN_0032:005DH
cline_221_1                                                                     			  Unused Relocatable        main_GEN_0032:0085H
cline_223_0                                                                     			  Unused Relocatable        main_GEN_0032:0066H
cline_223_1                                                                     			  Unused Relocatable        main_GEN_0032:007FH
cline_225_0                                                                     			  Unused Relocatable        main_GEN_0032:006BH
cline_226_0                                                                     			  Unused Relocatable        main_GEN_0032:0078H
cline_230_0                                                                     			  Unused Relocatable        main_GEN_0032:0086H
cline_232_0                                                                     			  Unused Relocatable        main_GEN_0032:008AH
cline_232_1                                                                     			  Unused Relocatable        main_GEN_0032:00B2H
cline_234_0                                                                     			  Unused Relocatable        main_GEN_0032:0093H
cline_234_1                                                                     			  Unused Relocatable        main_GEN_0032:00ACH
cline_236_0                                                                     			  Unused Relocatable        main_GEN_0032:00A0H
cline_237_0                                                                     			  Unused Relocatable        main_GEN_0032:00A5H
cline_245_0                                                                     			  Unused Relocatable        main_GEN_0032:00BCH
cline_246_0                                                                     			  Unused Relocatable        main_GEN_0032:00BFH
cline_249_0                                                                     			  Unused Relocatable        main_GEN_0032:00C1H
cline_42_0                                                                      			  Unused Relocatable        main_GEN_0032:02D4H
cline_43_0                                                                      			  Unused Relocatable        main_GEN_0032:02D9H
cline_45_0                                                                      			  Unused Relocatable        main_GEN_0032:02E7H
cline_46_0                                                                      			  Unused Relocatable        main_GEN_0032:02FDH
cline_47_0                                                                      			  Unused Relocatable        main_GEN_0032:030EH
cline_48_0                                                                      			  Unused Relocatable        main_GEN_0032:0324H
cline_49_0                                                                      			  Unused Relocatable        main_GEN_0032:0335H
cline_51_0                                                                      			  Unused Relocatable        main_GEN_0032:033CH
cline_52_0                                                                      			  Unused Relocatable        main_GEN_0032:0343H
cline_53_0                                                                      			  Unused Relocatable        main_GEN_0032:034AH
cline_54_0                                                                      			  Unused Relocatable        main_GEN_0032:034FH
cline_56_0                                                                      			  Unused Relocatable        main_GEN_0032:0354H
cline_59_0                                                                      			  Unused Relocatable        main_GEN_0032:00C8H
cline_61_0                                                                      			  Unused Relocatable        main_GEN_0032:00CBH
cline_62_0                                                                      			  Unused Relocatable        main_GEN_0032:00CEH
cline_63_0                                                                      			  Unused Relocatable        main_GEN_0032:00D1H
cline_64_0                                                                      			  Unused Relocatable        main_GEN_0032:00D4H
cline_65_0                                                                      			  Unused Relocatable        main_GEN_0032:00D7H
cline_68_0                                                                      			  Unused Relocatable        main_GEN_0032:00DAH
cline_69_0                                                                      			  Unused Relocatable        main_GEN_0032:00DDH
cline_70_0                                                                      			  Unused Relocatable        main_GEN_0032:00E0H
cline_71_0                                                                      			  Unused Relocatable        main_GEN_0032:00E3H
cline_72_0                                                                      			  Unused Relocatable        main_GEN_0032:00E6H
cline_73_0                                                                      			  Unused Relocatable        main_GEN_0032:00E9H
cline_74_0                                                                      			  Unused Relocatable        main_GEN_0032:00ECH
cline_75_0                                                                      			  Unused Relocatable        main_GEN_0032:00EFH
cline_80_0                                                                      			  Unused Relocatable        main_GEN_0032:00F3H
cline_80_1                                                                      			  Unused Relocatable        main_GEN_0032:01D4H
cline_82_0                                                                      			  Unused Relocatable        main_GEN_0032:00FEH
cline_83_0                                                                      			  Unused Relocatable        main_GEN_0032:0109H
cline_84_0                                                                      			  Unused Relocatable        main_GEN_0032:0111H
cline_85_0                                                                      			  Unused Relocatable        main_GEN_0032:0119H
cline_86_0                                                                      			  Unused Relocatable        main_GEN_0032:012CH
cline_87_0                                                                      			  Unused Relocatable        main_GEN_0032:013AH
cline_88_0                                                                      			  Unused Relocatable        main_GEN_0032:0148H
cline_89_0                                                                      			  Unused Relocatable        main_GEN_0032:014DH
cline_90_0                                                                      			  Unused Relocatable        main_GEN_0032:0155H
cline_91_0                                                                      			  Unused Relocatable        main_GEN_0032:0163H
cline_92_0                                                                      			  Unused Relocatable        main_GEN_0032:0168H
cline_93_0                                                                      			  Unused Relocatable        main_GEN_0032:0170H
cline_94_0                                                                      			  Unused Relocatable        main_GEN_0032:017EH
cline_95_0                                                                      			  Unused Relocatable        main_GEN_0032:0183H
cline_96_0                                                                      			  Unused Relocatable        main_GEN_0032:018BH
cline_97_0                                                                      			  Unused Relocatable        main_GEN_0032:0199H
cline_98_0                                                                      			  Unused Relocatable        main_GEN_0032:019EH
cline_99_0                                                                      			  Unused Relocatable        main_GEN_0032:01A6H
dummy                                                                           			  Unused Number				     0 (0H)
else_0                                                                          			         Relocatable         main_GEN_0032:024BH
else_1                                                                          			         Relocatable         main_GEN_0032:029AH
else_2                                                                          			         Relocatable         main_GEN_0032:0026H
else_3                                                                          			         Relocatable         main_GEN_0032:004EH
endif_0                                                                         			         Relocatable         main_GEN_0032:02C4H
endif_1                                                                         			         Relocatable         main_GEN_0032:02C4H
endif_2                                                                         			  Unused Relocatable        main_GEN_0032:0026H
endif_3                                                                         			  Unused Relocatable        main_GEN_0032:004EH
for_5                                                                           			         Relocatable         main_GEN_0032:0051H
for_7                                                                           			         Relocatable         main_GEN_0032:0060H
for_9                                                                           			         Relocatable         main_GEN_0032:008DH
for_end_0                                                                       			  Unused Relocatable        main_GEN_0032:01D4H
for_end_1                                                                       			  Unused Relocatable        main_GEN_0032:024AH
for_end_2                                                                       			  Unused Relocatable        main_GEN_0032:0299H
for_end_3                                                                       			  Unused Relocatable        main_GEN_0032:02C4H
for_end_4                                                                       			  Unused Relocatable        main_GEN_0032:0018H
for_end_5                                                                       			         Relocatable         main_GEN_0032:00B9H
for_end_6                                                                       			  Unused Relocatable        main_GEN_0032:0085H
for_end_7                                                                       			         Relocatable         main_GEN_0032:007FH
for_end_8                                                                       			  Unused Relocatable        main_GEN_0032:00B2H
for_end_9                                                                       			         Relocatable         main_GEN_0032:00ACH
init_latch_label_0                                                              			  Unused Relocatable        main_GEN_0032:01CEH
init_latch_label_1                                                              			  Unused Relocatable        main_GEN_0032:0244H
init_latch_label_2                                                              			  Unused Relocatable        main_GEN_0032:0293H
init_latch_label_3                                                              			  Unused Relocatable        main_GEN_0032:02BEH
init_latch_label_4                                                              			  Unused Relocatable        main_GEN_0032:0012H
init_latch_label_5                                                              			  Unused Relocatable        main_GEN_0032:0078H
init_latch_label_6                                                              			  Unused Relocatable        main_GEN_0032:007FH
init_latch_label_7                                                              			  Unused Relocatable        main_GEN_0032:00A5H
init_latch_label_8                                                              			  Unused Relocatable        main_GEN_0032:00ACH
init_latch_label_9                                                              			  Unused Relocatable        main_GEN_0032:00B2H
label_begin_92                                                                  			  Unused Relocatable        main_GEN_0032:00F3H
label_begin_93                                                                  			  Unused Relocatable        main_GEN_0032:01F4H
label_begin_94                                                                  			  Unused Relocatable        main_GEN_0032:0253H
label_begin_95                                                                  			  Unused Relocatable        main_GEN_0032:029EH
label_begin_96                                                                  			  Unused Relocatable        main_GEN_0032:000BH
label_begin_97                                                                  			  Unused Relocatable        main_GEN_0032:005DH
label_begin_98                                                                  			  Unused Relocatable        main_GEN_0032:008AH
label_end_92                                                                    			         Relocatable         main_GEN_0032:01D3H
label_end_93                                                                    			         Relocatable         main_GEN_0032:0249H
label_end_94                                                                    			         Relocatable         main_GEN_0032:0298H
label_end_95                                                                    			         Relocatable         main_GEN_0032:02C3H
label_end_96                                                                    			         Relocatable         main_GEN_0032:0017H
label_end_97                                                                    			         Relocatable         main_GEN_0032:0084H
label_end_98                                                                    			         Relocatable         main_GEN_0032:00B1H

	       SEGMENTS:

Size			  Name										 Class
0000H	 __INIT                                  			 CODE                                    
0001H	 main_GEN_0000                           			 X_OVLY                                  
0001H	 main_GEN_0001                           			 X_OVLY                                  
0001H	 main_GEN_0002                           			 X_OVLY                                  
0001H	 main_GEN_0003                           			 X_OVLY                                  
0001H	 main_GEN_0004                           			 X_OVLY                                  
0001H	 main_GEN_0005                           			 X_OVLY                                  
0006H	 main_GEN_0006                           			 X_OVLY                                  
0006H	 main_GEN_0007                           			 X_OVLY                                  
0006H	 main_GEN_0008                           			 X_OVLY                                  
0050H	 main_GEN_0009                           			 X_OVLY                                  
0070H	 main_GEN_0010                           			 X_OVLY                                  
001FH	 main_GEN_0011                           			 X_OVLY                                  
0010H	 main_GEN_0012                           			 X_OVLY                                  
0010H	 main_GEN_0013                           			 X_OVLY                                  
0010H	 main_GEN_0014                           			 X_OVLY                                  
0010H	 main_GEN_0015                           			 X_OVLY                                  
0010H	 main_GEN_0016                           			 X_OVLY                                  
0010H	 main_GEN_0017                           			 X_OVLY                                  
0010H	 main_GEN_0018                           			 X_OVLY                                  
0010H	 main_GEN_0019                           			 X_OVLY                                  
0002H	 main_GEN_0020                           			 X_OVLY                                  
0002H	 main_GEN_0021                           			 X_OVLY                                  
0002H	 main_GEN_0022                           			 X_OVLY                                  
0002H	 main_GEN_0023                           			 X_OVLY                                  
0002H	 main_GEN_0024                           			 X_OVLY                                  
0002H	 main_GEN_0025                           			 X_OVLY                                  
0002H	 main_GEN_0026                           			 X_OVLY                                  
0002H	 main_GEN_0027                           			 X_OVLY                                  
0002H	 main_GEN_0028                           			 X_OVLY                                  
0002H	 main_GEN_0029                           			 X_OVLY                                  
0002H	 main_GEN_0030                           			 X_OVLY                                  
0002H	 main_GEN_0031                           			 X_OVLY                                  
0357H	 main_GEN_0032                           			 CODE_OVLY                               
