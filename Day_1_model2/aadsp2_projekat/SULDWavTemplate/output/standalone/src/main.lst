1     	 0000					.public _INPUT_GAIN
2     	 0000					.public _MODE
3     	 0000					.extern ___TIMER0_COUNT
4     	 0000					.extern ___TIMER1_COUNT
5     	 0000					.extern ___TIMER1_ENABLE
6     	 0000					.public _coefficients_11k_lpf
7     	 0000					.public _coefficients_3k_hpf
8     	 0000					.public _coefficients_5k_hpf
9     	 0000					.public _sampleBuffer
10    	 0000					.public _temp_left
11    	 0000					.public _temp_nizL11k
12    	 0000					.public _temp_nizL3k
13    	 0000					.public _temp_nizL5k
14    	 0000					.public _temp_nizR11k
15    	 0000					.public _temp_nizR3k
16    	 0000					.public _temp_nizR5k
17    	 0000					.public _temp_right
18    	 0000					.public _x_history0
19    	 0000					.public _x_history1
20    	 0000					.public _x_history2
21    	 0000					.public _x_history3
22    	 0000					.public _x_history4
23    	 0000					.public _x_history5
24    	 0000					.public _y_history0
25    	 0000					.public _y_history1
26    	 0000					.public _y_history2
27    	 0000					.public _y_history3
28    	 0000					.public _y_history4
29    	 0000					.public _y_history5
30    	 0000					.extern _cl_wavread_bits_per_sample
31    	 0000					.extern _cl_wavread_close
32    	 0000					.extern _cl_wavread_frame_rate
33    	 0000					.extern _cl_wavread_number_of_frames
34    	 0000					.extern _cl_wavread_open
35    	 0000					.extern _cl_wavread_recvsample
36    	 0000					.extern _cl_wavwrite_close
37    	 0000					.extern _cl_wavwrite_open
38    	 0000					.extern _cl_wavwrite_sendsample
39    	 0000					.public _main
40    	 0000					.public _processing
41    	 0000					.public _second_order_IIR
42    	 0000					.extern _strcpy
43    	 0000					.extern __div
44    							.xdata_ovly
44     >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
45    	 0000				_INPUT_GAIN
46    	 0000					.dw  (0x721482c0)
	 0000	 721482C0	 
47    							.xdata_ovly
47     >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
48    	 0000				_MODE
49    	 0000					.dw  (0x140)
	 0000	 00000140	 
50    							.xdata_ovly
50     >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
51    	 0000				__extractedConst_0_1
52    	 0000					.dw  (0x287a26c5)
	 0000	 287A26C5	 
53    							.xdata_ovly
53     >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
54    	 0000				__extractedConst_1_1
55    	 0000					.dw  (0x2ae025c3)
	 0000	 2AE025C3	 
56    							.xdata_ovly
56     >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
57    	 0000				__extractedConst_2_1
58    	 0000					.dw  (0x50c335d4)
	 0000	 50C335D4	 
59    							.xdata_ovly
59     >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
60    	 0000				__extractedConst_3_1
61    	 0000					.dw  (0x51b29e30)
	 0000	 51B29E30	 
62    							.xdata_ovly
62     >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
63    	 0000				_coefficients_11k_lpf
64    	 0000					.dw  (0x255b5d64)
	 0000	 255B5D64	 
65    	 0001					.dw  (0x255b5d64)
	 0001	 255B5D64	 
66    	 0002					.dw  (0x255b5d64)
	 0002	 255B5D64	 
67    	 0003					.dw  (0x40000000)
	 0003	 40000000	 
68    	 0004					.dw  (0xffbba112)
	 0004	 FFBBA112	 
69    	 0005					.dw  (0x15f6336b)
	 0005	 15F6336B	 
70    							.xdata_ovly
70     >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
71    	 0000				_coefficients_3k_hpf
72    	 0000					.dw  (0x4ce53a53)
	 0000	 4CE53A53	 
73    	 0001					.dw  (0xb31ac5ad)
	 0001	 B31AC5AD	 
74    	 0002					.dw  (0x4ce53a53)
	 0002	 4CE53A53	 
75    	 0003					.dw  (0x40000000)
	 0003	 40000000	 
76    	 0004					.dw  (0xbdbfc141)
	 0004	 BDBFC141	 
77    	 0005					.dw  (0x2f146bb1)
	 0005	 2F146BB1	 
78    							.xdata_ovly
78     >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
79    	 0000				_coefficients_5k_hpf
80    	 0000					.dw  (0x5e88f2e5)
	 0000	 5E88F2E5	 
81    	 0001					.dw  (0xa1770d1b)
	 0001	 A1770D1B	 
82    	 0002					.dw  (0x5e88f2e5)
	 0002	 5E88F2E5	 
83    	 0003					.dw  (0x40000000)
	 0003	 40000000	 
84    	 0004					.dw  (0xa5eb6eb5)
	 0004	 A5EB6EB5	 
85    	 0005					.dw  (0x45f89c51)
	 0005	 45F89C51	 
86    							.xdata_ovly
86     >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
87    	 0000				_sampleBuffer
88    	 0000					.bss (0x50)
89    							.xdata_ovly
89     >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
90    	 0000				_temp_left
91    	 0000					.bss (0x10)
92    							.xdata_ovly
92     >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
93    	 0000				_temp_nizL11k
94    	 0000					.bss (0x10)
95    							.xdata_ovly
95     >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
96    	 0000				_temp_nizL3k
97    	 0000					.bss (0x10)
98    							.xdata_ovly
98     >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
99    	 0000				_temp_nizL5k
100   	 0000					.bss (0x10)
101   							.xdata_ovly
101    >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
102   	 0000				_temp_nizR11k
103   	 0000					.bss (0x10)
104   							.xdata_ovly
104    >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
105   	 0000				_temp_nizR3k
106   	 0000					.bss (0x10)
107   							.xdata_ovly
107    >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
108   	 0000				_temp_nizR5k
109   	 0000					.bss (0x10)
110   							.xdata_ovly
110    >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
111   	 0000				_temp_right
112   	 0000					.bss (0x10)
113   							.xdata_ovly
113    >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
114   	 0000				_x_history0
115   	 0000					.dw  (0x0)
	 0000	 00000000	 
116   	 0001					.dw  (0x0)
	 0001	 00000000	 
117   							.xdata_ovly
117    >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
118   	 0000				_x_history1
119   	 0000					.dw  (0x0)
	 0000	 00000000	 
120   	 0001					.dw  (0x0)
	 0001	 00000000	 
121   							.xdata_ovly
121    >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
122   	 0000				_x_history2
123   	 0000					.dw  (0x0)
	 0000	 00000000	 
124   	 0001					.dw  (0x0)
	 0001	 00000000	 
125   							.xdata_ovly
125    >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
126   	 0000				_x_history3
127   	 0000					.dw  (0x0)
	 0000	 00000000	 
128   	 0001					.dw  (0x0)
	 0001	 00000000	 
129   							.xdata_ovly
129    >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
130   	 0000				_x_history4
131   	 0000					.dw  (0x0)
	 0000	 00000000	 
132   	 0001					.dw  (0x0)
	 0001	 00000000	 
133   							.xdata_ovly
133    >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
134   	 0000				_x_history5
135   	 0000					.dw  (0x0)
	 0000	 00000000	 
136   	 0001					.dw  (0x0)
	 0001	 00000000	 
137   							.xdata_ovly
137    >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
138   	 0000				_y_history0
139   	 0000					.dw  (0x0)
	 0000	 00000000	 
140   	 0001					.dw  (0x0)
	 0001	 00000000	 
141   							.xdata_ovly
141    >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
142   	 0000				_y_history1
143   	 0000					.dw  (0x0)
	 0000	 00000000	 
144   	 0001					.dw  (0x0)
	 0001	 00000000	 
145   							.xdata_ovly
145    >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
146   	 0000				_y_history2
147   	 0000					.dw  (0x0)
	 0000	 00000000	 
148   	 0001					.dw  (0x0)
	 0001	 00000000	 
149   							.xdata_ovly
149    >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
150   	 0000				_y_history3
151   	 0000					.dw  (0x0)
	 0000	 00000000	 
152   	 0001					.dw  (0x0)
	 0001	 00000000	 
153   							.xdata_ovly
153    >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
154   	 0000				_y_history4
155   	 0000					.dw  (0x0)
	 0000	 00000000	 
156   	 0001					.dw  (0x0)
	 0001	 00000000	 
157   							.xdata_ovly
157    >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
158   	 0000				_y_history5
159   	 0000					.dw  (0x0)
	 0000	 00000000	 
160   	 0001					.dw  (0x0)
	 0001	 00000000	 
161   							.code_ovly
161    >> start of macro: .code_ovly
1+    									seg_single , "CODE_OVLY", CODE
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_CODE_ )
2+    						    segment
3+    						  .else
4+    						    segment "CODE_OVLY"
5+    							.if "" != ""
6+    						___SegStart_CODE_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .code_ovly
162   						
163   						
164   						
165   							# This construction should ensure linking of crt0 in case when target is a standalone program without the OS
166   							.if defined(_OVLY_)
167   								.if .strcmp('standalone',_OVLY_)=0
168   								.if .strcmp('crystal32',_TARGET_FAMILY_)=0
169   	 0000							.extern __start         # dummy use of __start to force linkage of crt0
170   	 0000				dummy		.equ(__start)
171   								.else
172   									.extern __intvec         # dummy use of __intvec to force linkage of intvec
173   						dummy		.equ(__intvec)
174   								.endif
175   								.endif
176   							.endif
177   						
178   	 0000				_main:			/* LN: 175 | CYCLE: 0 | RULES: () */ 
179   	 0000	 BB540007		xmem[i7] = i7			# LN: 175 | 
180   	 0001	 020F7FFF		i7 += 1			# LN: 175 | 
181   	 0002	 8775020E		i7 = i7 + (0x20e)			# LN: 175 | 
182   	 0003	 91750001		i1 = i7 - (0x1)			# LN: 175 | 
183   	 0004	 98540001		xmem[i1] = a0h			# LN: 175 | 
184   	 0005	 91750002		i1 = i7 - (0x2)			# LN: 175 | 
185   	 0006	 B0540001		xmem[i1] = i0			# LN: 175 | 
186   	 0007				cline_175_0:			/* LN: 190 | CYCLE: 0 | RULES: () */ 
187   	 0007	 90750003		i0 = i7 - (0x3)			# LN: 190 | 
188   	 0008	 00004DC0		a0 = 0			# LN: 190 | 
189   	 0009	 98540000		xmem[i0] = a0h			# LN: 190 | 
190   	 000A	 80500026		do (0x5), label_end_97			# LN: 190 | 
191   	 000B				cline_190_0:			/* LN: 193 | CYCLE: 0 | RULES: () */ 
192   	 000B				label_begin_97:			/* LN: 190 | CYCLE: 0 | RULES: () */ 
193   	 000B	 90750004		i0 = i7 - (0x4)			# LN: 193 | 
194   	 000C	 00004DC0		a0 = 0			# LN: 193 | 
195   	 000D	 98540000		xmem[i0] = a0h			# LN: 193 | 
196   	 000E	 81000020		do (0x10), label_end_96			# LN: 193 | 
197   	 000F				cline_193_0:			/* LN: 195 | CYCLE: 0 | RULES: () */ 
198   	 000F				label_begin_96:			/* LN: 193 | CYCLE: 0 | RULES: () */ 
199   	 000F	 90750003		i0 = i7 - (0x3)			# LN: 195 | 
200   	 0010	 18404DC1		a0 = xmem[i0]; a1 = 0			# LN: 195, 195 | 
201   	 0011	 00004EC0		a0 = a0 << 4			# LN: 195 | 
202   	 0012	 48707FFF		i0 = a0			# LN: 195 | 
203   	 0013	 91750004		i1 = i7 - (0x4)			# LN: 195 | 
204   	 0014	 80050000		i0 = i0 + (_sampleBuffer + 0)			# LN: 195 | 
205   	 0015	 88140001		a0 = xmem[i1]			# LN: 195 | 
206   	 0016	 0C707FFF		b0 = i0			# LN: 195 | 
207   	 0017	 00004420		a0 = a0 + b0			# LN: 195 | 
208   	 0018	 98090030		AnyReg(i0, a0h)			# LN: 195 | 
209   	 0019	 00007FFF		nop #empty cycle
210   	 001A	 99540000		xmem[i0] = a1h			# LN: 195 | 
211   	 001B				cline_195_0:			/* LN: 193 | CYCLE: 0 | RULES: () */ 
212   	 001B				init_latch_label_4:			/* LN: 196 | CYCLE: 0 | RULES: () */ 
213   	 001B	 90750004		i0 = i7 - (0x4)			# LN: 193 | 
214   	 001C	 88140000		a0 = xmem[i0]			# LN: 193 | 
215   	 001D	 894A0001		uhalfword(a1) = (0x1)			# LN: 193 | 
216   	 001E	 00004408		a0 = a0 + a1			# LN: 193 | 
217   	 001F	 90750004		i0 = i7 - (0x4)			# LN: 193 | 
218   	 0020				label_end_96:			# LN: 193 | CYCLE: 5 | RULES: ()
219   	 0020	 98540000		xmem[i0] = a0h			# LN: 193 | 
220   	 0021				cline_193_1:			/* LN: 190 | CYCLE: 0 | RULES: () */ 
221   	 0021				init_latch_label_5:			/* LN: 197 | CYCLE: 0 | RULES: () */ 
222   	 0021				for_end_5:			/* LN: 193 | CYCLE: 0 | RULES: () */ 
223   	 0021	 90750003		i0 = i7 - (0x3)			# LN: 190 | 
224   	 0022	 88140000		a0 = xmem[i0]			# LN: 190 | 
225   	 0023	 894A0001		uhalfword(a1) = (0x1)			# LN: 190 | 
226   	 0024	 00004408		a0 = a0 + a1			# LN: 190 | 
227   	 0025	 90750003		i0 = i7 - (0x3)			# LN: 190 | 
228   	 0026				label_end_97:			# LN: 190 | CYCLE: 5 | RULES: ()
229   	 0026	 98540000		xmem[i0] = a0h			# LN: 190 | 
230   	 0027				cline_190_1:			/* LN: 199 | CYCLE: 0 | RULES: () */ 
231   	 0027				for_end_4:			/* LN: 190 | CYCLE: 0 | RULES: () */ 
232   	 0027	 90750003		i0 = i7 - (0x3)			# LN: 199 | 
233   	 0028	 00004DC0		a0 = 0			# LN: 199 | 
234   	 0029	 98540000		xmem[i0] = a0h			# LN: 199 | 
235   	 002A	 A0050000		i0 = (0) + (_temp_nizR3k + 0)			# LN: 199 | 
236   	 002B	 8100005D		do (0x10), label_end_98			# LN: 199 | 
237   	 002C				cline_199_0:			/* LN: 201 | CYCLE: 0 | RULES: () */ 
238   	 002C				label_begin_98:			/* LN: 199 | CYCLE: 0 | RULES: () */ 
239   	 002C	 91750003		i1 = i7 - (0x3)			# LN: 201 | 
240   	 002D	 18414DC1		a0 = xmem[i1]; a1 = 0			# LN: 201, 201 | 
241   	 002E	 48717FFF		i1 = a0			# LN: 201 | 
242   	 002F	 00007FFF		nop #empty cycle
243   	 0030	 81150000		i1 = i1 + (_temp_left + 0)			# LN: 201 | 
244   	 0031	 99540001		xmem[i1] = a1h			# LN: 201 | 
245   	 0032				cline_201_0:			/* LN: 202 | CYCLE: 0 | RULES: () */ 
246   	 0032	 91750003		i1 = i7 - (0x3)			# LN: 202 | 
247   	 0033	 18414DC1		a0 = xmem[i1]; a1 = 0			# LN: 202, 202 | 
248   	 0034	 48717FFF		i1 = a0			# LN: 202 | 
249   	 0035	 00007FFF		nop #empty cycle
250   	 0036	 81150000		i1 = i1 + (_temp_right + 0)			# LN: 202 | 
251   	 0037	 99540001		xmem[i1] = a1h			# LN: 202 | 
252   	 0038				cline_202_0:			/* LN: 203 | CYCLE: 0 | RULES: () */ 
253   	 0038	 91750003		i1 = i7 - (0x3)			# LN: 203 | 
254   	 0039	 18414DC1		a0 = xmem[i1]; a1 = 0			# LN: 203, 203 | 
255   	 003A	 48717FFF		i1 = a0			# LN: 203 | 
256   	 003B	 00007FFF		nop #empty cycle
257   	 003C	 81150000		i1 = i1 + (_temp_nizL11k + 0)			# LN: 203 | 
258   	 003D	 99540001		xmem[i1] = a1h			# LN: 203 | 
259   	 003E				cline_203_0:			/* LN: 204 | CYCLE: 0 | RULES: () */ 
260   	 003E	 91750003		i1 = i7 - (0x3)			# LN: 204 | 
261   	 003F	 18414DC1		a0 = xmem[i1]; a1 = 0			# LN: 204, 204 | 
262   	 0040	 48717FFF		i1 = a0			# LN: 204 | 
263   	 0041	 00007FFF		nop #empty cycle
264   	 0042	 81150000		i1 = i1 + (_temp_nizR11k + 0)			# LN: 204 | 
265   	 0043	 99540001		xmem[i1] = a1h			# LN: 204 | 
266   	 0044				cline_204_0:			/* LN: 205 | CYCLE: 0 | RULES: () */ 
267   	 0044	 91750003		i1 = i7 - (0x3)			# LN: 205 | 
268   	 0045	 18414DC1		a0 = xmem[i1]; a1 = 0			# LN: 205, 205 | 
269   	 0046	 48717FFF		i1 = a0			# LN: 205 | 
270   	 0047	 00007FFF		nop #empty cycle
271   	 0048	 81150000		i1 = i1 + (_temp_nizL5k + 0)			# LN: 205 | 
272   	 0049	 99540001		xmem[i1] = a1h			# LN: 205 | 
273   	 004A				cline_205_0:			/* LN: 206 | CYCLE: 0 | RULES: () */ 
274   	 004A	 91750003		i1 = i7 - (0x3)			# LN: 206 | 
275   	 004B	 18414DC1		a0 = xmem[i1]; a1 = 0			# LN: 206, 206 | 
276   	 004C	 48717FFF		i1 = a0			# LN: 206 | 
277   	 004D	 00007FFF		nop #empty cycle
278   	 004E	 81150000		i1 = i1 + (_temp_nizR5k + 0)			# LN: 206 | 
279   	 004F	 99540001		xmem[i1] = a1h			# LN: 206 | 
280   	 0050				cline_206_0:			/* LN: 207 | CYCLE: 0 | RULES: () */ 
281   	 0050	 91750003		i1 = i7 - (0x3)			# LN: 207 | 
282   	 0051	 18414DC1		a0 = xmem[i1]; a1 = 0			# LN: 207, 207 | 
283   	 0052	 48717FFF		i1 = a0			# LN: 207 | 
284   	 0053	 00007FFF		nop #empty cycle
285   	 0054	 81150000		i1 = i1 + (_temp_nizL3k + 0)			# LN: 207 | 
286   	 0055	 99540001		xmem[i1] = a1h			# LN: 207 | 
287   	 0056				cline_207_0:			/* LN: 208 | CYCLE: 0 | RULES: () */ 
288   	 0056	 00004DC0		a0 = 0			# LN: 208 | 
289   	 0057	 98540000		xmem[i0] = a0h			# LN: 208 | 
290   	 0058				cline_208_0:			/* LN: 199 | CYCLE: 0 | RULES: () */ 
291   	 0058				init_latch_label_6:			/* LN: 209 | CYCLE: 0 | RULES: () */ 
292   	 0058	 91750003		i1 = i7 - (0x3)			# LN: 199 | 
293   	 0059	 88140001		a0 = xmem[i1]			# LN: 199 | 
294   	 005A	 894A0001		uhalfword(a1) = (0x1)			# LN: 199 | 
295   	 005B	 02084408		i0 += 1; a0 = a0 + a1			# LN: 199, 199 | 
296   	 005C	 91750003		i1 = i7 - (0x3)			# LN: 199 | 
297   	 005D				label_end_98:			# LN: 199 | CYCLE: 5 | RULES: ()
298   	 005D	 98540001		xmem[i1] = a0h			# LN: 199 | 
299   	 005E				cline_199_1:			/* LN: 213 | CYCLE: 0 | RULES: () */ 
300   	 005E				for_end_6:			/* LN: 199 | CYCLE: 0 | RULES: () */ 
301   	 005E	 90750002		i0 = i7 - (0x2)			# LN: 213 | 
302   	 005F	 B0140000		i0 = xmem[i0]			# LN: 213 | 
303   	 0060	 91750104		i1 = i7 - (260 - 0)			# LN: 213 | 
304   	 0061	 B8140000		i4 = xmem[i0]			# LN: 213 | 
305   	 0062	 B1090030		i0 = i1			# LN: 213 | 
306   	 0063	 B8090031		i1 = i4			# LN: 213 | 
307   	 0064	 80880000		call (_strcpy)			# LN: 213 | 
308   	 0065				cline_213_0:			/* LN: 214 | CYCLE: 0 | RULES: () */ 
309   	 0065	 90750104		i0 = i7 - (260 - 0)			# LN: 214 | 
310   	 0066	 80880000		call (_cl_wavread_open)			# LN: 214 | 
311   	 0067	 98090030		AnyReg(i0, a0h)			# LN: 214 | 
312   	 0068	 91750105		i1 = i7 - (0x105)			# LN: 214 | 
313   	 0069	 B0540001		xmem[i1] = i0			# LN: 214 | 
314   	 006A				cline_214_0:			/* LN: 215 | CYCLE: 0 | RULES: () */ 
315   	 006A	 90750105		i0 = i7 - (0x105)			# LN: 215 | 
316   	 006B	 88140000		a0 = xmem[i0]			# LN: 215 | 
317   	 006C	 00004E80		a0 & a0			# LN: 215 | 
318   	 006D	 84480070		if (a != 0) jmp (else_2)			# LN: 215 | 
319   	 006E				cline_215_0:			/* LN: 218 | CYCLE: 0 | RULES: () */ 
320   	 006E	 886AFFFF		halfword(a0) = (0xffff)			# LN: 218 | 
321   	 006F	 8008010E		jmp (__epilogue_200)			# LN: 218 | 
322   	 0070				cline_218_0:			/* LN: 224 | CYCLE: 0 | RULES: () */ 
323   	 0070				endif_2:			/* LN: 215 | CYCLE: 0 | RULES: () */ 
324   	 0070				else_2:			/* LN: 215 | CYCLE: 0 | RULES: () */ 
325   	 0070	 90750106		i0 = i7 - (0x106)			# LN: 224 | 
326   	 0071	 884A0005		uhalfword(a0) = (0x5)			# LN: 224 | 
327   	 0072	 98540000		xmem[i0] = a0h			# LN: 224 | 
328   	 0073				cline_224_0:			/* LN: 225 | CYCLE: 0 | RULES: () */ 
329   	 0073	 90750105		i0 = i7 - (0x105)			# LN: 225 | 
330   	 0074	 B0140000		i0 = xmem[i0]			# LN: 225 | 
331   	 0075	 80880000		call (_cl_wavread_bits_per_sample)			# LN: 225 | 
332   	 0076	 90750107		i0 = i7 - (0x107)			# LN: 225 | 
333   	 0077	 98540000		xmem[i0] = a0h			# LN: 225 | 
334   	 0078				cline_225_0:			/* LN: 226 | CYCLE: 0 | RULES: () */ 
335   	 0078	 90750105		i0 = i7 - (0x105)			# LN: 226 | 
336   	 0079	 B0140000		i0 = xmem[i0]			# LN: 226 | 
337   	 007A	 80880000		call (_cl_wavread_frame_rate)			# LN: 226 | 
338   	 007B	 90750108		i0 = i7 - (0x108)			# LN: 226 | 
339   	 007C	 98540000		xmem[i0] = a0h			# LN: 226 | 
340   	 007D				cline_226_0:			/* LN: 227 | CYCLE: 0 | RULES: () */ 
341   	 007D	 90750105		i0 = i7 - (0x105)			# LN: 227 | 
342   	 007E	 B0140000		i0 = xmem[i0]			# LN: 227 | 
343   	 007F	 80880000		call (_cl_wavread_number_of_frames)			# LN: 227 | 
344   	 0080	 90750109		i0 = i7 - (0x109)			# LN: 227 | 
345   	 0081	 98540000		xmem[i0] = a0h			# LN: 227 | 
346   	 0082				cline_227_0:			/* LN: 232 | CYCLE: 0 | RULES: () */ 
347   	 0082	 90750002		i0 = i7 - (0x2)			# LN: 232 | 
348   	 0083	 B0140000		i0 = xmem[i0]			# LN: 232 | 
349   	 0084	 91750209		i1 = i7 - (521 - 0)			# LN: 232 | 
350   	 0085	 02087FFF		i0 += 1			# LN: 232 | 
351   	 0086	 B8140000		i4 = xmem[i0]			# LN: 232 | 
352   	 0087	 B1090030		i0 = i1			# LN: 232 | 
353   	 0088	 B8090031		i1 = i4			# LN: 232 | 
354   	 0089	 80880000		call (_strcpy)			# LN: 232 | 
355   	 008A				cline_232_0:			/* LN: 233 | CYCLE: 0 | RULES: () */ 
356   	 008A	 90750209		i0 = i7 - (521 - 0)			# LN: 233 | 
357   	 008B	 91750107		i1 = i7 - (0x107)			# LN: 233 | 
358   	 008C	 88140001		a0 = xmem[i1]			# LN: 233 | 
359   	 008D	 91750106		i1 = i7 - (0x106)			# LN: 233 | 
360   	 008E	 89140001		a1 = xmem[i1]			# LN: 233 | 
361   	 008F	 91750108		i1 = i7 - (0x108)			# LN: 233 | 
362   	 0090	 8C140001		b0 = xmem[i1]			# LN: 233 | 
363   	 0091	 80880000		call (_cl_wavwrite_open)			# LN: 233 | 
364   	 0092	 98090030		AnyReg(i0, a0h)			# LN: 233 | 
365   	 0093	 9175020A		i1 = i7 - (0x20a)			# LN: 233 | 
366   	 0094	 B0540001		xmem[i1] = i0			# LN: 233 | 
367   	 0095				cline_233_0:			/* LN: 234 | CYCLE: 0 | RULES: () */ 
368   	 0095	 9075020A		i0 = i7 - (0x20a)			# LN: 234 | 
369   	 0096	 88140000		a0 = xmem[i0]			# LN: 234 | 
370   	 0097	 00004E80		a0 & a0			# LN: 234 | 
371   	 0098	 8448009B		if (a != 0) jmp (else_3)			# LN: 234 | 
372   	 0099				cline_234_0:			/* LN: 237 | CYCLE: 0 | RULES: () */ 
373   	 0099	 886AFFFF		halfword(a0) = (0xffff)			# LN: 237 | 
374   	 009A	 8008010E		jmp (__epilogue_200)			# LN: 237 | 
375   	 009B				cline_237_0:			/* LN: 250 | CYCLE: 0 | RULES: () */ 
376   	 009B				endif_3:			/* LN: 234 | CYCLE: 0 | RULES: () */ 
377   	 009B				else_3:			/* LN: 234 | CYCLE: 0 | RULES: () */ 
378   	 009B	 9075020B		i0 = i7 - (0x20b)			# LN: 250 | 
379   	 009C	 00004DC0		a0 = 0			# LN: 250 | 
380   	 009D	 98540000		xmem[i0] = a0h			# LN: 250 | 
381   	 009E				for_7:			/* LN: 250 | CYCLE: 0 | RULES: () */ 
382   	 009E	 90750109		i0 = i7 - (0x109)			# LN: 250 | 
383   	 009F	 88140000		a0 = xmem[i0]			# LN: 250 | 
384   	 00A0	 894A0010		uhalfword(a1) = (0x10)			# LN: 250 | 
385   	 00A1	 80880000		call (__div)			# LN: 250 | 
386   	 00A2	 9075020B		i0 = i7 - (0x20b)			# LN: 250 | 
387   	 00A3	 89140000		a1 = xmem[i0]			# LN: 250 | 
388   	 00A4	 00004F01		a1 - a0			# LN: 250 | 
389   	 00A5	 84C80106		if (a >= 0) jmp (for_end_7)			# LN: 250 | 
390   	 00A6				cline_250_0:			/* LN: 252 | CYCLE: 0 | RULES: () */ 
391   	 00A6	 9075020C		i0 = i7 - (0x20c)			# LN: 252 | 
392   	 00A7	 00004DC0		a0 = 0			# LN: 252 | 
393   	 00A8	 98540000		xmem[i0] = a0h			# LN: 252 | 
394   	 00A9	 810000D1		do (0x10), label_end_99			# LN: 252 | 
395   	 00AA				cline_252_0:			/* LN: 254 | CYCLE: 0 | RULES: () */ 
396   	 00AA				label_begin_99:			/* LN: 252 | CYCLE: 0 | RULES: () */ 
397   	 00AA	 9075020D		i0 = i7 - (0x20d)			# LN: 254 | 
398   	 00AB	 00004DC0		a0 = 0			# LN: 254 | 
399   	 00AC	 98540000		xmem[i0] = a0h			# LN: 254 | 
400   	 00AD				for_9:			/* LN: 254 | CYCLE: 0 | RULES: () */ 
401   	 00AD	 9075020D		i0 = i7 - (0x20d)			# LN: 254 | 
402   	 00AE	 88140000		a0 = xmem[i0]			# LN: 254 | 
403   	 00AF	 90750106		i0 = i7 - (0x106)			# LN: 254 | 
404   	 00B0	 89140000		a1 = xmem[i0]			# LN: 254 | 
405   	 00B1	 00004F08		a0 - a1			# LN: 254 | 
406   	 00B2	 84C800CC		if (a >= 0) jmp (for_end_9)			# LN: 254 | 
407   	 00B3				cline_254_0:			/* LN: 256 | CYCLE: 0 | RULES: () */ 
408   	 00B3	 90750105		i0 = i7 - (0x105)			# LN: 256 | 
409   	 00B4	 B0140000		i0 = xmem[i0]			# LN: 256 | 
410   	 00B5	 80880000		call (_cl_wavread_recvsample)			# LN: 256 | 
411   	 00B6	 9075020E		i0 = i7 - (0x20e)			# LN: 256 | 
412   	 00B7	 98540000		xmem[i0] = a0h			# LN: 256 | 
413   	 00B8				cline_256_0:			/* LN: 257 | CYCLE: 0 | RULES: () */ 
414   	 00B8	 9075020D		i0 = i7 - (0x20d)			# LN: 257 | 
415   	 00B9	 88140000		a0 = xmem[i0]			# LN: 257 | 
416   	 00BA	 00004EC0		a0 = a0 << 4			# LN: 257 | 
417   	 00BB	 48707FFF		i0 = a0			# LN: 257 | 
418   	 00BC	 9175020C		i1 = i7 - (0x20c)			# LN: 257 | 
419   	 00BD	 80050000		i0 = i0 + (_sampleBuffer + 0)			# LN: 257 | 
420   	 00BE	 88140001		a0 = xmem[i1]			# LN: 257 | 
421   	 00BF	 09707FFF		a1 = i0			# LN: 257 | 
422   	 00C0	 00004480		a0 = a1 + a0			# LN: 257 | 
423   	 00C1	 98090030		AnyReg(i0, a0h)			# LN: 257 | 
424   	 00C2	 9175020E		i1 = i7 - (0x20e)			# LN: 257 | 
425   	 00C3	 88140001		a0 = xmem[i1]			# LN: 257 | 
426   	 00C4	 98540000		xmem[i0] = a0h			# LN: 257 | 
427   	 00C5				cline_257_0:			/* LN: 254 | CYCLE: 0 | RULES: () */ 
428   	 00C5				init_latch_label_7:			/* LN: 258 | CYCLE: 0 | RULES: () */ 
429   	 00C5	 9075020D		i0 = i7 - (0x20d)			# LN: 254 | 
430   	 00C6	 88140000		a0 = xmem[i0]			# LN: 254 | 
431   	 00C7	 894A0001		uhalfword(a1) = (0x1)			# LN: 254 | 
432   	 00C8	 00004408		a0 = a0 + a1			# LN: 254 | 
433   	 00C9	 9075020D		i0 = i7 - (0x20d)			# LN: 254 | 
434   	 00CA	 98540000		xmem[i0] = a0h			# LN: 254 | 
435   	 00CB	 800800AD		jmp (for_9)			# LN: 254 | 
436   	 00CC				cline_254_1:			/* LN: 252 | CYCLE: 0 | RULES: () */ 
437   	 00CC				init_latch_label_8:			/* LN: 259 | CYCLE: 0 | RULES: () */ 
438   	 00CC				for_end_9:			/* LN: 254 | CYCLE: 0 | RULES: () */ 
439   	 00CC	 9075020C		i0 = i7 - (0x20c)			# LN: 252 | 
440   	 00CD	 88140000		a0 = xmem[i0]			# LN: 252 | 
441   	 00CE	 894A0001		uhalfword(a1) = (0x1)			# LN: 252 | 
442   	 00CF	 00004408		a0 = a0 + a1			# LN: 252 | 
443   	 00D0	 9075020C		i0 = i7 - (0x20c)			# LN: 252 | 
444   	 00D1				label_end_99:			# LN: 252 | CYCLE: 5 | RULES: ()
445   	 00D1	 98540000		xmem[i0] = a0h			# LN: 252 | 
446   	 00D2				cline_252_1:			/* LN: 261 | CYCLE: 0 | RULES: () */ 
447   	 00D2				for_end_8:			/* LN: 252 | CYCLE: 0 | RULES: () */ 
448   	 00D2	 80880111		call (_processing)			# LN: 261 | 
449   	 00D3				cline_261_0:			/* LN: 263 | CYCLE: 0 | RULES: () */ 
450   	 00D3	 9075020C		i0 = i7 - (0x20c)			# LN: 263 | 
451   	 00D4	 00004DC0		a0 = 0			# LN: 263 | 
452   	 00D5	 98540000		xmem[i0] = a0h			# LN: 263 | 
453   	 00D6	 810000FE		do (0x10), label_end_100			# LN: 263 | 
454   	 00D7				cline_263_0:			/* LN: 265 | CYCLE: 0 | RULES: () */ 
455   	 00D7				label_begin_100:			/* LN: 263 | CYCLE: 0 | RULES: () */ 
456   	 00D7	 9075020D		i0 = i7 - (0x20d)			# LN: 265 | 
457   	 00D8	 00004DC0		a0 = 0			# LN: 265 | 
458   	 00D9	 98540000		xmem[i0] = a0h			# LN: 265 | 
459   	 00DA				for_11:			/* LN: 265 | CYCLE: 0 | RULES: () */ 
460   	 00DA	 9075020D		i0 = i7 - (0x20d)			# LN: 265 | 
461   	 00DB	 88140000		a0 = xmem[i0]			# LN: 265 | 
462   	 00DC	 90750106		i0 = i7 - (0x106)			# LN: 265 | 
463   	 00DD	 89140000		a1 = xmem[i0]			# LN: 265 | 
464   	 00DE	 00004F08		a0 - a1			# LN: 265 | 
465   	 00DF	 84C800F9		if (a >= 0) jmp (for_end_11)			# LN: 265 | 
466   	 00E0				cline_265_0:			/* LN: 267 | CYCLE: 0 | RULES: () */ 
467   	 00E0	 9075020D		i0 = i7 - (0x20d)			# LN: 267 | 
468   	 00E1	 88140000		a0 = xmem[i0]			# LN: 267 | 
469   	 00E2	 00004EC0		a0 = a0 << 4			# LN: 267 | 
470   	 00E3	 48707FFF		i0 = a0			# LN: 267 | 
471   	 00E4	 9175020C		i1 = i7 - (0x20c)			# LN: 267 | 
472   	 00E5	 80050000		i0 = i0 + (_sampleBuffer + 0)			# LN: 267 | 
473   	 00E6	 88140001		a0 = xmem[i1]			# LN: 267 | 
474   	 00E7	 09707FFF		a1 = i0			# LN: 267 | 
475   	 00E8	 00004480		a0 = a1 + a0			# LN: 267 | 
476   	 00E9	 98090030		AnyReg(i0, a0h)			# LN: 267 | 
477   	 00EA	 9175020E		i1 = i7 - (0x20e)			# LN: 267 | 
478   	 00EB	 88140000		a0 = xmem[i0]			# LN: 267 | 
479   	 00EC	 98540001		xmem[i1] = a0h			# LN: 267 | 
480   	 00ED				cline_267_0:			/* LN: 268 | CYCLE: 0 | RULES: () */ 
481   	 00ED	 9075020A		i0 = i7 - (0x20a)			# LN: 268 | 
482   	 00EE	 9175020E		i1 = i7 - (0x20e)			# LN: 268 | 
483   	 00EF	 88140001		a0 = xmem[i1]			# LN: 268 | 
484   	 00F0	 B0140000		i0 = xmem[i0]			# LN: 268 | 
485   	 00F1	 80880000		call (_cl_wavwrite_sendsample)			# LN: 268 | 
486   	 00F2				cline_268_0:			/* LN: 265 | CYCLE: 0 | RULES: () */ 
487   	 00F2				init_latch_label_9:			/* LN: 269 | CYCLE: 0 | RULES: () */ 
488   	 00F2	 9075020D		i0 = i7 - (0x20d)			# LN: 265 | 
489   	 00F3	 88140000		a0 = xmem[i0]			# LN: 265 | 
490   	 00F4	 894A0001		uhalfword(a1) = (0x1)			# LN: 265 | 
491   	 00F5	 00004408		a0 = a0 + a1			# LN: 265 | 
492   	 00F6	 9075020D		i0 = i7 - (0x20d)			# LN: 265 | 
493   	 00F7	 98540000		xmem[i0] = a0h			# LN: 265 | 
494   	 00F8	 800800DA		jmp (for_11)			# LN: 265 | 
495   	 00F9				cline_265_1:			/* LN: 263 | CYCLE: 0 | RULES: () */ 
496   	 00F9				init_latch_label_10:			/* LN: 270 | CYCLE: 0 | RULES: () */ 
497   	 00F9				for_end_11:			/* LN: 265 | CYCLE: 0 | RULES: () */ 
498   	 00F9	 9075020C		i0 = i7 - (0x20c)			# LN: 263 | 
499   	 00FA	 88140000		a0 = xmem[i0]			# LN: 263 | 
500   	 00FB	 894A0001		uhalfword(a1) = (0x1)			# LN: 263 | 
501   	 00FC	 00004408		a0 = a0 + a1			# LN: 263 | 
502   	 00FD	 9075020C		i0 = i7 - (0x20c)			# LN: 263 | 
503   	 00FE				label_end_100:			# LN: 263 | CYCLE: 5 | RULES: ()
504   	 00FE	 98540000		xmem[i0] = a0h			# LN: 263 | 
505   	 00FF				cline_263_1:			/* LN: 250 | CYCLE: 0 | RULES: () */ 
506   	 00FF				init_latch_label_11:			/* LN: 271 | CYCLE: 0 | RULES: () */ 
507   	 00FF				for_end_10:			/* LN: 263 | CYCLE: 0 | RULES: () */ 
508   	 00FF	 9075020B		i0 = i7 - (0x20b)			# LN: 250 | 
509   	 0100	 88140000		a0 = xmem[i0]			# LN: 250 | 
510   	 0101	 894A0001		uhalfword(a1) = (0x1)			# LN: 250 | 
511   	 0102	 00004408		a0 = a0 + a1			# LN: 250 | 
512   	 0103	 9075020B		i0 = i7 - (0x20b)			# LN: 250 | 
513   	 0104	 98540000		xmem[i0] = a0h			# LN: 250 | 
514   	 0105	 8008009E		jmp (for_7)			# LN: 250 | 
515   	 0106				cline_250_1:			/* LN: 276 | CYCLE: 0 | RULES: () */ 
516   	 0106				for_end_7:			/* LN: 250 | CYCLE: 0 | RULES: () */ 
517   	 0106	 90750105		i0 = i7 - (0x105)			# LN: 276 | 
518   	 0107	 B0140000		i0 = xmem[i0]			# LN: 276 | 
519   	 0108	 80880000		call (_cl_wavread_close)			# LN: 276 | 
520   	 0109				cline_276_0:			/* LN: 277 | CYCLE: 0 | RULES: () */ 
521   	 0109	 9075020A		i0 = i7 - (0x20a)			# LN: 277 | 
522   	 010A	 B0140000		i0 = xmem[i0]			# LN: 277 | 
523   	 010B	 80880000		call (_cl_wavwrite_close)			# LN: 277 | 
524   	 010C				cline_277_0:			/* LN: 280 | CYCLE: 0 | RULES: () */ 
525   	 010C	 00004DC0		a0 = 0			# LN: 280 | 
526   	 010D	 8008010E		jmp (__epilogue_200)			# LN: 280 | 
527   	 010E				cline_280_0:			/* LN: 281 | CYCLE: 0 | RULES: () */ 
528   	 010E				__epilogue_200:			/* LN: 281 | CYCLE: 0 | RULES: () */ 
529   	 010E	 9775020E		i7 = i7 - (0x20e)			# LN: 281 | 
530   	 010F	 02177FFF		i7 -= 1			# LN: 281 | 
531   	 0110	 81880000		ret			# LN: 281 | 
532   						
533   						
534   						
535   	 0111				_processing:			/* LN: 61 | CYCLE: 0 | RULES: () */ 
536   	 0111	 BB540007		xmem[i7] = i7			# LN: 61 | 
537   	 0112	 020F7FFF		i7 += 1			# LN: 61 | 
538   	 0113	 87750011		i7 = i7 + (0x11)			# LN: 61 | 
539   	 0114				cline_61_0:			/* LN: 63 | CYCLE: 0 | RULES: () */ 
540   	 0114	 90750001		i0 = i7 - (0x1)			# LN: 63 | 
541   	 0115	 884A0000		uhalfword(a0) = (_sampleBuffer + 0)			# LN: 63 | 
542   	 0116	 88540000		xmem[i0] = a0			# LN: 63 | 
543   	 0117				cline_63_0:			/* LN: 64 | CYCLE: 0 | RULES: () */ 
544   	 0117	 90750002		i0 = i7 - (0x2)			# LN: 64 | 
545   	 0118	 884A0010		uhalfword(a0) = (_sampleBuffer + 16)			# LN: 64 | 
546   	 0119	 88540000		xmem[i0] = a0			# LN: 64 | 
547   	 011A				cline_64_0:			/* LN: 65 | CYCLE: 0 | RULES: () */ 
548   	 011A	 90750003		i0 = i7 - (0x3)			# LN: 65 | 
549   	 011B	 884A0020		uhalfword(a0) = (_sampleBuffer + 32)			# LN: 65 | 
550   	 011C	 88540000		xmem[i0] = a0			# LN: 65 | 
551   	 011D				cline_65_0:			/* LN: 66 | CYCLE: 0 | RULES: () */ 
552   	 011D	 90750004		i0 = i7 - (0x4)			# LN: 66 | 
553   	 011E	 884A0030		uhalfword(a0) = (_sampleBuffer + 48)			# LN: 66 | 
554   	 011F	 88540000		xmem[i0] = a0			# LN: 66 | 
555   	 0120				cline_66_0:			/* LN: 67 | CYCLE: 0 | RULES: () */ 
556   	 0120	 90750005		i0 = i7 - (0x5)			# LN: 67 | 
557   	 0121	 884A0040		uhalfword(a0) = (_sampleBuffer + 64)			# LN: 67 | 
558   	 0122	 88540000		xmem[i0] = a0			# LN: 67 | 
559   	 0123				cline_67_0:			/* LN: 70 | CYCLE: 0 | RULES: () */ 
560   	 0123	 90750006		i0 = i7 - (0x6)			# LN: 70 | 
561   	 0124	 884A0000		uhalfword(a0) = (_temp_left + 0)			# LN: 70 | 
562   	 0125	 88540000		xmem[i0] = a0			# LN: 70 | 
563   	 0126				cline_70_0:			/* LN: 71 | CYCLE: 0 | RULES: () */ 
564   	 0126	 90750007		i0 = i7 - (0x7)			# LN: 71 | 
565   	 0127	 884A0000		uhalfword(a0) = (_temp_right + 0)			# LN: 71 | 
566   	 0128	 88540000		xmem[i0] = a0			# LN: 71 | 
567   	 0129				cline_71_0:			/* LN: 72 | CYCLE: 0 | RULES: () */ 
568   	 0129	 90750008		i0 = i7 - (0x8)			# LN: 72 | 
569   	 012A	 884A0000		uhalfword(a0) = (_temp_nizL11k + 0)			# LN: 72 | 
570   	 012B	 88540000		xmem[i0] = a0			# LN: 72 | 
571   	 012C				cline_72_0:			/* LN: 73 | CYCLE: 0 | RULES: () */ 
572   	 012C	 90750009		i0 = i7 - (0x9)			# LN: 73 | 
573   	 012D	 884A0000		uhalfword(a0) = (_temp_nizR11k + 0)			# LN: 73 | 
574   	 012E	 88540000		xmem[i0] = a0			# LN: 73 | 
575   	 012F				cline_73_0:			/* LN: 74 | CYCLE: 0 | RULES: () */ 
576   	 012F	 9075000A		i0 = i7 - (0xa)			# LN: 74 | 
577   	 0130	 884A0000		uhalfword(a0) = (_temp_nizL5k + 0)			# LN: 74 | 
578   	 0131	 88540000		xmem[i0] = a0			# LN: 74 | 
579   	 0132				cline_74_0:			/* LN: 75 | CYCLE: 0 | RULES: () */ 
580   	 0132	 9075000B		i0 = i7 - (0xb)			# LN: 75 | 
581   	 0133	 884A0000		uhalfword(a0) = (_temp_nizR5k + 0)			# LN: 75 | 
582   	 0134	 88540000		xmem[i0] = a0			# LN: 75 | 
583   	 0135				cline_75_0:			/* LN: 76 | CYCLE: 0 | RULES: () */ 
584   	 0135	 9075000C		i0 = i7 - (0xc)			# LN: 76 | 
585   	 0136	 884A0000		uhalfword(a0) = (_temp_nizL3k + 0)			# LN: 76 | 
586   	 0137	 88540000		xmem[i0] = a0			# LN: 76 | 
587   	 0138				cline_76_0:			/* LN: 77 | CYCLE: 0 | RULES: () */ 
588   	 0138	 9075000D		i0 = i7 - (0xd)			# LN: 77 | 
589   	 0139	 884A0000		uhalfword(a0) = (_temp_nizR3k + 0)			# LN: 77 | 
590   	 013A	 88540000		xmem[i0] = a0			# LN: 77 | 
591   	 013B				cline_77_0:			/* LN: 82 | CYCLE: 0 | RULES: () */ 
592   	 013B	 9075000E		i0 = i7 - (0xe)			# LN: 82 | 
593   	 013C	 00004DC0		a0 = 0			# LN: 82 | 
594   	 013D	 98540000		xmem[i0] = a0h			# LN: 82 | 
595   	 013E	 8100021A		do (0x10), label_end_92			# LN: 82 | 
596   	 013F				cline_82_0:			/* LN: 84 | CYCLE: 0 | RULES: () */ 
597   	 013F				label_begin_92:			/* LN: 82 | CYCLE: 0 | RULES: () */ 
598   	 013F	 90750001		i0 = i7 - (0x1)			# LN: 84 | 
599   	 0140	 B0140000		i0 = xmem[i0]			# LN: 84 | 
600   	 0141	 91750006		i1 = i7 - (0x6)			# LN: 84 | 
601   	 0142	 B1140001		i1 = xmem[i1]			# LN: 84 | 
602   	 0143	 88140000		a0 = xmem[i0]			# LN: 84 | 
603   	 0144	 98540001		xmem[i1] = a0h			# LN: 84 | 
604   	 0145	 90750001		i0 = i7 - (0x1)			# LN: 84 | 
605   	 0146	 B0140000		i0 = xmem[i0]			# LN: 84 | 
606   	 0147	 91750001		i1 = i7 - (0x1)			# LN: 84 | 
607   	 0148	 02087FFF		i0 += 1			# LN: 84 | 
608   	 0149	 B0540001		xmem[i1] = i0			# LN: 84 | 
609   	 014A				cline_84_0:			/* LN: 85 | CYCLE: 0 | RULES: () */ 
610   	 014A	 90750002		i0 = i7 - (0x2)			# LN: 85 | 
611   	 014B	 B0140000		i0 = xmem[i0]			# LN: 85 | 
612   	 014C	 91750007		i1 = i7 - (0x7)			# LN: 85 | 
613   	 014D	 B1140001		i1 = xmem[i1]			# LN: 85 | 
614   	 014E	 88140000		a0 = xmem[i0]			# LN: 85 | 
615   	 014F	 98540001		xmem[i1] = a0h			# LN: 85 | 
616   	 0150	 90750002		i0 = i7 - (0x2)			# LN: 85 | 
617   	 0151	 B0140000		i0 = xmem[i0]			# LN: 85 | 
618   	 0152	 91750002		i1 = i7 - (0x2)			# LN: 85 | 
619   	 0153	 02087FFF		i0 += 1			# LN: 85 | 
620   	 0154	 B0540001		xmem[i1] = i0			# LN: 85 | 
621   	 0155				cline_85_0:			/* LN: 86 | CYCLE: 0 | RULES: () */ 
622   	 0155	 90750006		i0 = i7 - (0x6)			# LN: 86 | 
623   	 0156	 B0140000		i0 = xmem[i0]			# LN: 86 | 
624   	 0157	 80040000		x0 = xmem[_INPUT_GAIN + 0]			# LN: 86 | 
625   	 0158	 81140000		x1 = xmem[i0]			# LN: 86 | 
626   	 0159	 90750006		i0 = i7 - (0x6)			# LN: 86 | 
627   	 015A	 B0140000		i0 = xmem[i0]			# LN: 86 | 
628   	 015B	 00002020		a0 = x1 * x0			# LN: 86 | 
629   	 015C	 88540000		xmem[i0] = a0			# LN: 86 | 
630   	 015D				cline_86_0:			/* LN: 87 | CYCLE: 0 | RULES: () */ 
631   	 015D	 90750007		i0 = i7 - (0x7)			# LN: 87 | 
632   	 015E	 B0140000		i0 = xmem[i0]			# LN: 87 | 
633   	 015F	 80040000		x0 = xmem[_INPUT_GAIN + 0]			# LN: 87 | 
634   	 0160	 81140000		x1 = xmem[i0]			# LN: 87 | 
635   	 0161	 90750007		i0 = i7 - (0x7)			# LN: 87 | 
636   	 0162	 B0140000		i0 = xmem[i0]			# LN: 87 | 
637   	 0163	 00002020		a0 = x1 * x0			# LN: 87 | 
638   	 0164	 88540000		xmem[i0] = a0			# LN: 87 | 
639   	 0165				cline_87_0:			/* LN: 88 | CYCLE: 0 | RULES: () */ 
640   	 0165	 90750006		i0 = i7 - (0x6)			# LN: 88 | 
641   	 0166	 B0140000		i0 = xmem[i0]			# LN: 88 | 
642   	 0167	 A1050000		i1 = (0) + (_coefficients_11k_lpf)			# LN: 88 | 
643   	 0168	 88140000		a0 = xmem[i0]			# LN: 88 | 
644   	 0169	 A4050000		i4 = (0) + (_x_history0)			# LN: 88 | 
645   	 016A	 A5050000		i5 = (0) + (_y_history0)			# LN: 88 | 
646   	 016B	 B1090030		i0 = i1			# LN: 88 | 
647   	 016C	 B8090031		i1 = i4			# LN: 88 | 
648   	 016D	 B9090038		i4 = i5			# LN: 88 | 
649   	 016E	 80880319		call (_second_order_IIR)			# LN: 88 | 
650   	 016F	 90750008		i0 = i7 - (0x8)			# LN: 88 | 
651   	 0170	 B0140000		i0 = xmem[i0]			# LN: 88 | 
652   	 0171	 00007FFF		nop #empty cycle
653   	 0172	 88540000		xmem[i0] = a0			# LN: 88 | 
654   	 0173				cline_88_0:			/* LN: 89 | CYCLE: 0 | RULES: () */ 
655   	 0173	 90750007		i0 = i7 - (0x7)			# LN: 89 | 
656   	 0174	 B0140000		i0 = xmem[i0]			# LN: 89 | 
657   	 0175	 A1050000		i1 = (0) + (_coefficients_11k_lpf)			# LN: 89 | 
658   	 0176	 88140000		a0 = xmem[i0]			# LN: 89 | 
659   	 0177	 A4050000		i4 = (0) + (_x_history1)			# LN: 89 | 
660   	 0178	 A5050000		i5 = (0) + (_y_history1)			# LN: 89 | 
661   	 0179	 B1090030		i0 = i1			# LN: 89 | 
662   	 017A	 B8090031		i1 = i4			# LN: 89 | 
663   	 017B	 B9090038		i4 = i5			# LN: 89 | 
664   	 017C	 80880319		call (_second_order_IIR)			# LN: 89 | 
665   	 017D	 90750009		i0 = i7 - (0x9)			# LN: 89 | 
666   	 017E	 B0140000		i0 = xmem[i0]			# LN: 89 | 
667   	 017F	 00007FFF		nop #empty cycle
668   	 0180	 88540000		xmem[i0] = a0			# LN: 89 | 
669   	 0181				cline_89_0:			/* LN: 90 | CYCLE: 0 | RULES: () */ 
670   	 0181	 90750006		i0 = i7 - (0x6)			# LN: 90 | 
671   	 0182	 B0140000		i0 = xmem[i0]			# LN: 90 | 
672   	 0183	 A1050000		i1 = (0) + (_coefficients_5k_hpf)			# LN: 90 | 
673   	 0184	 88140000		a0 = xmem[i0]			# LN: 90 | 
674   	 0185	 A4050000		i4 = (0) + (_x_history2)			# LN: 90 | 
675   	 0186	 A5050000		i5 = (0) + (_y_history2)			# LN: 90 | 
676   	 0187	 B1090030		i0 = i1			# LN: 90 | 
677   	 0188	 B8090031		i1 = i4			# LN: 90 | 
678   	 0189	 B9090038		i4 = i5			# LN: 90 | 
679   	 018A	 80880319		call (_second_order_IIR)			# LN: 90 | 
680   	 018B	 9075000A		i0 = i7 - (0xa)			# LN: 90 | 
681   	 018C	 B0140000		i0 = xmem[i0]			# LN: 90 | 
682   	 018D	 00007FFF		nop #empty cycle
683   	 018E	 88540000		xmem[i0] = a0			# LN: 90 | 
684   	 018F				cline_90_0:			/* LN: 91 | CYCLE: 0 | RULES: () */ 
685   	 018F	 90750006		i0 = i7 - (0x6)			# LN: 91 | 
686   	 0190	 B0140000		i0 = xmem[i0]			# LN: 91 | 
687   	 0191	 91750006		i1 = i7 - (0x6)			# LN: 91 | 
688   	 0192	 02087FFF		i0 += 1			# LN: 91 | 
689   	 0193	 B0540001		xmem[i1] = i0			# LN: 91 | 
690   	 0194				cline_91_0:			/* LN: 92 | CYCLE: 0 | RULES: () */ 
691   	 0194	 9075000A		i0 = i7 - (0xa)			# LN: 92 | 
692   	 0195	 B0140000		i0 = xmem[i0]			# LN: 92 | 
693   	 0196	 80040000		x0 = xmem[__extractedConst_0_1 + 0]			# LN: 92 | 
694   	 0197	 81140000		x1 = xmem[i0]			# LN: 92 | 
695   	 0198	 9075000A		i0 = i7 - (0xa)			# LN: 92 | 
696   	 0199	 B0140000		i0 = xmem[i0]			# LN: 92 | 
697   	 019A	 00002020		a0 = x1 * x0			# LN: 92 | 
698   	 019B	 88540000		xmem[i0] = a0			# LN: 92 | 
699   	 019C				cline_92_0:			/* LN: 93 | CYCLE: 0 | RULES: () */ 
700   	 019C	 90750007		i0 = i7 - (0x7)			# LN: 93 | 
701   	 019D	 B0140000		i0 = xmem[i0]			# LN: 93 | 
702   	 019E	 A1050000		i1 = (0) + (_coefficients_5k_hpf)			# LN: 93 | 
703   	 019F	 88140000		a0 = xmem[i0]			# LN: 93 | 
704   	 01A0	 A4050000		i4 = (0) + (_x_history3)			# LN: 93 | 
705   	 01A1	 A5050000		i5 = (0) + (_y_history3)			# LN: 93 | 
706   	 01A2	 B1090030		i0 = i1			# LN: 93 | 
707   	 01A3	 B8090031		i1 = i4			# LN: 93 | 
708   	 01A4	 B9090038		i4 = i5			# LN: 93 | 
709   	 01A5	 80880319		call (_second_order_IIR)			# LN: 93 | 
710   	 01A6	 9075000B		i0 = i7 - (0xb)			# LN: 93 | 
711   	 01A7	 B0140000		i0 = xmem[i0]			# LN: 93 | 
712   	 01A8	 00007FFF		nop #empty cycle
713   	 01A9	 88540000		xmem[i0] = a0			# LN: 93 | 
714   	 01AA				cline_93_0:			/* LN: 94 | CYCLE: 0 | RULES: () */ 
715   	 01AA	 90750007		i0 = i7 - (0x7)			# LN: 94 | 
716   	 01AB	 B0140000		i0 = xmem[i0]			# LN: 94 | 
717   	 01AC	 91750007		i1 = i7 - (0x7)			# LN: 94 | 
718   	 01AD	 02087FFF		i0 += 1			# LN: 94 | 
719   	 01AE	 B0540001		xmem[i1] = i0			# LN: 94 | 
720   	 01AF				cline_94_0:			/* LN: 95 | CYCLE: 0 | RULES: () */ 
721   	 01AF	 9075000B		i0 = i7 - (0xb)			# LN: 95 | 
722   	 01B0	 B0140000		i0 = xmem[i0]			# LN: 95 | 
723   	 01B1	 80040000		x0 = xmem[__extractedConst_1_1 + 0]			# LN: 95 | 
724   	 01B2	 81140000		x1 = xmem[i0]			# LN: 95 | 
725   	 01B3	 9075000B		i0 = i7 - (0xb)			# LN: 95 | 
726   	 01B4	 B0140000		i0 = xmem[i0]			# LN: 95 | 
727   	 01B5	 00002020		a0 = x1 * x0			# LN: 95 | 
728   	 01B6	 88540000		xmem[i0] = a0			# LN: 95 | 
729   	 01B7				cline_95_0:			/* LN: 96 | CYCLE: 0 | RULES: () */ 
730   	 01B7	 90750008		i0 = i7 - (0x8)			# LN: 96 | 
731   	 01B8	 B0140000		i0 = xmem[i0]			# LN: 96 | 
732   	 01B9	 A1050000		i1 = (0) + (_coefficients_3k_hpf)			# LN: 96 | 
733   	 01BA	 88140000		a0 = xmem[i0]			# LN: 96 | 
734   	 01BB	 A4050000		i4 = (0) + (_x_history4)			# LN: 96 | 
735   	 01BC	 A5050000		i5 = (0) + (_y_history4)			# LN: 96 | 
736   	 01BD	 B1090030		i0 = i1			# LN: 96 | 
737   	 01BE	 B8090031		i1 = i4			# LN: 96 | 
738   	 01BF	 B9090038		i4 = i5			# LN: 96 | 
739   	 01C0	 80880319		call (_second_order_IIR)			# LN: 96 | 
740   	 01C1	 9075000C		i0 = i7 - (0xc)			# LN: 96 | 
741   	 01C2	 B0140000		i0 = xmem[i0]			# LN: 96 | 
742   	 01C3	 00007FFF		nop #empty cycle
743   	 01C4	 88540000		xmem[i0] = a0			# LN: 96 | 
744   	 01C5				cline_96_0:			/* LN: 97 | CYCLE: 0 | RULES: () */ 
745   	 01C5	 90750008		i0 = i7 - (0x8)			# LN: 97 | 
746   	 01C6	 B0140000		i0 = xmem[i0]			# LN: 97 | 
747   	 01C7	 91750008		i1 = i7 - (0x8)			# LN: 97 | 
748   	 01C8	 02087FFF		i0 += 1			# LN: 97 | 
749   	 01C9	 B0540001		xmem[i1] = i0			# LN: 97 | 
750   	 01CA				cline_97_0:			/* LN: 98 | CYCLE: 0 | RULES: () */ 
751   	 01CA	 9075000C		i0 = i7 - (0xc)			# LN: 98 | 
752   	 01CB	 B0140000		i0 = xmem[i0]			# LN: 98 | 
753   	 01CC	 80040000		x0 = xmem[__extractedConst_2_1 + 0]			# LN: 98 | 
754   	 01CD	 81140000		x1 = xmem[i0]			# LN: 98 | 
755   	 01CE	 9075000C		i0 = i7 - (0xc)			# LN: 98 | 
756   	 01CF	 B0140000		i0 = xmem[i0]			# LN: 98 | 
757   	 01D0	 00002020		a0 = x1 * x0			# LN: 98 | 
758   	 01D1	 88540000		xmem[i0] = a0			# LN: 98 | 
759   	 01D2				cline_98_0:			/* LN: 99 | CYCLE: 0 | RULES: () */ 
760   	 01D2	 90750009		i0 = i7 - (0x9)			# LN: 99 | 
761   	 01D3	 B0140000		i0 = xmem[i0]			# LN: 99 | 
762   	 01D4	 A1050000		i1 = (0) + (_coefficients_3k_hpf)			# LN: 99 | 
763   	 01D5	 88140000		a0 = xmem[i0]			# LN: 99 | 
764   	 01D6	 A4050000		i4 = (0) + (_x_history5)			# LN: 99 | 
765   	 01D7	 A5050000		i5 = (0) + (_y_history5)			# LN: 99 | 
766   	 01D8	 B1090030		i0 = i1			# LN: 99 | 
767   	 01D9	 B8090031		i1 = i4			# LN: 99 | 
768   	 01DA	 B9090038		i4 = i5			# LN: 99 | 
769   	 01DB	 80880319		call (_second_order_IIR)			# LN: 99 | 
770   	 01DC	 9075000D		i0 = i7 - (0xd)			# LN: 99 | 
771   	 01DD	 B0140000		i0 = xmem[i0]			# LN: 99 | 
772   	 01DE	 00007FFF		nop #empty cycle
773   	 01DF	 88540000		xmem[i0] = a0			# LN: 99 | 
774   	 01E0				cline_99_0:			/* LN: 100 | CYCLE: 0 | RULES: () */ 
775   	 01E0	 90750009		i0 = i7 - (0x9)			# LN: 100 | 
776   	 01E1	 B0140000		i0 = xmem[i0]			# LN: 100 | 
777   	 01E2	 91750009		i1 = i7 - (0x9)			# LN: 100 | 
778   	 01E3	 02087FFF		i0 += 1			# LN: 100 | 
779   	 01E4	 B0540001		xmem[i1] = i0			# LN: 100 | 
780   	 01E5				cline_100_0:			/* LN: 101 | CYCLE: 0 | RULES: () */ 
781   	 01E5	 9075000D		i0 = i7 - (0xd)			# LN: 101 | 
782   	 01E6	 B0140000		i0 = xmem[i0]			# LN: 101 | 
783   	 01E7	 80040000		x0 = xmem[__extractedConst_3_1 + 0]			# LN: 101 | 
784   	 01E8	 81140000		x1 = xmem[i0]			# LN: 101 | 
785   	 01E9	 9075000D		i0 = i7 - (0xd)			# LN: 101 | 
786   	 01EA	 B0140000		i0 = xmem[i0]			# LN: 101 | 
787   	 01EB	 00002020		a0 = x1 * x0			# LN: 101 | 
788   	 01EC	 88540000		xmem[i0] = a0			# LN: 101 | 
789   	 01ED				cline_101_0:			/* LN: 102 | CYCLE: 0 | RULES: () */ 
790   	 01ED	 9075000C		i0 = i7 - (0xc)			# LN: 102 | 
791   	 01EE	 B0140000		i0 = xmem[i0]			# LN: 102 | 
792   	 01EF	 9175000A		i1 = i7 - (0xa)			# LN: 102 | 
793   	 01F0	 B1140001		i1 = xmem[i1]			# LN: 102 | 
794   	 01F1	 88140000		a0 = xmem[i0]			# LN: 102 | 
795   	 01F2	 89140001		a1 = xmem[i1]			# LN: 102 | 
796   	 01F3	 9075000C		i0 = i7 - (0xc)			# LN: 102 | 
797   	 01F4	 B0140000		i0 = xmem[i0]			# LN: 102 | 
798   	 01F5	 00004408		a0 = a0 + a1			# LN: 102 | 
799   	 01F6	 98540000		xmem[i0] = a0h			# LN: 102 | 
800   	 01F7				cline_102_0:			/* LN: 103 | CYCLE: 0 | RULES: () */ 
801   	 01F7	 9075000C		i0 = i7 - (0xc)			# LN: 103 | 
802   	 01F8	 B0140000		i0 = xmem[i0]			# LN: 103 | 
803   	 01F9	 9175000C		i1 = i7 - (0xc)			# LN: 103 | 
804   	 01FA	 02087FFF		i0 += 1			# LN: 103 | 
805   	 01FB	 B0540001		xmem[i1] = i0			# LN: 103 | 
806   	 01FC				cline_103_0:			/* LN: 104 | CYCLE: 0 | RULES: () */ 
807   	 01FC	 9075000A		i0 = i7 - (0xa)			# LN: 104 | 
808   	 01FD	 B0140000		i0 = xmem[i0]			# LN: 104 | 
809   	 01FE	 9175000A		i1 = i7 - (0xa)			# LN: 104 | 
810   	 01FF	 02087FFF		i0 += 1			# LN: 104 | 
811   	 0200	 B0540001		xmem[i1] = i0			# LN: 104 | 
812   	 0201				cline_104_0:			/* LN: 105 | CYCLE: 0 | RULES: () */ 
813   	 0201	 9075000D		i0 = i7 - (0xd)			# LN: 105 | 
814   	 0202	 B0140000		i0 = xmem[i0]			# LN: 105 | 
815   	 0203	 9175000B		i1 = i7 - (0xb)			# LN: 105 | 
816   	 0204	 B1140001		i1 = xmem[i1]			# LN: 105 | 
817   	 0205	 88140000		a0 = xmem[i0]			# LN: 105 | 
818   	 0206	 89140001		a1 = xmem[i1]			# LN: 105 | 
819   	 0207	 9075000D		i0 = i7 - (0xd)			# LN: 105 | 
820   	 0208	 B0140000		i0 = xmem[i0]			# LN: 105 | 
821   	 0209	 00004408		a0 = a0 + a1			# LN: 105 | 
822   	 020A	 98540000		xmem[i0] = a0h			# LN: 105 | 
823   	 020B				cline_105_0:			/* LN: 106 | CYCLE: 0 | RULES: () */ 
824   	 020B	 9075000D		i0 = i7 - (0xd)			# LN: 106 | 
825   	 020C	 B0140000		i0 = xmem[i0]			# LN: 106 | 
826   	 020D	 9175000D		i1 = i7 - (0xd)			# LN: 106 | 
827   	 020E	 02087FFF		i0 += 1			# LN: 106 | 
828   	 020F	 B0540001		xmem[i1] = i0			# LN: 106 | 
829   	 0210				cline_106_0:			/* LN: 107 | CYCLE: 0 | RULES: () */ 
830   	 0210	 9075000B		i0 = i7 - (0xb)			# LN: 107 | 
831   	 0211	 B0140000		i0 = xmem[i0]			# LN: 107 | 
832   	 0212	 9175000B		i1 = i7 - (0xb)			# LN: 107 | 
833   	 0213	 02087FFF		i0 += 1			# LN: 107 | 
834   	 0214	 B0540001		xmem[i1] = i0			# LN: 107 | 
835   	 0215				cline_107_0:			/* LN: 82 | CYCLE: 0 | RULES: () */ 
836   	 0215				init_latch_label_0:			/* LN: 108 | CYCLE: 0 | RULES: () */ 
837   	 0215	 9075000E		i0 = i7 - (0xe)			# LN: 82 | 
838   	 0216	 88140000		a0 = xmem[i0]			# LN: 82 | 
839   	 0217	 894A0001		uhalfword(a1) = (0x1)			# LN: 82 | 
840   	 0218	 00004408		a0 = a0 + a1			# LN: 82 | 
841   	 0219	 9075000E		i0 = i7 - (0xe)			# LN: 82 | 
842   	 021A				label_end_92:			# LN: 82 | CYCLE: 5 | RULES: ()
843   	 021A	 98540000		xmem[i0] = a0h			# LN: 82 | 
844   	 021B				cline_82_1:			/* LN: 110 | CYCLE: 0 | RULES: () */ 
845   	 021B				for_end_0:			/* LN: 82 | CYCLE: 0 | RULES: () */ 
846   	 021B	 90750001		i0 = i7 - (0x1)			# LN: 110 | 
847   	 021C	 884A0000		uhalfword(a0) = (_sampleBuffer + 0)			# LN: 110 | 
848   	 021D	 88540000		xmem[i0] = a0			# LN: 110 | 
849   	 021E				cline_110_0:			/* LN: 111 | CYCLE: 0 | RULES: () */ 
850   	 021E	 90750002		i0 = i7 - (0x2)			# LN: 111 | 
851   	 021F	 884A0010		uhalfword(a0) = (_sampleBuffer + 16)			# LN: 111 | 
852   	 0220	 88540000		xmem[i0] = a0			# LN: 111 | 
853   	 0221				cline_111_0:			/* LN: 112 | CYCLE: 0 | RULES: () */ 
854   	 0221	 90750008		i0 = i7 - (0x8)			# LN: 112 | 
855   	 0222	 884A0000		uhalfword(a0) = (_temp_nizL11k + 0)			# LN: 112 | 
856   	 0223	 88540000		xmem[i0] = a0			# LN: 112 | 
857   	 0224				cline_112_0:			/* LN: 113 | CYCLE: 0 | RULES: () */ 
858   	 0224	 90750009		i0 = i7 - (0x9)			# LN: 113 | 
859   	 0225	 884A0000		uhalfword(a0) = (_temp_nizR11k + 0)			# LN: 113 | 
860   	 0226	 88540000		xmem[i0] = a0			# LN: 113 | 
861   	 0227				cline_113_0:			/* LN: 114 | CYCLE: 0 | RULES: () */ 
862   	 0227	 9075000A		i0 = i7 - (0xa)			# LN: 114 | 
863   	 0228	 884A0000		uhalfword(a0) = (_temp_nizL5k + 0)			# LN: 114 | 
864   	 0229	 88540000		xmem[i0] = a0			# LN: 114 | 
865   	 022A				cline_114_0:			/* LN: 115 | CYCLE: 0 | RULES: () */ 
866   	 022A	 9075000B		i0 = i7 - (0xb)			# LN: 115 | 
867   	 022B	 884A0000		uhalfword(a0) = (_temp_nizR5k + 0)			# LN: 115 | 
868   	 022C	 88540000		xmem[i0] = a0			# LN: 115 | 
869   	 022D				cline_115_0:			/* LN: 116 | CYCLE: 0 | RULES: () */ 
870   	 022D	 9075000C		i0 = i7 - (0xc)			# LN: 116 | 
871   	 022E	 884A0000		uhalfword(a0) = (_temp_nizL3k + 0)			# LN: 116 | 
872   	 022F	 88540000		xmem[i0] = a0			# LN: 116 | 
873   	 0230				cline_116_0:			/* LN: 117 | CYCLE: 0 | RULES: () */ 
874   	 0230	 9075000D		i0 = i7 - (0xd)			# LN: 117 | 
875   	 0231	 884A0000		uhalfword(a0) = (_temp_nizR3k + 0)			# LN: 117 | 
876   	 0232	 88540000		xmem[i0] = a0			# LN: 117 | 
877   	 0233				cline_117_0:			/* LN: 120 | CYCLE: 0 | RULES: () */ 
878   	 0233	 88040000		a0 = xmem[_MODE + 0]			# LN: 120 | 
879   	 0234	 894A0140		uhalfword(a1) = (0x140)			# LN: 120 | 
880   	 0235	 00004F08		a0 - a1			# LN: 120 | 
881   	 0236	 84480292		if (a != 0) jmp (else_0)			# LN: 120 | 
882   	 0237				cline_120_0:			/* LN: 123 | CYCLE: 0 | RULES: () */ 
883   	 0237	 9075000F		i0 = i7 - (0xf)			# LN: 123 | 
884   	 0238	 00004DC0		a0 = 0			# LN: 123 | 
885   	 0239	 98540000		xmem[i0] = a0h			# LN: 123 | 
886   	 023A	 81000290		do (0x10), label_end_93			# LN: 123 | 
887   	 023B				cline_123_0:			/* LN: 125 | CYCLE: 0 | RULES: () */ 
888   	 023B				label_begin_93:			/* LN: 123 | CYCLE: 0 | RULES: () */ 
889   	 023B	 9075000C		i0 = i7 - (0xc)			# LN: 125 | 
890   	 023C	 B0140000		i0 = xmem[i0]			# LN: 125 | 
891   	 023D	 91750001		i1 = i7 - (0x1)			# LN: 125 | 
892   	 023E	 B1140001		i1 = xmem[i1]			# LN: 125 | 
893   	 023F	 88140000		a0 = xmem[i0]			# LN: 125 | 
894   	 0240	 98540001		xmem[i1] = a0h			# LN: 125 | 
895   	 0241				cline_125_0:			/* LN: 126 | CYCLE: 0 | RULES: () */ 
896   	 0241	 9075000D		i0 = i7 - (0xd)			# LN: 126 | 
897   	 0242	 B0140000		i0 = xmem[i0]			# LN: 126 | 
898   	 0243	 91750002		i1 = i7 - (0x2)			# LN: 126 | 
899   	 0244	 B1140001		i1 = xmem[i1]			# LN: 126 | 
900   	 0245	 88140000		a0 = xmem[i0]			# LN: 126 | 
901   	 0246	 98540001		xmem[i1] = a0h			# LN: 126 | 
902   	 0247				cline_126_0:			/* LN: 127 | CYCLE: 0 | RULES: () */ 
903   	 0247	 90750008		i0 = i7 - (0x8)			# LN: 127 | 
904   	 0248	 B0140000		i0 = xmem[i0]			# LN: 127 | 
905   	 0249	 91750003		i1 = i7 - (0x3)			# LN: 127 | 
906   	 024A	 B1140001		i1 = xmem[i1]			# LN: 127 | 
907   	 024B	 88140000		a0 = xmem[i0]			# LN: 127 | 
908   	 024C	 98540001		xmem[i1] = a0h			# LN: 127 | 
909   	 024D				cline_127_0:			/* LN: 128 | CYCLE: 0 | RULES: () */ 
910   	 024D	 90750009		i0 = i7 - (0x9)			# LN: 128 | 
911   	 024E	 B0140000		i0 = xmem[i0]			# LN: 128 | 
912   	 024F	 91750004		i1 = i7 - (0x4)			# LN: 128 | 
913   	 0250	 B1140001		i1 = xmem[i1]			# LN: 128 | 
914   	 0251	 88140000		a0 = xmem[i0]			# LN: 128 | 
915   	 0252	 98540001		xmem[i1] = a0h			# LN: 128 | 
916   	 0253				cline_128_0:			/* LN: 129 | CYCLE: 0 | RULES: () */ 
917   	 0253	 9075000A		i0 = i7 - (0xa)			# LN: 129 | 
918   	 0254	 B0140000		i0 = xmem[i0]			# LN: 129 | 
919   	 0255	 91750005		i1 = i7 - (0x5)			# LN: 129 | 
920   	 0256	 B1140001		i1 = xmem[i1]			# LN: 129 | 
921   	 0257	 88140000		a0 = xmem[i0]			# LN: 129 | 
922   	 0258	 98540001		xmem[i1] = a0h			# LN: 129 | 
923   	 0259				cline_129_0:			/* LN: 130 | CYCLE: 0 | RULES: () */ 
924   	 0259	 90750001		i0 = i7 - (0x1)			# LN: 130 | 
925   	 025A	 B0140000		i0 = xmem[i0]			# LN: 130 | 
926   	 025B	 91750001		i1 = i7 - (0x1)			# LN: 130 | 
927   	 025C	 02087FFF		i0 += 1			# LN: 130 | 
928   	 025D	 B0540001		xmem[i1] = i0			# LN: 130 | 
929   	 025E				cline_130_0:			/* LN: 131 | CYCLE: 0 | RULES: () */ 
930   	 025E	 90750002		i0 = i7 - (0x2)			# LN: 131 | 
931   	 025F	 B0140000		i0 = xmem[i0]			# LN: 131 | 
932   	 0260	 91750002		i1 = i7 - (0x2)			# LN: 131 | 
933   	 0261	 02087FFF		i0 += 1			# LN: 131 | 
934   	 0262	 B0540001		xmem[i1] = i0			# LN: 131 | 
935   	 0263				cline_131_0:			/* LN: 132 | CYCLE: 0 | RULES: () */ 
936   	 0263	 90750003		i0 = i7 - (0x3)			# LN: 132 | 
937   	 0264	 B0140000		i0 = xmem[i0]			# LN: 132 | 
938   	 0265	 91750003		i1 = i7 - (0x3)			# LN: 132 | 
939   	 0266	 02087FFF		i0 += 1			# LN: 132 | 
940   	 0267	 B0540001		xmem[i1] = i0			# LN: 132 | 
941   	 0268				cline_132_0:			/* LN: 133 | CYCLE: 0 | RULES: () */ 
942   	 0268	 90750004		i0 = i7 - (0x4)			# LN: 133 | 
943   	 0269	 B0140000		i0 = xmem[i0]			# LN: 133 | 
944   	 026A	 91750004		i1 = i7 - (0x4)			# LN: 133 | 
945   	 026B	 02087FFF		i0 += 1			# LN: 133 | 
946   	 026C	 B0540001		xmem[i1] = i0			# LN: 133 | 
947   	 026D				cline_133_0:			/* LN: 134 | CYCLE: 0 | RULES: () */ 
948   	 026D	 90750005		i0 = i7 - (0x5)			# LN: 134 | 
949   	 026E	 B0140000		i0 = xmem[i0]			# LN: 134 | 
950   	 026F	 91750005		i1 = i7 - (0x5)			# LN: 134 | 
951   	 0270	 02087FFF		i0 += 1			# LN: 134 | 
952   	 0271	 B0540001		xmem[i1] = i0			# LN: 134 | 
953   	 0272				cline_134_0:			/* LN: 135 | CYCLE: 0 | RULES: () */ 
954   	 0272	 9075000C		i0 = i7 - (0xc)			# LN: 135 | 
955   	 0273	 B0140000		i0 = xmem[i0]			# LN: 135 | 
956   	 0274	 9175000C		i1 = i7 - (0xc)			# LN: 135 | 
957   	 0275	 02087FFF		i0 += 1			# LN: 135 | 
958   	 0276	 B0540001		xmem[i1] = i0			# LN: 135 | 
959   	 0277				cline_135_0:			/* LN: 136 | CYCLE: 0 | RULES: () */ 
960   	 0277	 9075000D		i0 = i7 - (0xd)			# LN: 136 | 
961   	 0278	 B0140000		i0 = xmem[i0]			# LN: 136 | 
962   	 0279	 9175000D		i1 = i7 - (0xd)			# LN: 136 | 
963   	 027A	 02087FFF		i0 += 1			# LN: 136 | 
964   	 027B	 B0540001		xmem[i1] = i0			# LN: 136 | 
965   	 027C				cline_136_0:			/* LN: 137 | CYCLE: 0 | RULES: () */ 
966   	 027C	 90750008		i0 = i7 - (0x8)			# LN: 137 | 
967   	 027D	 B0140000		i0 = xmem[i0]			# LN: 137 | 
968   	 027E	 91750008		i1 = i7 - (0x8)			# LN: 137 | 
969   	 027F	 02087FFF		i0 += 1			# LN: 137 | 
970   	 0280	 B0540001		xmem[i1] = i0			# LN: 137 | 
971   	 0281				cline_137_0:			/* LN: 138 | CYCLE: 0 | RULES: () */ 
972   	 0281	 90750009		i0 = i7 - (0x9)			# LN: 138 | 
973   	 0282	 B0140000		i0 = xmem[i0]			# LN: 138 | 
974   	 0283	 91750009		i1 = i7 - (0x9)			# LN: 138 | 
975   	 0284	 02087FFF		i0 += 1			# LN: 138 | 
976   	 0285	 B0540001		xmem[i1] = i0			# LN: 138 | 
977   	 0286				cline_138_0:			/* LN: 139 | CYCLE: 0 | RULES: () */ 
978   	 0286	 9075000A		i0 = i7 - (0xa)			# LN: 139 | 
979   	 0287	 B0140000		i0 = xmem[i0]			# LN: 139 | 
980   	 0288	 9175000A		i1 = i7 - (0xa)			# LN: 139 | 
981   	 0289	 02087FFF		i0 += 1			# LN: 139 | 
982   	 028A	 B0540001		xmem[i1] = i0			# LN: 139 | 
983   	 028B				cline_139_0:			/* LN: 123 | CYCLE: 0 | RULES: () */ 
984   	 028B				init_latch_label_1:			/* LN: 140 | CYCLE: 0 | RULES: () */ 
985   	 028B	 9075000F		i0 = i7 - (0xf)			# LN: 123 | 
986   	 028C	 88140000		a0 = xmem[i0]			# LN: 123 | 
987   	 028D	 894A0001		uhalfword(a1) = (0x1)			# LN: 123 | 
988   	 028E	 00004408		a0 = a0 + a1			# LN: 123 | 
989   	 028F	 9075000F		i0 = i7 - (0xf)			# LN: 123 | 
990   	 0290				label_end_93:			# LN: 123 | CYCLE: 5 | RULES: ()
991   	 0290	 98540000		xmem[i0] = a0h			# LN: 123 | 
992   	 0291				for_end_1:			/* LN: 123 | CYCLE: 0 | RULES: () */ 
993   	 0291	 80080315		jmp (endif_0)			# LN: 123 | 
994   	 0292				cline_123_1:			/* LN: 141 | CYCLE: 0 | RULES: () */ 
995   	 0292				else_0:			/* LN: 120 | CYCLE: 0 | RULES: () */ 
996   	 0292	 88040000		a0 = xmem[_MODE + 0]			# LN: 141 | 
997   	 0293	 894A00DC		uhalfword(a1) = (0xdc)			# LN: 141 | 
998   	 0294	 00004F08		a0 - a1			# LN: 141 | 
999   	 0295	 844802E1		if (a != 0) jmp (else_1)			# LN: 141 | 
1000  	 0296				cline_141_0:			/* LN: 144 | CYCLE: 0 | RULES: () */ 
1001  	 0296	 90750010		i0 = i7 - (0x10)			# LN: 144 | 
1002  	 0297	 00004DC0		a0 = 0			# LN: 144 | 
1003  	 0298	 98540000		xmem[i0] = a0h			# LN: 144 | 
1004  	 0299	 810002DF		do (0x10), label_end_94			# LN: 144 | 
1005  	 029A				cline_144_0:			/* LN: 146 | CYCLE: 0 | RULES: () */ 
1006  	 029A				label_begin_94:			/* LN: 144 | CYCLE: 0 | RULES: () */ 
1007  	 029A	 9075000C		i0 = i7 - (0xc)			# LN: 146 | 
1008  	 029B	 B0140000		i0 = xmem[i0]			# LN: 146 | 
1009  	 029C	 91750001		i1 = i7 - (0x1)			# LN: 146 | 
1010  	 029D	 B1140001		i1 = xmem[i1]			# LN: 146 | 
1011  	 029E	 88140000		a0 = xmem[i0]			# LN: 146 | 
1012  	 029F	 98540001		xmem[i1] = a0h			# LN: 146 | 
1013  	 02A0				cline_146_0:			/* LN: 147 | CYCLE: 0 | RULES: () */ 
1014  	 02A0	 9075000D		i0 = i7 - (0xd)			# LN: 147 | 
1015  	 02A1	 B0140000		i0 = xmem[i0]			# LN: 147 | 
1016  	 02A2	 91750002		i1 = i7 - (0x2)			# LN: 147 | 
1017  	 02A3	 B1140001		i1 = xmem[i1]			# LN: 147 | 
1018  	 02A4	 88140000		a0 = xmem[i0]			# LN: 147 | 
1019  	 02A5	 98540001		xmem[i1] = a0h			# LN: 147 | 
1020  	 02A6				cline_147_0:			/* LN: 148 | CYCLE: 0 | RULES: () */ 
1021  	 02A6	 90750008		i0 = i7 - (0x8)			# LN: 148 | 
1022  	 02A7	 B0140000		i0 = xmem[i0]			# LN: 148 | 
1023  	 02A8	 91750003		i1 = i7 - (0x3)			# LN: 148 | 
1024  	 02A9	 B1140001		i1 = xmem[i1]			# LN: 148 | 
1025  	 02AA	 88140000		a0 = xmem[i0]			# LN: 148 | 
1026  	 02AB	 98540001		xmem[i1] = a0h			# LN: 148 | 
1027  	 02AC				cline_148_0:			/* LN: 149 | CYCLE: 0 | RULES: () */ 
1028  	 02AC	 90750009		i0 = i7 - (0x9)			# LN: 149 | 
1029  	 02AD	 B0140000		i0 = xmem[i0]			# LN: 149 | 
1030  	 02AE	 91750004		i1 = i7 - (0x4)			# LN: 149 | 
1031  	 02AF	 B1140001		i1 = xmem[i1]			# LN: 149 | 
1032  	 02B0	 88140000		a0 = xmem[i0]			# LN: 149 | 
1033  	 02B1	 98540001		xmem[i1] = a0h			# LN: 149 | 
1034  	 02B2				cline_149_0:			/* LN: 150 | CYCLE: 0 | RULES: () */ 
1035  	 02B2	 90750001		i0 = i7 - (0x1)			# LN: 150 | 
1036  	 02B3	 B0140000		i0 = xmem[i0]			# LN: 150 | 
1037  	 02B4	 91750001		i1 = i7 - (0x1)			# LN: 150 | 
1038  	 02B5	 02087FFF		i0 += 1			# LN: 150 | 
1039  	 02B6	 B0540001		xmem[i1] = i0			# LN: 150 | 
1040  	 02B7				cline_150_0:			/* LN: 151 | CYCLE: 0 | RULES: () */ 
1041  	 02B7	 90750002		i0 = i7 - (0x2)			# LN: 151 | 
1042  	 02B8	 B0140000		i0 = xmem[i0]			# LN: 151 | 
1043  	 02B9	 91750002		i1 = i7 - (0x2)			# LN: 151 | 
1044  	 02BA	 02087FFF		i0 += 1			# LN: 151 | 
1045  	 02BB	 B0540001		xmem[i1] = i0			# LN: 151 | 
1046  	 02BC				cline_151_0:			/* LN: 152 | CYCLE: 0 | RULES: () */ 
1047  	 02BC	 90750003		i0 = i7 - (0x3)			# LN: 152 | 
1048  	 02BD	 B0140000		i0 = xmem[i0]			# LN: 152 | 
1049  	 02BE	 91750003		i1 = i7 - (0x3)			# LN: 152 | 
1050  	 02BF	 02087FFF		i0 += 1			# LN: 152 | 
1051  	 02C0	 B0540001		xmem[i1] = i0			# LN: 152 | 
1052  	 02C1				cline_152_0:			/* LN: 153 | CYCLE: 0 | RULES: () */ 
1053  	 02C1	 90750004		i0 = i7 - (0x4)			# LN: 153 | 
1054  	 02C2	 B0140000		i0 = xmem[i0]			# LN: 153 | 
1055  	 02C3	 91750004		i1 = i7 - (0x4)			# LN: 153 | 
1056  	 02C4	 02087FFF		i0 += 1			# LN: 153 | 
1057  	 02C5	 B0540001		xmem[i1] = i0			# LN: 153 | 
1058  	 02C6				cline_153_0:			/* LN: 154 | CYCLE: 0 | RULES: () */ 
1059  	 02C6	 9075000C		i0 = i7 - (0xc)			# LN: 154 | 
1060  	 02C7	 B0140000		i0 = xmem[i0]			# LN: 154 | 
1061  	 02C8	 9175000C		i1 = i7 - (0xc)			# LN: 154 | 
1062  	 02C9	 02087FFF		i0 += 1			# LN: 154 | 
1063  	 02CA	 B0540001		xmem[i1] = i0			# LN: 154 | 
1064  	 02CB				cline_154_0:			/* LN: 155 | CYCLE: 0 | RULES: () */ 
1065  	 02CB	 9075000D		i0 = i7 - (0xd)			# LN: 155 | 
1066  	 02CC	 B0140000		i0 = xmem[i0]			# LN: 155 | 
1067  	 02CD	 9175000D		i1 = i7 - (0xd)			# LN: 155 | 
1068  	 02CE	 02087FFF		i0 += 1			# LN: 155 | 
1069  	 02CF	 B0540001		xmem[i1] = i0			# LN: 155 | 
1070  	 02D0				cline_155_0:			/* LN: 156 | CYCLE: 0 | RULES: () */ 
1071  	 02D0	 90750008		i0 = i7 - (0x8)			# LN: 156 | 
1072  	 02D1	 B0140000		i0 = xmem[i0]			# LN: 156 | 
1073  	 02D2	 91750008		i1 = i7 - (0x8)			# LN: 156 | 
1074  	 02D3	 02087FFF		i0 += 1			# LN: 156 | 
1075  	 02D4	 B0540001		xmem[i1] = i0			# LN: 156 | 
1076  	 02D5				cline_156_0:			/* LN: 157 | CYCLE: 0 | RULES: () */ 
1077  	 02D5	 90750009		i0 = i7 - (0x9)			# LN: 157 | 
1078  	 02D6	 B0140000		i0 = xmem[i0]			# LN: 157 | 
1079  	 02D7	 91750009		i1 = i7 - (0x9)			# LN: 157 | 
1080  	 02D8	 02087FFF		i0 += 1			# LN: 157 | 
1081  	 02D9	 B0540001		xmem[i1] = i0			# LN: 157 | 
1082  	 02DA				cline_157_0:			/* LN: 144 | CYCLE: 0 | RULES: () */ 
1083  	 02DA				init_latch_label_2:			/* LN: 158 | CYCLE: 0 | RULES: () */ 
1084  	 02DA	 90750010		i0 = i7 - (0x10)			# LN: 144 | 
1085  	 02DB	 88140000		a0 = xmem[i0]			# LN: 144 | 
1086  	 02DC	 894A0001		uhalfword(a1) = (0x1)			# LN: 144 | 
1087  	 02DD	 00004408		a0 = a0 + a1			# LN: 144 | 
1088  	 02DE	 90750010		i0 = i7 - (0x10)			# LN: 144 | 
1089  	 02DF				label_end_94:			# LN: 144 | CYCLE: 5 | RULES: ()
1090  	 02DF	 98540000		xmem[i0] = a0h			# LN: 144 | 
1091  	 02E0				for_end_2:			/* LN: 144 | CYCLE: 0 | RULES: () */ 
1092  	 02E0	 80080315		jmp (endif_1)			# LN: 144 | 
1093  	 02E1				cline_144_1:			/* LN: 161 | CYCLE: 0 | RULES: () */ 
1094  	 02E1				else_1:			/* LN: 141 | CYCLE: 0 | RULES: () */ 
1095  	 02E1	 90750011		i0 = i7 - (0x11)			# LN: 161 | 
1096  	 02E2	 00004DC0		a0 = 0			# LN: 161 | 
1097  	 02E3	 98540000		xmem[i0] = a0h			# LN: 161 | 
1098  	 02E4	 81000314		do (0x10), label_end_95			# LN: 161 | 
1099  	 02E5				cline_161_0:			/* LN: 163 | CYCLE: 0 | RULES: () */ 
1100  	 02E5				label_begin_95:			/* LN: 161 | CYCLE: 0 | RULES: () */ 
1101  	 02E5	 90750001		i0 = i7 - (0x1)			# LN: 163 | 
1102  	 02E6	 91750006		i1 = i7 - (0x6)			# LN: 163 | 
1103  	 02E7	 B1140001		i1 = xmem[i1]			# LN: 163 | 
1104  	 02E8	 B0140000		i0 = xmem[i0]			# LN: 163 | 
1105  	 02E9	 88140001		a0 = xmem[i1]			# LN: 163 | 
1106  	 02EA	 98540000		xmem[i0] = a0h			# LN: 163 | 
1107  	 02EB	 90750001		i0 = i7 - (0x1)			# LN: 163 | 
1108  	 02EC	 B0140000		i0 = xmem[i0]			# LN: 163 | 
1109  	 02ED	 91750001		i1 = i7 - (0x1)			# LN: 163 | 
1110  	 02EE	 02087FFF		i0 += 1			# LN: 163 | 
1111  	 02EF	 B0540001		xmem[i1] = i0			# LN: 163 | 
1112  	 02F0				cline_163_0:			/* LN: 164 | CYCLE: 0 | RULES: () */ 
1113  	 02F0	 90750002		i0 = i7 - (0x2)			# LN: 164 | 
1114  	 02F1	 91750007		i1 = i7 - (0x7)			# LN: 164 | 
1115  	 02F2	 B1140001		i1 = xmem[i1]			# LN: 164 | 
1116  	 02F3	 B0140000		i0 = xmem[i0]			# LN: 164 | 
1117  	 02F4	 88140001		a0 = xmem[i1]			# LN: 164 | 
1118  	 02F5	 98540000		xmem[i0] = a0h			# LN: 164 | 
1119  	 02F6	 90750002		i0 = i7 - (0x2)			# LN: 164 | 
1120  	 02F7	 B0140000		i0 = xmem[i0]			# LN: 164 | 
1121  	 02F8	 91750002		i1 = i7 - (0x2)			# LN: 164 | 
1122  	 02F9	 02087FFF		i0 += 1			# LN: 164 | 
1123  	 02FA	 B0540001		xmem[i1] = i0			# LN: 164 | 
1124  	 02FB				cline_164_0:			/* LN: 165 | CYCLE: 0 | RULES: () */ 
1125  	 02FB	 90750001		i0 = i7 - (0x1)			# LN: 165 | 
1126  	 02FC	 B0140000		i0 = xmem[i0]			# LN: 165 | 
1127  	 02FD	 91750001		i1 = i7 - (0x1)			# LN: 165 | 
1128  	 02FE	 02087FFF		i0 += 1			# LN: 165 | 
1129  	 02FF	 B0540001		xmem[i1] = i0			# LN: 165 | 
1130  	 0300				cline_165_0:			/* LN: 166 | CYCLE: 0 | RULES: () */ 
1131  	 0300	 90750002		i0 = i7 - (0x2)			# LN: 166 | 
1132  	 0301	 B0140000		i0 = xmem[i0]			# LN: 166 | 
1133  	 0302	 91750002		i1 = i7 - (0x2)			# LN: 166 | 
1134  	 0303	 02087FFF		i0 += 1			# LN: 166 | 
1135  	 0304	 B0540001		xmem[i1] = i0			# LN: 166 | 
1136  	 0305				cline_166_0:			/* LN: 167 | CYCLE: 0 | RULES: () */ 
1137  	 0305	 90750006		i0 = i7 - (0x6)			# LN: 167 | 
1138  	 0306	 B0140000		i0 = xmem[i0]			# LN: 167 | 
1139  	 0307	 91750006		i1 = i7 - (0x6)			# LN: 167 | 
1140  	 0308	 02087FFF		i0 += 1			# LN: 167 | 
1141  	 0309	 B0540001		xmem[i1] = i0			# LN: 167 | 
1142  	 030A				cline_167_0:			/* LN: 168 | CYCLE: 0 | RULES: () */ 
1143  	 030A	 90750007		i0 = i7 - (0x7)			# LN: 168 | 
1144  	 030B	 B0140000		i0 = xmem[i0]			# LN: 168 | 
1145  	 030C	 91750007		i1 = i7 - (0x7)			# LN: 168 | 
1146  	 030D	 02087FFF		i0 += 1			# LN: 168 | 
1147  	 030E	 B0540001		xmem[i1] = i0			# LN: 168 | 
1148  	 030F				cline_168_0:			/* LN: 161 | CYCLE: 0 | RULES: () */ 
1149  	 030F				init_latch_label_3:			/* LN: 169 | CYCLE: 0 | RULES: () */ 
1150  	 030F	 90750011		i0 = i7 - (0x11)			# LN: 161 | 
1151  	 0310	 88140000		a0 = xmem[i0]			# LN: 161 | 
1152  	 0311	 894A0001		uhalfword(a1) = (0x1)			# LN: 161 | 
1153  	 0312	 00004408		a0 = a0 + a1			# LN: 161 | 
1154  	 0313	 90750011		i0 = i7 - (0x11)			# LN: 161 | 
1155  	 0314				label_end_95:			# LN: 161 | CYCLE: 5 | RULES: ()
1156  	 0314	 98540000		xmem[i0] = a0h			# LN: 161 | 
1157  	 0315				cline_161_1:			/* LN: 172 | CYCLE: 0 | RULES: () */ 
1158  	 0315				endif_0:			/* LN: 120 | CYCLE: 0 | RULES: () */ 
1159  	 0315				endif_1:			/* LN: 141 | CYCLE: 0 | RULES: () */ 
1160  	 0315				for_end_3:			/* LN: 161 | CYCLE: 0 | RULES: () */ 
1161  	 0315	 80080316		jmp (__epilogue_198)			# LN: 172 | 
1162  	 0316				cline_172_0:			/* LN: 173 | CYCLE: 0 | RULES: () */ 
1163  	 0316				__epilogue_198:			/* LN: 173 | CYCLE: 0 | RULES: () */ 
1164  	 0316	 97750011		i7 = i7 - (0x11)			# LN: 173 | 
1165  	 0317	 02177FFF		i7 -= 1			# LN: 173 | 
1166  	 0318	 81880000		ret			# LN: 173 | 
1167  						
1168  						
1169  						
1170  	 0319				_second_order_IIR:			/* LN: 44 | CYCLE: 0 | RULES: () */ 
1171  	 0319	 BB540007		xmem[i7] = i7			# LN: 44 | 
1172  	 031A	 020F7FFF		i7 += 1			# LN: 44 | 
1173  	 031B	 87750007		i7 = i7 + (0x7)			# LN: 44 | 
1174  	 031C	 95750001		i5 = i7 - (0x1)			# LN: 44 | 
1175  	 031D	 98540005		xmem[i5] = a0h			# LN: 44 | 
1176  	 031E	 95750002		i5 = i7 - (0x2)			# LN: 44 | 
1177  	 031F	 B0540005		xmem[i5] = i0			# LN: 44 | 
1178  	 0320	 90750003		i0 = i7 - (0x3)			# LN: 44 | 
1179  	 0321	 B1540000		xmem[i0] = i1			# LN: 44 | 
1180  	 0322	 90750004		i0 = i7 - (0x4)			# LN: 44 | 
1181  	 0323	 B8540000		xmem[i0] = i4			# LN: 44 | 
1182  	 0324				cline_44_0:			/* LN: 45 | CYCLE: 0 | RULES: () */ 
1183  	 0324	 90750007		i0 = i7 - (0x7)			# LN: 45 | 
1184  	 0325	 00004DC0		a0 = 0			# LN: 45 | 
1185  	 0326	 A0540010		xmem[i0] = a0g; i0 += 1			# LN: 45, 45 | 
1186  	 0327	 98540010		xmem[i0] = a0h; i0 += 1			# LN: 45, 45 | 
1187  	 0328	 90540000		xmem[i0] = a0l			# LN: 45 | 
1188  	 0329				cline_45_0:			/* LN: 47 | CYCLE: 0 | RULES: () */ 
1189  	 0329	 90750002		i0 = i7 - (0x2)			# LN: 47 | 
1190  	 032A	 B0140000		i0 = xmem[i0]			# LN: 47 | 
1191  	 032B	 91750001		i1 = i7 - (0x1)			# LN: 47 | 
1192  	 032C	 80140000		x0 = xmem[i0]			# LN: 47 | 
1193  	 032D	 81140001		x1 = xmem[i1]			# LN: 47 | 
1194  	 032E	 90750007		i0 = i7 - (0x7)			# LN: 47 | 
1195  	 032F	 A0140010		a0g = xmem[i0]; i0 += 1			# LN: 47, 47 | 
1196  	 0330	 98140010		a0h = xmem[i0]; i0 += 1			# LN: 47, 47 | 
1197  	 0331	 90140000		a0l = xmem[i0]			# LN: 47 | 
1198  	 0332	 00002088		a0 += x0 * x1			# LN: 47 | 
1199  	 0333	 90750007		i0 = i7 - (0x7)			# LN: 47 | 
1200  	 0334	 A0540010		xmem[i0] = a0g; i0 += 1			# LN: 47, 47 | 
1201  	 0335	 98540010		xmem[i0] = a0h; i0 += 1			# LN: 47, 47 | 
1202  	 0336	 90540000		xmem[i0] = a0l			# LN: 47 | 
1203  	 0337				cline_47_0:			/* LN: 48 | CYCLE: 0 | RULES: () */ 
1204  	 0337	 90750002		i0 = i7 - (0x2)			# LN: 48 | 
1205  	 0338	 B0140000		i0 = xmem[i0]			# LN: 48 | 
1206  	 0339	 91750003		i1 = i7 - (0x3)			# LN: 48 | 
1207  	 033A	 02087FFF		i0 += 1			# LN: 48 | 
1208  	 033B	 B1140001		i1 = xmem[i1]			# LN: 48 | 
1209  	 033C	 80140000		x0 = xmem[i0]			# LN: 48 | 
1210  	 033D	 81140001		x1 = xmem[i1]			# LN: 48 | 
1211  	 033E	 90750007		i0 = i7 - (0x7)			# LN: 48 | 
1212  	 033F	 A0140010		a0g = xmem[i0]; i0 += 1			# LN: 48, 48 | 
1213  	 0340	 00002081		a1 = x0 * x1			# LN: 48 | 
1214  	 0341	 98140010		a0h = xmem[i0]; i0 += 1			# LN: 48, 48 | 
1215  	 0342	 00004E01		a1 = a1 << 1			# LN: 48 | 
1216  	 0343	 90140000		a0l = xmem[i0]			# LN: 48 | 
1217  	 0344	 00004408		a0 = a0 + a1			# LN: 48 | 
1218  	 0345	 90750007		i0 = i7 - (0x7)			# LN: 48 | 
1219  	 0346	 A0540010		xmem[i0] = a0g; i0 += 1			# LN: 48, 48 | 
1220  	 0347	 98540010		xmem[i0] = a0h; i0 += 1			# LN: 48, 48 | 
1221  	 0348	 90540000		xmem[i0] = a0l			# LN: 48 | 
1222  	 0349				cline_48_0:			/* LN: 49 | CYCLE: 0 | RULES: () */ 
1223  	 0349	 90750002		i0 = i7 - (0x2)			# LN: 49 | 
1224  	 034A	 B0140000		i0 = xmem[i0]			# LN: 49 | 
1225  	 034B	 91750003		i1 = i7 - (0x3)			# LN: 49 | 
1226  	 034C	 02287FFF		i0 += 2			# LN: 49 | 
1227  	 034D	 B1140001		i1 = xmem[i1]			# LN: 49 | 
1228  	 034E	 80140000		x0 = xmem[i0]			# LN: 49 | 
1229  	 034F	 02097FFF		i1 += 1			# LN: 49 | 
1230  	 0350	 81140001		x1 = xmem[i1]			# LN: 49 | 
1231  	 0351	 90750007		i0 = i7 - (0x7)			# LN: 49 | 
1232  	 0352	 A0140010		a0g = xmem[i0]; i0 += 1			# LN: 49, 49 | 
1233  	 0353	 98140010		a0h = xmem[i0]; i0 += 1			# LN: 49, 49 | 
1234  	 0354	 90140000		a0l = xmem[i0]			# LN: 49 | 
1235  	 0355	 00002088		a0 += x0 * x1			# LN: 49 | 
1236  	 0356	 90750007		i0 = i7 - (0x7)			# LN: 49 | 
1237  	 0357	 A0540010		xmem[i0] = a0g; i0 += 1			# LN: 49, 49 | 
1238  	 0358	 98540010		xmem[i0] = a0h; i0 += 1			# LN: 49, 49 | 
1239  	 0359	 90540000		xmem[i0] = a0l			# LN: 49 | 
1240  	 035A				cline_49_0:			/* LN: 50 | CYCLE: 0 | RULES: () */ 
1241  	 035A	 90750002		i0 = i7 - (0x2)			# LN: 50 | 
1242  	 035B	 B0140000		i0 = xmem[i0]			# LN: 50 | 
1243  	 035C	 91750004		i1 = i7 - (0x4)			# LN: 50 | 
1244  	 035D	 80050004		i0 = i0 + (0x4)			# LN: 50 | 
1245  	 035E	 B1140001		i1 = xmem[i1]			# LN: 50 | 
1246  	 035F	 80140000		x0 = xmem[i0]			# LN: 50 | 
1247  	 0360	 81140001		x1 = xmem[i1]			# LN: 50 | 
1248  	 0361	 90750007		i0 = i7 - (0x7)			# LN: 50 | 
1249  	 0362	 A0140010		a0g = xmem[i0]; i0 += 1			# LN: 50, 50 | 
1250  	 0363	 00002081		a1 = x0 * x1			# LN: 50 | 
1251  	 0364	 98140010		a0h = xmem[i0]; i0 += 1			# LN: 50, 50 | 
1252  	 0365	 00004E01		a1 = a1 << 1			# LN: 50 | 
1253  	 0366	 90140000		a0l = xmem[i0]			# LN: 50 | 
1254  	 0367	 00004448		a0 = a0 - a1			# LN: 50 | 
1255  	 0368	 90750007		i0 = i7 - (0x7)			# LN: 50 | 
1256  	 0369	 A0540010		xmem[i0] = a0g; i0 += 1			# LN: 50, 50 | 
1257  	 036A	 98540010		xmem[i0] = a0h; i0 += 1			# LN: 50, 50 | 
1258  	 036B	 90540000		xmem[i0] = a0l			# LN: 50 | 
1259  	 036C				cline_50_0:			/* LN: 51 | CYCLE: 0 | RULES: () */ 
1260  	 036C	 90750002		i0 = i7 - (0x2)			# LN: 51 | 
1261  	 036D	 B0140000		i0 = xmem[i0]			# LN: 51 | 
1262  	 036E	 91750004		i1 = i7 - (0x4)			# LN: 51 | 
1263  	 036F	 80050005		i0 = i0 + (0x5)			# LN: 51 | 
1264  	 0370	 B1140001		i1 = xmem[i1]			# LN: 51 | 
1265  	 0371	 80140000		x0 = xmem[i0]			# LN: 51 | 
1266  	 0372	 02097FFF		i1 += 1			# LN: 51 | 
1267  	 0373	 81140001		x1 = xmem[i1]			# LN: 51 | 
1268  	 0374	 90750007		i0 = i7 - (0x7)			# LN: 51 | 
1269  	 0375	 A0140010		a0g = xmem[i0]; i0 += 1			# LN: 51, 51 | 
1270  	 0376	 98140010		a0h = xmem[i0]; i0 += 1			# LN: 51, 51 | 
1271  	 0377	 90140000		a0l = xmem[i0]			# LN: 51 | 
1272  	 0378	 00002098		a0 -= x0 * x1			# LN: 51 | 
1273  	 0379	 90750007		i0 = i7 - (0x7)			# LN: 51 | 
1274  	 037A	 A0540010		xmem[i0] = a0g; i0 += 1			# LN: 51, 51 | 
1275  	 037B	 98540010		xmem[i0] = a0h; i0 += 1			# LN: 51, 51 | 
1276  	 037C	 90540000		xmem[i0] = a0l			# LN: 51 | 
1277  	 037D				cline_51_0:			/* LN: 53 | CYCLE: 0 | RULES: () */ 
1278  	 037D	 90750004		i0 = i7 - (0x4)			# LN: 53 | 
1279  	 037E	 B0140000		i0 = xmem[i0]			# LN: 53 | 
1280  	 037F	 91750004		i1 = i7 - (0x4)			# LN: 53 | 
1281  	 0380	 B1140001		i1 = xmem[i1]			# LN: 53 | 
1282  	 0381	 02087FFF		i0 += 1			# LN: 53 | 
1283  	 0382	 88140001		a0 = xmem[i1]			# LN: 53 | 
1284  	 0383	 98540000		xmem[i0] = a0h			# LN: 53 | 
1285  	 0384				cline_53_0:			/* LN: 54 | CYCLE: 0 | RULES: () */ 
1286  	 0384	 90750007		i0 = i7 - (0x7)			# LN: 54 | 
1287  	 0385	 A0140010		a0g = xmem[i0]; i0 += 1			# LN: 54, 54 | 
1288  	 0386	 98140010		a0h = xmem[i0]; i0 += 1			# LN: 54, 54 | 
1289  	 0387	 91750004		i1 = i7 - (0x4)			# LN: 54 | 
1290  	 0388	 B1140001		i1 = xmem[i1]			# LN: 54 | 
1291  	 0389	 90140000		a0l = xmem[i0]			# LN: 54 | 
1292  	 038A	 88540001		xmem[i1] = a0			# LN: 54 | 
1293  	 038B				cline_54_0:			/* LN: 55 | CYCLE: 0 | RULES: () */ 
1294  	 038B	 90750003		i0 = i7 - (0x3)			# LN: 55 | 
1295  	 038C	 B0140000		i0 = xmem[i0]			# LN: 55 | 
1296  	 038D	 91750003		i1 = i7 - (0x3)			# LN: 55 | 
1297  	 038E	 B1140001		i1 = xmem[i1]			# LN: 55 | 
1298  	 038F	 02087FFF		i0 += 1			# LN: 55 | 
1299  	 0390	 88140001		a0 = xmem[i1]			# LN: 55 | 
1300  	 0391	 98540000		xmem[i0] = a0h			# LN: 55 | 
1301  	 0392				cline_55_0:			/* LN: 56 | CYCLE: 0 | RULES: () */ 
1302  	 0392	 90750001		i0 = i7 - (0x1)			# LN: 56 | 
1303  	 0393	 91750003		i1 = i7 - (0x3)			# LN: 56 | 
1304  	 0394	 B1140001		i1 = xmem[i1]			# LN: 56 | 
1305  	 0395	 88140000		a0 = xmem[i0]			# LN: 56 | 
1306  	 0396	 98540001		xmem[i1] = a0h			# LN: 56 | 
1307  	 0397				cline_56_0:			/* LN: 58 | CYCLE: 0 | RULES: () */ 
1308  	 0397	 90750007		i0 = i7 - (0x7)			# LN: 58 | 
1309  	 0398	 A0140010		a0g = xmem[i0]; i0 += 1			# LN: 58, 58 | 
1310  	 0399	 98140010		a0h = xmem[i0]; i0 += 1			# LN: 58, 58 | 
1311  	 039A	 90140000		a0l = xmem[i0]			# LN: 58 | 
1312  	 039B	 8008039C		jmp (__epilogue_196)			# LN: 58 | 
1313  	 039C				cline_58_0:			/* LN: 59 | CYCLE: 0 | RULES: () */ 
1314  	 039C				__epilogue_196:			/* LN: 59 | CYCLE: 0 | RULES: () */ 
1315  	 039C	 97750007		i7 = i7 - (0x7)			# LN: 59 | 
1316  	 039D	 02177FFF		i7 -= 1			# LN: 59 | 
1317  	 039E	 81880000		ret			# LN: 59 | 
1318  						(null)
				 SYMBOL TABLE 

    Name                                                                                    Type                  Value 

_COMMON_INC_PATH_                                                               					 Define                 "C:/CirrusDSP/crystal32/common/inc/"
_DSP_                                                                           					 Define                 "a"
_INPUT_GAIN                                                                     			  Public Relocatable       main_GEN_0000:0000H
_LOCAL_INC_PATH_                                                                					 Define                 "inc/"
_LOCAL_SRC_PATH_                                                                					 Define                 "src/"
_MODE                                                                           			  Public Relocatable       main_GEN_0001:0000H
_MUI_VERSION_                                                                   					 Define                 "020000"
_OVLY_                                                                          					 Define                 "standalone"
_OVLY_REVISION_                                                                 					 Define                 "020000"
_ROUTER_INC_PATH_                                                               					 Define                 "rom_inc/"
_SLOT_                                                                          					 Define                 "0"
_TARGET_FAMILY_                                                                 					 Define                 "crystal32"
_TOOLS_VERSION_                                                                 					 Define                 "0x0701"
_VERSION_                                                                       					 Define                 "00"
__CASM_VER__                                                                    			  Unused Variable		        0 (701H)
___TIMER0_COUNT                                                                 					 External   
___TIMER1_COUNT                                                                 					 External   
___TIMER1_ENABLE                                                                					 External   
__div                                                                           					 External   
__epilogue_196                                                                  			         Relocatable         main_GEN_0030:039CH
__epilogue_198                                                                  			         Relocatable         main_GEN_0030:0316H
__epilogue_200                                                                  			         Relocatable         main_GEN_0030:010EH
__extractedConst_0_1                                                            			         Relocatable         main_GEN_0002:0000H
__extractedConst_1_1                                                            			         Relocatable         main_GEN_0003:0000H
__extractedConst_2_1                                                            			         Relocatable         main_GEN_0004:0000H
__extractedConst_3_1                                                            			         Relocatable         main_GEN_0005:0000H
__start                                                                         					 External   
_cl_wavread_bits_per_sample                                                     					 External   
_cl_wavread_close                                                               					 External   
_cl_wavread_frame_rate                                                          					 External   
_cl_wavread_number_of_frames                                                    					 External   
_cl_wavread_open                                                                					 External   
_cl_wavread_recvsample                                                          					 External   
_cl_wavwrite_close                                                              					 External   
_cl_wavwrite_open                                                               					 External   
_cl_wavwrite_sendsample                                                         					 External   
_coefficients_11k_lpf                                                           			  Public Relocatable       main_GEN_0006:0000H
_coefficients_3k_hpf                                                            			  Public Relocatable       main_GEN_0007:0000H
_coefficients_5k_hpf                                                            			  Public Relocatable       main_GEN_0008:0000H
_main                                                                           			  Public Relocatable       main_GEN_0030:0000H
_processing                                                                     			  Public Relocatable       main_GEN_0030:0111H
_sampleBuffer                                                                   			  Public Relocatable       main_GEN_0009:0000H
_second_order_IIR                                                               			  Public Relocatable       main_GEN_0030:0319H
_strcpy                                                                         					 External   
_temp_left                                                                      			  Public Relocatable       main_GEN_0010:0000H
_temp_nizL11k                                                                   			  Public Relocatable       main_GEN_0011:0000H
_temp_nizL3k                                                                    			  Public Relocatable       main_GEN_0012:0000H
_temp_nizL5k                                                                    			  Public Relocatable       main_GEN_0013:0000H
_temp_nizR11k                                                                   			  Public Relocatable       main_GEN_0014:0000H
_temp_nizR3k                                                                    			  Public Relocatable       main_GEN_0015:0000H
_temp_nizR5k                                                                    			  Public Relocatable       main_GEN_0016:0000H
_temp_right                                                                     			  Public Relocatable       main_GEN_0017:0000H
_x_history0                                                                     			  Public Relocatable       main_GEN_0018:0000H
_x_history1                                                                     			  Public Relocatable       main_GEN_0019:0000H
_x_history2                                                                     			  Public Relocatable       main_GEN_0020:0000H
_x_history3                                                                     			  Public Relocatable       main_GEN_0021:0000H
_x_history4                                                                     			  Public Relocatable       main_GEN_0022:0000H
_x_history5                                                                     			  Public Relocatable       main_GEN_0023:0000H
_y_history0                                                                     			  Public Relocatable       main_GEN_0024:0000H
_y_history1                                                                     			  Public Relocatable       main_GEN_0025:0000H
_y_history2                                                                     			  Public Relocatable       main_GEN_0026:0000H
_y_history3                                                                     			  Public Relocatable       main_GEN_0027:0000H
_y_history4                                                                     			  Public Relocatable       main_GEN_0028:0000H
_y_history5                                                                     			  Public Relocatable       main_GEN_0029:0000H
cline_100_0                                                                     			  Unused Relocatable        main_GEN_0030:01E5H
cline_101_0                                                                     			  Unused Relocatable        main_GEN_0030:01EDH
cline_102_0                                                                     			  Unused Relocatable        main_GEN_0030:01F7H
cline_103_0                                                                     			  Unused Relocatable        main_GEN_0030:01FCH
cline_104_0                                                                     			  Unused Relocatable        main_GEN_0030:0201H
cline_105_0                                                                     			  Unused Relocatable        main_GEN_0030:020BH
cline_106_0                                                                     			  Unused Relocatable        main_GEN_0030:0210H
cline_107_0                                                                     			  Unused Relocatable        main_GEN_0030:0215H
cline_110_0                                                                     			  Unused Relocatable        main_GEN_0030:021EH
cline_111_0                                                                     			  Unused Relocatable        main_GEN_0030:0221H
cline_112_0                                                                     			  Unused Relocatable        main_GEN_0030:0224H
cline_113_0                                                                     			  Unused Relocatable        main_GEN_0030:0227H
cline_114_0                                                                     			  Unused Relocatable        main_GEN_0030:022AH
cline_115_0                                                                     			  Unused Relocatable        main_GEN_0030:022DH
cline_116_0                                                                     			  Unused Relocatable        main_GEN_0030:0230H
cline_117_0                                                                     			  Unused Relocatable        main_GEN_0030:0233H
cline_120_0                                                                     			  Unused Relocatable        main_GEN_0030:0237H
cline_123_0                                                                     			  Unused Relocatable        main_GEN_0030:023BH
cline_123_1                                                                     			  Unused Relocatable        main_GEN_0030:0292H
cline_125_0                                                                     			  Unused Relocatable        main_GEN_0030:0241H
cline_126_0                                                                     			  Unused Relocatable        main_GEN_0030:0247H
cline_127_0                                                                     			  Unused Relocatable        main_GEN_0030:024DH
cline_128_0                                                                     			  Unused Relocatable        main_GEN_0030:0253H
cline_129_0                                                                     			  Unused Relocatable        main_GEN_0030:0259H
cline_130_0                                                                     			  Unused Relocatable        main_GEN_0030:025EH
cline_131_0                                                                     			  Unused Relocatable        main_GEN_0030:0263H
cline_132_0                                                                     			  Unused Relocatable        main_GEN_0030:0268H
cline_133_0                                                                     			  Unused Relocatable        main_GEN_0030:026DH
cline_134_0                                                                     			  Unused Relocatable        main_GEN_0030:0272H
cline_135_0                                                                     			  Unused Relocatable        main_GEN_0030:0277H
cline_136_0                                                                     			  Unused Relocatable        main_GEN_0030:027CH
cline_137_0                                                                     			  Unused Relocatable        main_GEN_0030:0281H
cline_138_0                                                                     			  Unused Relocatable        main_GEN_0030:0286H
cline_139_0                                                                     			  Unused Relocatable        main_GEN_0030:028BH
cline_141_0                                                                     			  Unused Relocatable        main_GEN_0030:0296H
cline_144_0                                                                     			  Unused Relocatable        main_GEN_0030:029AH
cline_144_1                                                                     			  Unused Relocatable        main_GEN_0030:02E1H
cline_146_0                                                                     			  Unused Relocatable        main_GEN_0030:02A0H
cline_147_0                                                                     			  Unused Relocatable        main_GEN_0030:02A6H
cline_148_0                                                                     			  Unused Relocatable        main_GEN_0030:02ACH
cline_149_0                                                                     			  Unused Relocatable        main_GEN_0030:02B2H
cline_150_0                                                                     			  Unused Relocatable        main_GEN_0030:02B7H
cline_151_0                                                                     			  Unused Relocatable        main_GEN_0030:02BCH
cline_152_0                                                                     			  Unused Relocatable        main_GEN_0030:02C1H
cline_153_0                                                                     			  Unused Relocatable        main_GEN_0030:02C6H
cline_154_0                                                                     			  Unused Relocatable        main_GEN_0030:02CBH
cline_155_0                                                                     			  Unused Relocatable        main_GEN_0030:02D0H
cline_156_0                                                                     			  Unused Relocatable        main_GEN_0030:02D5H
cline_157_0                                                                     			  Unused Relocatable        main_GEN_0030:02DAH
cline_161_0                                                                     			  Unused Relocatable        main_GEN_0030:02E5H
cline_161_1                                                                     			  Unused Relocatable        main_GEN_0030:0315H
cline_163_0                                                                     			  Unused Relocatable        main_GEN_0030:02F0H
cline_164_0                                                                     			  Unused Relocatable        main_GEN_0030:02FBH
cline_165_0                                                                     			  Unused Relocatable        main_GEN_0030:0300H
cline_166_0                                                                     			  Unused Relocatable        main_GEN_0030:0305H
cline_167_0                                                                     			  Unused Relocatable        main_GEN_0030:030AH
cline_168_0                                                                     			  Unused Relocatable        main_GEN_0030:030FH
cline_172_0                                                                     			  Unused Relocatable        main_GEN_0030:0316H
cline_175_0                                                                     			  Unused Relocatable        main_GEN_0030:0007H
cline_190_0                                                                     			  Unused Relocatable        main_GEN_0030:000BH
cline_190_1                                                                     			  Unused Relocatable        main_GEN_0030:0027H
cline_193_0                                                                     			  Unused Relocatable        main_GEN_0030:000FH
cline_193_1                                                                     			  Unused Relocatable        main_GEN_0030:0021H
cline_195_0                                                                     			  Unused Relocatable        main_GEN_0030:001BH
cline_199_0                                                                     			  Unused Relocatable        main_GEN_0030:002CH
cline_199_1                                                                     			  Unused Relocatable        main_GEN_0030:005EH
cline_201_0                                                                     			  Unused Relocatable        main_GEN_0030:0032H
cline_202_0                                                                     			  Unused Relocatable        main_GEN_0030:0038H
cline_203_0                                                                     			  Unused Relocatable        main_GEN_0030:003EH
cline_204_0                                                                     			  Unused Relocatable        main_GEN_0030:0044H
cline_205_0                                                                     			  Unused Relocatable        main_GEN_0030:004AH
cline_206_0                                                                     			  Unused Relocatable        main_GEN_0030:0050H
cline_207_0                                                                     			  Unused Relocatable        main_GEN_0030:0056H
cline_208_0                                                                     			  Unused Relocatable        main_GEN_0030:0058H
cline_213_0                                                                     			  Unused Relocatable        main_GEN_0030:0065H
cline_214_0                                                                     			  Unused Relocatable        main_GEN_0030:006AH
cline_215_0                                                                     			  Unused Relocatable        main_GEN_0030:006EH
cline_218_0                                                                     			  Unused Relocatable        main_GEN_0030:0070H
cline_224_0                                                                     			  Unused Relocatable        main_GEN_0030:0073H
cline_225_0                                                                     			  Unused Relocatable        main_GEN_0030:0078H
cline_226_0                                                                     			  Unused Relocatable        main_GEN_0030:007DH
cline_227_0                                                                     			  Unused Relocatable        main_GEN_0030:0082H
cline_232_0                                                                     			  Unused Relocatable        main_GEN_0030:008AH
cline_233_0                                                                     			  Unused Relocatable        main_GEN_0030:0095H
cline_234_0                                                                     			  Unused Relocatable        main_GEN_0030:0099H
cline_237_0                                                                     			  Unused Relocatable        main_GEN_0030:009BH
cline_250_0                                                                     			  Unused Relocatable        main_GEN_0030:00A6H
cline_250_1                                                                     			  Unused Relocatable        main_GEN_0030:0106H
cline_252_0                                                                     			  Unused Relocatable        main_GEN_0030:00AAH
cline_252_1                                                                     			  Unused Relocatable        main_GEN_0030:00D2H
cline_254_0                                                                     			  Unused Relocatable        main_GEN_0030:00B3H
cline_254_1                                                                     			  Unused Relocatable        main_GEN_0030:00CCH
cline_256_0                                                                     			  Unused Relocatable        main_GEN_0030:00B8H
cline_257_0                                                                     			  Unused Relocatable        main_GEN_0030:00C5H
cline_261_0                                                                     			  Unused Relocatable        main_GEN_0030:00D3H
cline_263_0                                                                     			  Unused Relocatable        main_GEN_0030:00D7H
cline_263_1                                                                     			  Unused Relocatable        main_GEN_0030:00FFH
cline_265_0                                                                     			  Unused Relocatable        main_GEN_0030:00E0H
cline_265_1                                                                     			  Unused Relocatable        main_GEN_0030:00F9H
cline_267_0                                                                     			  Unused Relocatable        main_GEN_0030:00EDH
cline_268_0                                                                     			  Unused Relocatable        main_GEN_0030:00F2H
cline_276_0                                                                     			  Unused Relocatable        main_GEN_0030:0109H
cline_277_0                                                                     			  Unused Relocatable        main_GEN_0030:010CH
cline_280_0                                                                     			  Unused Relocatable        main_GEN_0030:010EH
cline_44_0                                                                      			  Unused Relocatable        main_GEN_0030:0324H
cline_45_0                                                                      			  Unused Relocatable        main_GEN_0030:0329H
cline_47_0                                                                      			  Unused Relocatable        main_GEN_0030:0337H
cline_48_0                                                                      			  Unused Relocatable        main_GEN_0030:0349H
cline_49_0                                                                      			  Unused Relocatable        main_GEN_0030:035AH
cline_50_0                                                                      			  Unused Relocatable        main_GEN_0030:036CH
cline_51_0                                                                      			  Unused Relocatable        main_GEN_0030:037DH
cline_53_0                                                                      			  Unused Relocatable        main_GEN_0030:0384H
cline_54_0                                                                      			  Unused Relocatable        main_GEN_0030:038BH
cline_55_0                                                                      			  Unused Relocatable        main_GEN_0030:0392H
cline_56_0                                                                      			  Unused Relocatable        main_GEN_0030:0397H
cline_58_0                                                                      			  Unused Relocatable        main_GEN_0030:039CH
cline_61_0                                                                      			  Unused Relocatable        main_GEN_0030:0114H
cline_63_0                                                                      			  Unused Relocatable        main_GEN_0030:0117H
cline_64_0                                                                      			  Unused Relocatable        main_GEN_0030:011AH
cline_65_0                                                                      			  Unused Relocatable        main_GEN_0030:011DH
cline_66_0                                                                      			  Unused Relocatable        main_GEN_0030:0120H
cline_67_0                                                                      			  Unused Relocatable        main_GEN_0030:0123H
cline_70_0                                                                      			  Unused Relocatable        main_GEN_0030:0126H
cline_71_0                                                                      			  Unused Relocatable        main_GEN_0030:0129H
cline_72_0                                                                      			  Unused Relocatable        main_GEN_0030:012CH
cline_73_0                                                                      			  Unused Relocatable        main_GEN_0030:012FH
cline_74_0                                                                      			  Unused Relocatable        main_GEN_0030:0132H
cline_75_0                                                                      			  Unused Relocatable        main_GEN_0030:0135H
cline_76_0                                                                      			  Unused Relocatable        main_GEN_0030:0138H
cline_77_0                                                                      			  Unused Relocatable        main_GEN_0030:013BH
cline_82_0                                                                      			  Unused Relocatable        main_GEN_0030:013FH
cline_82_1                                                                      			  Unused Relocatable        main_GEN_0030:021BH
cline_84_0                                                                      			  Unused Relocatable        main_GEN_0030:014AH
cline_85_0                                                                      			  Unused Relocatable        main_GEN_0030:0155H
cline_86_0                                                                      			  Unused Relocatable        main_GEN_0030:015DH
cline_87_0                                                                      			  Unused Relocatable        main_GEN_0030:0165H
cline_88_0                                                                      			  Unused Relocatable        main_GEN_0030:0173H
cline_89_0                                                                      			  Unused Relocatable        main_GEN_0030:0181H
cline_90_0                                                                      			  Unused Relocatable        main_GEN_0030:018FH
cline_91_0                                                                      			  Unused Relocatable        main_GEN_0030:0194H
cline_92_0                                                                      			  Unused Relocatable        main_GEN_0030:019CH
cline_93_0                                                                      			  Unused Relocatable        main_GEN_0030:01AAH
cline_94_0                                                                      			  Unused Relocatable        main_GEN_0030:01AFH
cline_95_0                                                                      			  Unused Relocatable        main_GEN_0030:01B7H
cline_96_0                                                                      			  Unused Relocatable        main_GEN_0030:01C5H
cline_97_0                                                                      			  Unused Relocatable        main_GEN_0030:01CAH
cline_98_0                                                                      			  Unused Relocatable        main_GEN_0030:01D2H
cline_99_0                                                                      			  Unused Relocatable        main_GEN_0030:01E0H
dummy                                                                           			  Unused Number				     0 (0H)
else_0                                                                          			         Relocatable         main_GEN_0030:0292H
else_1                                                                          			         Relocatable         main_GEN_0030:02E1H
else_2                                                                          			         Relocatable         main_GEN_0030:0070H
else_3                                                                          			         Relocatable         main_GEN_0030:009BH
endif_0                                                                         			         Relocatable         main_GEN_0030:0315H
endif_1                                                                         			         Relocatable         main_GEN_0030:0315H
endif_2                                                                         			  Unused Relocatable        main_GEN_0030:0070H
endif_3                                                                         			  Unused Relocatable        main_GEN_0030:009BH
for_11                                                                          			         Relocatable         main_GEN_0030:00DAH
for_7                                                                           			         Relocatable         main_GEN_0030:009EH
for_9                                                                           			         Relocatable         main_GEN_0030:00ADH
for_end_0                                                                       			  Unused Relocatable        main_GEN_0030:021BH
for_end_1                                                                       			  Unused Relocatable        main_GEN_0030:0291H
for_end_10                                                                      			  Unused Relocatable        main_GEN_0030:00FFH
for_end_11                                                                      			         Relocatable         main_GEN_0030:00F9H
for_end_2                                                                       			  Unused Relocatable        main_GEN_0030:02E0H
for_end_3                                                                       			  Unused Relocatable        main_GEN_0030:0315H
for_end_4                                                                       			  Unused Relocatable        main_GEN_0030:0027H
for_end_5                                                                       			  Unused Relocatable        main_GEN_0030:0021H
for_end_6                                                                       			  Unused Relocatable        main_GEN_0030:005EH
for_end_7                                                                       			         Relocatable         main_GEN_0030:0106H
for_end_8                                                                       			  Unused Relocatable        main_GEN_0030:00D2H
for_end_9                                                                       			         Relocatable         main_GEN_0030:00CCH
init_latch_label_0                                                              			  Unused Relocatable        main_GEN_0030:0215H
init_latch_label_1                                                              			  Unused Relocatable        main_GEN_0030:028BH
init_latch_label_10                                                             			  Unused Relocatable        main_GEN_0030:00F9H
init_latch_label_11                                                             			  Unused Relocatable        main_GEN_0030:00FFH
init_latch_label_2                                                              			  Unused Relocatable        main_GEN_0030:02DAH
init_latch_label_3                                                              			  Unused Relocatable        main_GEN_0030:030FH
init_latch_label_4                                                              			  Unused Relocatable        main_GEN_0030:001BH
init_latch_label_5                                                              			  Unused Relocatable        main_GEN_0030:0021H
init_latch_label_6                                                              			  Unused Relocatable        main_GEN_0030:0058H
init_latch_label_7                                                              			  Unused Relocatable        main_GEN_0030:00C5H
init_latch_label_8                                                              			  Unused Relocatable        main_GEN_0030:00CCH
init_latch_label_9                                                              			  Unused Relocatable        main_GEN_0030:00F2H
label_begin_100                                                                 			  Unused Relocatable        main_GEN_0030:00D7H
label_begin_92                                                                  			  Unused Relocatable        main_GEN_0030:013FH
label_begin_93                                                                  			  Unused Relocatable        main_GEN_0030:023BH
label_begin_94                                                                  			  Unused Relocatable        main_GEN_0030:029AH
label_begin_95                                                                  			  Unused Relocatable        main_GEN_0030:02E5H
label_begin_96                                                                  			  Unused Relocatable        main_GEN_0030:000FH
label_begin_97                                                                  			  Unused Relocatable        main_GEN_0030:000BH
label_begin_98                                                                  			  Unused Relocatable        main_GEN_0030:002CH
label_begin_99                                                                  			  Unused Relocatable        main_GEN_0030:00AAH
label_end_100                                                                   			         Relocatable         main_GEN_0030:00FEH
label_end_92                                                                    			         Relocatable         main_GEN_0030:021AH
label_end_93                                                                    			         Relocatable         main_GEN_0030:0290H
label_end_94                                                                    			         Relocatable         main_GEN_0030:02DFH
label_end_95                                                                    			         Relocatable         main_GEN_0030:0314H
label_end_96                                                                    			         Relocatable         main_GEN_0030:0020H
label_end_97                                                                    			         Relocatable         main_GEN_0030:0026H
label_end_98                                                                    			         Relocatable         main_GEN_0030:005DH
label_end_99                                                                    			         Relocatable         main_GEN_0030:00D1H

	       SEGMENTS:

Size			  Name										 Class
0000H	 __INIT                                  			 CODE                                    
0001H	 main_GEN_0000                           			 X_OVLY                                  
0001H	 main_GEN_0001                           			 X_OVLY                                  
0001H	 main_GEN_0002                           			 X_OVLY                                  
0001H	 main_GEN_0003                           			 X_OVLY                                  
0001H	 main_GEN_0004                           			 X_OVLY                                  
0001H	 main_GEN_0005                           			 X_OVLY                                  
0006H	 main_GEN_0006                           			 X_OVLY                                  
0006H	 main_GEN_0007                           			 X_OVLY                                  
0006H	 main_GEN_0008                           			 X_OVLY                                  
0050H	 main_GEN_0009                           			 X_OVLY                                  
0010H	 main_GEN_0010                           			 X_OVLY                                  
0010H	 main_GEN_0011                           			 X_OVLY                                  
0010H	 main_GEN_0012                           			 X_OVLY                                  
0010H	 main_GEN_0013                           			 X_OVLY                                  
0010H	 main_GEN_0014                           			 X_OVLY                                  
0010H	 main_GEN_0015                           			 X_OVLY                                  
0010H	 main_GEN_0016                           			 X_OVLY                                  
0010H	 main_GEN_0017                           			 X_OVLY                                  
0002H	 main_GEN_0018                           			 X_OVLY                                  
0002H	 main_GEN_0019                           			 X_OVLY                                  
0002H	 main_GEN_0020                           			 X_OVLY                                  
0002H	 main_GEN_0021                           			 X_OVLY                                  
0002H	 main_GEN_0022                           			 X_OVLY                                  
0002H	 main_GEN_0023                           			 X_OVLY                                  
0002H	 main_GEN_0024                           			 X_OVLY                                  
0002H	 main_GEN_0025                           			 X_OVLY                                  
0002H	 main_GEN_0026                           			 X_OVLY                                  
0002H	 main_GEN_0027                           			 X_OVLY                                  
0002H	 main_GEN_0028                           			 X_OVLY                                  
0002H	 main_GEN_0029                           			 X_OVLY                                  
039FH	 main_GEN_0030                           			 CODE_OVLY                               
