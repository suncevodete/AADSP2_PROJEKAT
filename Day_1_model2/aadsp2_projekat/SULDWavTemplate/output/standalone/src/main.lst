1     	 0000					.public _INITIAL_GAIN
2     	 0000					.public _MODE
3     	 0000					.extern ___TIMER0_COUNT
4     	 0000					.extern ___TIMER1_COUNT
5     	 0000					.extern ___TIMER1_ENABLE
6     	 0000					.public _coefficients_11k_lpf
7     	 0000					.public _coefficients_3k_hpf
8     	 0000					.public _coefficients_5k_hpf
9     	 0000					.public _sampleBuffer
10    	 0000					.public _temp_left
11    	 0000					.public _temp_nizL11k
12    	 0000					.public _temp_nizL3k
13    	 0000					.public _temp_nizL5k
14    	 0000					.public _temp_nizR11k
15    	 0000					.public _temp_nizR3k
16    	 0000					.public _temp_nizR5k
17    	 0000					.public _temp_right
18    	 0000					.public _x_history0
19    	 0000					.public _x_history1
20    	 0000					.public _x_history2
21    	 0000					.public _x_history3
22    	 0000					.public _x_history4
23    	 0000					.public _x_history5
24    	 0000					.public _y_history0
25    	 0000					.public _y_history1
26    	 0000					.public _y_history2
27    	 0000					.public _y_history3
28    	 0000					.public _y_history4
29    	 0000					.public _y_history5
30    	 0000					.extern _cl_wavread_bits_per_sample
31    	 0000					.extern _cl_wavread_close
32    	 0000					.extern _cl_wavread_frame_rate
33    	 0000					.extern _cl_wavread_number_of_frames
34    	 0000					.extern _cl_wavread_open
35    	 0000					.extern _cl_wavread_recvsample
36    	 0000					.extern _cl_wavwrite_close
37    	 0000					.extern _cl_wavwrite_open
38    	 0000					.extern _cl_wavwrite_sendsample
39    	 0000					.public _main
40    	 0000					.extern _memset
41    	 0000					.public _processing
42    	 0000					.public _second_order_IIR
43    	 0000					.extern _strcpy
44    	 0000					.extern __div
45    							.xdata_ovly
45     >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
46    	 0000				_INITIAL_GAIN
47    	 0000					.dw  (0x0)
	 0000	 00000000	 
48    							.xdata_ovly
48     >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
49    	 0000				_MODE
50    	 0000					.dw  (0x140)
	 0000	 00000140	 
51    							.xdata_ovly
51     >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
52    	 0000				__extractedConst_0_1
53    	 0000					.dw  (0x287a26c5)
	 0000	 287A26C5	 
54    							.xdata_ovly
54     >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
55    	 0000				__extractedConst_1_1
56    	 0000					.dw  (0x2ae025c3)
	 0000	 2AE025C3	 
57    							.xdata_ovly
57     >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
58    	 0000				__extractedConst_2_1
59    	 0000					.dw  (0x50c335d4)
	 0000	 50C335D4	 
60    							.xdata_ovly
60     >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
61    	 0000				__extractedConst_3_1
62    	 0000					.dw  (0x51b29e30)
	 0000	 51B29E30	 
63    							.xdata_ovly
63     >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
64    	 0000				_coefficients_11k_lpf
65    	 0000					.dw  (0x255b5d64)
	 0000	 255B5D64	 
66    	 0001					.dw  (0x255b5d64)
	 0001	 255B5D64	 
67    	 0002					.dw  (0x255b5d64)
	 0002	 255B5D64	 
68    	 0003					.dw  (0x40000000)
	 0003	 40000000	 
69    	 0004					.dw  (0xffbba112)
	 0004	 FFBBA112	 
70    	 0005					.dw  (0x15f6336b)
	 0005	 15F6336B	 
71    							.xdata_ovly
71     >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
72    	 0000				_coefficients_3k_hpf
73    	 0000					.dw  (0x4ce53a53)
	 0000	 4CE53A53	 
74    	 0001					.dw  (0xb31ac5ad)
	 0001	 B31AC5AD	 
75    	 0002					.dw  (0x4ce53a53)
	 0002	 4CE53A53	 
76    	 0003					.dw  (0x40000000)
	 0003	 40000000	 
77    	 0004					.dw  (0xbdbfc141)
	 0004	 BDBFC141	 
78    	 0005					.dw  (0x2f146bb1)
	 0005	 2F146BB1	 
79    							.xdata_ovly
79     >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
80    	 0000				_coefficients_5k_hpf
81    	 0000					.dw  (0x5e88f2e5)
	 0000	 5E88F2E5	 
82    	 0001					.dw  (0xa1770d1b)
	 0001	 A1770D1B	 
83    	 0002					.dw  (0x5e88f2e5)
	 0002	 5E88F2E5	 
84    	 0003					.dw  (0x40000000)
	 0003	 40000000	 
85    	 0004					.dw  (0xa5eb6eb5)
	 0004	 A5EB6EB5	 
86    	 0005					.dw  (0x45f89c51)
	 0005	 45F89C51	 
87    							.xdata_ovly
87     >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
88    	 0000				_sampleBuffer
89    	 0000					.bss (0x50)
90    							.xdata_ovly
90     >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
91    	 0000				_temp_left
92    	 0000					.bss (0x10)
93    							.xdata_ovly
93     >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
94    	 0000				_temp_nizL11k
95    	 0000					.bss (0x10)
96    							.xdata_ovly
96     >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
97    	 0000				_temp_nizL3k
98    	 0000					.bss (0x10)
99    							.xdata_ovly
99     >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
100   	 0000				_temp_nizL5k
101   	 0000					.bss (0x10)
102   							.xdata_ovly
102    >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
103   	 0000				_temp_nizR11k
104   	 0000					.bss (0x10)
105   							.xdata_ovly
105    >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
106   	 0000				_temp_nizR3k
107   	 0000					.bss (0x10)
108   							.xdata_ovly
108    >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
109   	 0000				_temp_nizR5k
110   	 0000					.bss (0x10)
111   							.xdata_ovly
111    >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
112   	 0000				_temp_right
113   	 0000					.bss (0x10)
114   							.xdata_ovly
114    >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
115   	 0000				_x_history0
116   	 0000					.dw  (0x0)
	 0000	 00000000	 
117   	 0001					.dw  (0x0)
	 0001	 00000000	 
118   							.xdata_ovly
118    >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
119   	 0000				_x_history1
120   	 0000					.dw  (0x0)
	 0000	 00000000	 
121   	 0001					.dw  (0x0)
	 0001	 00000000	 
122   							.xdata_ovly
122    >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
123   	 0000				_x_history2
124   	 0000					.dw  (0x0)
	 0000	 00000000	 
125   	 0001					.dw  (0x0)
	 0001	 00000000	 
126   							.xdata_ovly
126    >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
127   	 0000				_x_history3
128   	 0000					.dw  (0x0)
	 0000	 00000000	 
129   	 0001					.dw  (0x0)
	 0001	 00000000	 
130   							.xdata_ovly
130    >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
131   	 0000				_x_history4
132   	 0000					.dw  (0x0)
	 0000	 00000000	 
133   	 0001					.dw  (0x0)
	 0001	 00000000	 
134   							.xdata_ovly
134    >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
135   	 0000				_x_history5
136   	 0000					.dw  (0x0)
	 0000	 00000000	 
137   	 0001					.dw  (0x0)
	 0001	 00000000	 
138   							.xdata_ovly
138    >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
139   	 0000				_y_history0
140   	 0000					.dw  (0x0)
	 0000	 00000000	 
141   	 0001					.dw  (0x0)
	 0001	 00000000	 
142   							.xdata_ovly
142    >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
143   	 0000				_y_history1
144   	 0000					.dw  (0x0)
	 0000	 00000000	 
145   	 0001					.dw  (0x0)
	 0001	 00000000	 
146   							.xdata_ovly
146    >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
147   	 0000				_y_history2
148   	 0000					.dw  (0x0)
	 0000	 00000000	 
149   	 0001					.dw  (0x0)
	 0001	 00000000	 
150   							.xdata_ovly
150    >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
151   	 0000				_y_history3
152   	 0000					.dw  (0x0)
	 0000	 00000000	 
153   	 0001					.dw  (0x0)
	 0001	 00000000	 
154   							.xdata_ovly
154    >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
155   	 0000				_y_history4
156   	 0000					.dw  (0x0)
	 0000	 00000000	 
157   	 0001					.dw  (0x0)
	 0001	 00000000	 
158   							.xdata_ovly
158    >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
159   	 0000				_y_history5
160   	 0000					.dw  (0x0)
	 0000	 00000000	 
161   	 0001					.dw  (0x0)
	 0001	 00000000	 
162   							.code_ovly
162    >> start of macro: .code_ovly
1+    									seg_single , "CODE_OVLY", CODE
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_CODE_ )
2+    						    segment
3+    						  .else
4+    						    segment "CODE_OVLY"
5+    							.if "" != ""
6+    						___SegStart_CODE_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .code_ovly
163   						
164   						
165   						
166   							# This construction should ensure linking of crt0 in case when target is a standalone program without the OS
167   							.if defined(_OVLY_)
168   								.if .strcmp('standalone',_OVLY_)=0
169   								.if .strcmp('crystal32',_TARGET_FAMILY_)=0
170   	 0000							.extern __start         # dummy use of __start to force linkage of crt0
171   	 0000				dummy		.equ(__start)
172   								.else
173   									.extern __intvec         # dummy use of __intvec to force linkage of intvec
174   						dummy		.equ(__intvec)
175   								.endif
176   								.endif
177   							.endif
178   						
179   	 0000				_main:			/* LN: 173 | CYCLE: 0 | RULES: () */ 
180   	 0000	 BB540007		xmem[i7] = i7			# LN: 173 | 
181   	 0001	 020F7FFF		i7 += 1			# LN: 173 | 
182   	 0002	 8775020D		i7 = i7 + (0x20d)			# LN: 173 | 
183   	 0003	 91750001		i1 = i7 - (0x1)			# LN: 173 | 
184   	 0004	 98540001		xmem[i1] = a0h			# LN: 173 | 
185   	 0005	 91750002		i1 = i7 - (0x2)			# LN: 173 | 
186   	 0006	 B0540001		xmem[i1] = i0			# LN: 173 | 
187   	 0007				cline_173_0:			/* LN: 188 | CYCLE: 0 | RULES: () */ 
188   	 0007	 90750003		i0 = i7 - (0x3)			# LN: 188 | 
189   	 0008	 00004DC0		a0 = 0			# LN: 188 | 
190   	 0009	 98540000		xmem[i0] = a0h			# LN: 188 | 
191   	 000A	 80500017		do (0x5), label_end_96			# LN: 188 | 
192   	 000B				cline_188_0:			/* LN: 189 | CYCLE: 0 | RULES: () */ 
193   	 000B				label_begin_96:			/* LN: 188 | CYCLE: 0 | RULES: () */ 
194   	 000B	 90750003		i0 = i7 - (0x3)			# LN: 189 | 
195   	 000C	 19404DC0		a1 = xmem[i0]; a0 = 0			# LN: 189, 189 | 
196   	 000D	 00004EC1		a1 = a1 << 4			# LN: 189 | 
197   	 000E	 49707FFF		i0 = a1			# LN: 189 | 
198   	 000F	 894A0010		uhalfword(a1) = (0x10)			# LN: 189 | 
199   	 0010	 80050000		i0 = i0 + (_sampleBuffer + 0)			# LN: 189 | 
200   	 0011	 80880000		call (_memset)			# LN: 189 | 
201   	 0012				cline_189_0:			/* LN: 188 | CYCLE: 0 | RULES: () */ 
202   	 0012				init_latch_label_4:			/* LN: 189 | CYCLE: 0 | RULES: () */ 
203   	 0012	 90750003		i0 = i7 - (0x3)			# LN: 188 | 
204   	 0013	 88140000		a0 = xmem[i0]			# LN: 188 | 
205   	 0014	 894A0001		uhalfword(a1) = (0x1)			# LN: 188 | 
206   	 0015	 00004408		a0 = a0 + a1			# LN: 188 | 
207   	 0016	 90750003		i0 = i7 - (0x3)			# LN: 188 | 
208   	 0017				label_end_96:			# LN: 188 | CYCLE: 5 | RULES: ()
209   	 0017	 98540000		xmem[i0] = a0h			# LN: 188 | 
210   	 0018				cline_188_1:			/* LN: 193 | CYCLE: 0 | RULES: () */ 
211   	 0018				for_end_4:			/* LN: 188 | CYCLE: 0 | RULES: () */ 
212   	 0018	 90750002		i0 = i7 - (0x2)			# LN: 193 | 
213   	 0019	 B0140000		i0 = xmem[i0]			# LN: 193 | 
214   	 001A	 91750103		i1 = i7 - (259 - 0)			# LN: 193 | 
215   	 001B	 B8140000		i4 = xmem[i0]			# LN: 193 | 
216   	 001C	 B1090030		i0 = i1			# LN: 193 | 
217   	 001D	 B8090031		i1 = i4			# LN: 193 | 
218   	 001E	 80880000		call (_strcpy)			# LN: 193 | 
219   	 001F				cline_193_0:			/* LN: 194 | CYCLE: 0 | RULES: () */ 
220   	 001F	 90750103		i0 = i7 - (259 - 0)			# LN: 194 | 
221   	 0020	 80880000		call (_cl_wavread_open)			# LN: 194 | 
222   	 0021	 98090030		AnyReg(i0, a0h)			# LN: 194 | 
223   	 0022	 91750104		i1 = i7 - (0x104)			# LN: 194 | 
224   	 0023	 B0540001		xmem[i1] = i0			# LN: 194 | 
225   	 0024				cline_194_0:			/* LN: 195 | CYCLE: 0 | RULES: () */ 
226   	 0024	 90750104		i0 = i7 - (0x104)			# LN: 195 | 
227   	 0025	 88140000		a0 = xmem[i0]			# LN: 195 | 
228   	 0026	 00004E80		a0 & a0			# LN: 195 | 
229   	 0027	 8448002A		if (a != 0) jmp (else_2)			# LN: 195 | 
230   	 0028				cline_195_0:			/* LN: 198 | CYCLE: 0 | RULES: () */ 
231   	 0028	 886AFFFF		halfword(a0) = (0xffff)			# LN: 198 | 
232   	 0029	 800800C8		jmp (__epilogue_200)			# LN: 198 | 
233   	 002A				cline_198_0:			/* LN: 204 | CYCLE: 0 | RULES: () */ 
234   	 002A				endif_2:			/* LN: 195 | CYCLE: 0 | RULES: () */ 
235   	 002A				else_2:			/* LN: 195 | CYCLE: 0 | RULES: () */ 
236   	 002A	 90750105		i0 = i7 - (0x105)			# LN: 204 | 
237   	 002B	 884A0005		uhalfword(a0) = (0x5)			# LN: 204 | 
238   	 002C	 98540000		xmem[i0] = a0h			# LN: 204 | 
239   	 002D				cline_204_0:			/* LN: 205 | CYCLE: 0 | RULES: () */ 
240   	 002D	 90750104		i0 = i7 - (0x104)			# LN: 205 | 
241   	 002E	 B0140000		i0 = xmem[i0]			# LN: 205 | 
242   	 002F	 80880000		call (_cl_wavread_bits_per_sample)			# LN: 205 | 
243   	 0030	 90750106		i0 = i7 - (0x106)			# LN: 205 | 
244   	 0031	 98540000		xmem[i0] = a0h			# LN: 205 | 
245   	 0032				cline_205_0:			/* LN: 206 | CYCLE: 0 | RULES: () */ 
246   	 0032	 90750104		i0 = i7 - (0x104)			# LN: 206 | 
247   	 0033	 B0140000		i0 = xmem[i0]			# LN: 206 | 
248   	 0034	 80880000		call (_cl_wavread_frame_rate)			# LN: 206 | 
249   	 0035	 90750107		i0 = i7 - (0x107)			# LN: 206 | 
250   	 0036	 98540000		xmem[i0] = a0h			# LN: 206 | 
251   	 0037				cline_206_0:			/* LN: 207 | CYCLE: 0 | RULES: () */ 
252   	 0037	 90750104		i0 = i7 - (0x104)			# LN: 207 | 
253   	 0038	 B0140000		i0 = xmem[i0]			# LN: 207 | 
254   	 0039	 80880000		call (_cl_wavread_number_of_frames)			# LN: 207 | 
255   	 003A	 90750108		i0 = i7 - (0x108)			# LN: 207 | 
256   	 003B	 98540000		xmem[i0] = a0h			# LN: 207 | 
257   	 003C				cline_207_0:			/* LN: 212 | CYCLE: 0 | RULES: () */ 
258   	 003C	 90750002		i0 = i7 - (0x2)			# LN: 212 | 
259   	 003D	 B0140000		i0 = xmem[i0]			# LN: 212 | 
260   	 003E	 91750208		i1 = i7 - (520 - 0)			# LN: 212 | 
261   	 003F	 02087FFF		i0 += 1			# LN: 212 | 
262   	 0040	 B8140000		i4 = xmem[i0]			# LN: 212 | 
263   	 0041	 B1090030		i0 = i1			# LN: 212 | 
264   	 0042	 B8090031		i1 = i4			# LN: 212 | 
265   	 0043	 80880000		call (_strcpy)			# LN: 212 | 
266   	 0044				cline_212_0:			/* LN: 213 | CYCLE: 0 | RULES: () */ 
267   	 0044	 90750208		i0 = i7 - (520 - 0)			# LN: 213 | 
268   	 0045	 91750106		i1 = i7 - (0x106)			# LN: 213 | 
269   	 0046	 88140001		a0 = xmem[i1]			# LN: 213 | 
270   	 0047	 91750105		i1 = i7 - (0x105)			# LN: 213 | 
271   	 0048	 89140001		a1 = xmem[i1]			# LN: 213 | 
272   	 0049	 91750107		i1 = i7 - (0x107)			# LN: 213 | 
273   	 004A	 8C140001		b0 = xmem[i1]			# LN: 213 | 
274   	 004B	 80880000		call (_cl_wavwrite_open)			# LN: 213 | 
275   	 004C	 98090030		AnyReg(i0, a0h)			# LN: 213 | 
276   	 004D	 91750209		i1 = i7 - (0x209)			# LN: 213 | 
277   	 004E	 B0540001		xmem[i1] = i0			# LN: 213 | 
278   	 004F				cline_213_0:			/* LN: 214 | CYCLE: 0 | RULES: () */ 
279   	 004F	 90750209		i0 = i7 - (0x209)			# LN: 214 | 
280   	 0050	 88140000		a0 = xmem[i0]			# LN: 214 | 
281   	 0051	 00004E80		a0 & a0			# LN: 214 | 
282   	 0052	 84480055		if (a != 0) jmp (else_3)			# LN: 214 | 
283   	 0053				cline_214_0:			/* LN: 217 | CYCLE: 0 | RULES: () */ 
284   	 0053	 886AFFFF		halfword(a0) = (0xffff)			# LN: 217 | 
285   	 0054	 800800C8		jmp (__epilogue_200)			# LN: 217 | 
286   	 0055				cline_217_0:			/* LN: 230 | CYCLE: 0 | RULES: () */ 
287   	 0055				endif_3:			/* LN: 214 | CYCLE: 0 | RULES: () */ 
288   	 0055				else_3:			/* LN: 214 | CYCLE: 0 | RULES: () */ 
289   	 0055	 9075020A		i0 = i7 - (0x20a)			# LN: 230 | 
290   	 0056	 00004DC0		a0 = 0			# LN: 230 | 
291   	 0057	 98540000		xmem[i0] = a0h			# LN: 230 | 
292   	 0058				for_5:			/* LN: 230 | CYCLE: 0 | RULES: () */ 
293   	 0058	 90750108		i0 = i7 - (0x108)			# LN: 230 | 
294   	 0059	 88140000		a0 = xmem[i0]			# LN: 230 | 
295   	 005A	 894A0010		uhalfword(a1) = (0x10)			# LN: 230 | 
296   	 005B	 80880000		call (__div)			# LN: 230 | 
297   	 005C	 9075020A		i0 = i7 - (0x20a)			# LN: 230 | 
298   	 005D	 89140000		a1 = xmem[i0]			# LN: 230 | 
299   	 005E	 00004F01		a1 - a0			# LN: 230 | 
300   	 005F	 84C800C0		if (a >= 0) jmp (for_end_5)			# LN: 230 | 
301   	 0060				cline_230_0:			/* LN: 232 | CYCLE: 0 | RULES: () */ 
302   	 0060	 9075020B		i0 = i7 - (0x20b)			# LN: 232 | 
303   	 0061	 00004DC0		a0 = 0			# LN: 232 | 
304   	 0062	 98540000		xmem[i0] = a0h			# LN: 232 | 
305   	 0063	 8100008B		do (0x10), label_end_97			# LN: 232 | 
306   	 0064				cline_232_0:			/* LN: 234 | CYCLE: 0 | RULES: () */ 
307   	 0064				label_begin_97:			/* LN: 232 | CYCLE: 0 | RULES: () */ 
308   	 0064	 9075020C		i0 = i7 - (0x20c)			# LN: 234 | 
309   	 0065	 00004DC0		a0 = 0			# LN: 234 | 
310   	 0066	 98540000		xmem[i0] = a0h			# LN: 234 | 
311   	 0067				for_7:			/* LN: 234 | CYCLE: 0 | RULES: () */ 
312   	 0067	 9075020C		i0 = i7 - (0x20c)			# LN: 234 | 
313   	 0068	 88140000		a0 = xmem[i0]			# LN: 234 | 
314   	 0069	 90750105		i0 = i7 - (0x105)			# LN: 234 | 
315   	 006A	 89140000		a1 = xmem[i0]			# LN: 234 | 
316   	 006B	 00004F08		a0 - a1			# LN: 234 | 
317   	 006C	 84C80086		if (a >= 0) jmp (for_end_7)			# LN: 234 | 
318   	 006D				cline_234_0:			/* LN: 236 | CYCLE: 0 | RULES: () */ 
319   	 006D	 90750104		i0 = i7 - (0x104)			# LN: 236 | 
320   	 006E	 B0140000		i0 = xmem[i0]			# LN: 236 | 
321   	 006F	 80880000		call (_cl_wavread_recvsample)			# LN: 236 | 
322   	 0070	 9075020D		i0 = i7 - (0x20d)			# LN: 236 | 
323   	 0071	 98540000		xmem[i0] = a0h			# LN: 236 | 
324   	 0072				cline_236_0:			/* LN: 237 | CYCLE: 0 | RULES: () */ 
325   	 0072	 9075020C		i0 = i7 - (0x20c)			# LN: 237 | 
326   	 0073	 88140000		a0 = xmem[i0]			# LN: 237 | 
327   	 0074	 00004EC0		a0 = a0 << 4			# LN: 237 | 
328   	 0075	 48707FFF		i0 = a0			# LN: 237 | 
329   	 0076	 9175020B		i1 = i7 - (0x20b)			# LN: 237 | 
330   	 0077	 80050000		i0 = i0 + (_sampleBuffer + 0)			# LN: 237 | 
331   	 0078	 88140001		a0 = xmem[i1]			# LN: 237 | 
332   	 0079	 09707FFF		a1 = i0			# LN: 237 | 
333   	 007A	 00004480		a0 = a1 + a0			# LN: 237 | 
334   	 007B	 98090030		AnyReg(i0, a0h)			# LN: 237 | 
335   	 007C	 9175020D		i1 = i7 - (0x20d)			# LN: 237 | 
336   	 007D	 88140001		a0 = xmem[i1]			# LN: 237 | 
337   	 007E	 98540000		xmem[i0] = a0h			# LN: 237 | 
338   	 007F				cline_237_0:			/* LN: 234 | CYCLE: 0 | RULES: () */ 
339   	 007F				init_latch_label_5:			/* LN: 238 | CYCLE: 0 | RULES: () */ 
340   	 007F	 9075020C		i0 = i7 - (0x20c)			# LN: 234 | 
341   	 0080	 88140000		a0 = xmem[i0]			# LN: 234 | 
342   	 0081	 894A0001		uhalfword(a1) = (0x1)			# LN: 234 | 
343   	 0082	 00004408		a0 = a0 + a1			# LN: 234 | 
344   	 0083	 9075020C		i0 = i7 - (0x20c)			# LN: 234 | 
345   	 0084	 98540000		xmem[i0] = a0h			# LN: 234 | 
346   	 0085	 80080067		jmp (for_7)			# LN: 234 | 
347   	 0086				cline_234_1:			/* LN: 232 | CYCLE: 0 | RULES: () */ 
348   	 0086				init_latch_label_6:			/* LN: 239 | CYCLE: 0 | RULES: () */ 
349   	 0086				for_end_7:			/* LN: 234 | CYCLE: 0 | RULES: () */ 
350   	 0086	 9075020B		i0 = i7 - (0x20b)			# LN: 232 | 
351   	 0087	 88140000		a0 = xmem[i0]			# LN: 232 | 
352   	 0088	 894A0001		uhalfword(a1) = (0x1)			# LN: 232 | 
353   	 0089	 00004408		a0 = a0 + a1			# LN: 232 | 
354   	 008A	 9075020B		i0 = i7 - (0x20b)			# LN: 232 | 
355   	 008B				label_end_97:			# LN: 232 | CYCLE: 5 | RULES: ()
356   	 008B	 98540000		xmem[i0] = a0h			# LN: 232 | 
357   	 008C				cline_232_1:			/* LN: 241 | CYCLE: 0 | RULES: () */ 
358   	 008C				for_end_6:			/* LN: 232 | CYCLE: 0 | RULES: () */ 
359   	 008C	 808800CB		call (_processing)			# LN: 241 | 
360   	 008D				cline_241_0:			/* LN: 243 | CYCLE: 0 | RULES: () */ 
361   	 008D	 9075020B		i0 = i7 - (0x20b)			# LN: 243 | 
362   	 008E	 00004DC0		a0 = 0			# LN: 243 | 
363   	 008F	 98540000		xmem[i0] = a0h			# LN: 243 | 
364   	 0090	 810000B8		do (0x10), label_end_98			# LN: 243 | 
365   	 0091				cline_243_0:			/* LN: 245 | CYCLE: 0 | RULES: () */ 
366   	 0091				label_begin_98:			/* LN: 243 | CYCLE: 0 | RULES: () */ 
367   	 0091	 9075020C		i0 = i7 - (0x20c)			# LN: 245 | 
368   	 0092	 00004DC0		a0 = 0			# LN: 245 | 
369   	 0093	 98540000		xmem[i0] = a0h			# LN: 245 | 
370   	 0094				for_9:			/* LN: 245 | CYCLE: 0 | RULES: () */ 
371   	 0094	 9075020C		i0 = i7 - (0x20c)			# LN: 245 | 
372   	 0095	 88140000		a0 = xmem[i0]			# LN: 245 | 
373   	 0096	 90750105		i0 = i7 - (0x105)			# LN: 245 | 
374   	 0097	 89140000		a1 = xmem[i0]			# LN: 245 | 
375   	 0098	 00004F08		a0 - a1			# LN: 245 | 
376   	 0099	 84C800B3		if (a >= 0) jmp (for_end_9)			# LN: 245 | 
377   	 009A				cline_245_0:			/* LN: 247 | CYCLE: 0 | RULES: () */ 
378   	 009A	 9075020C		i0 = i7 - (0x20c)			# LN: 247 | 
379   	 009B	 88140000		a0 = xmem[i0]			# LN: 247 | 
380   	 009C	 00004EC0		a0 = a0 << 4			# LN: 247 | 
381   	 009D	 48707FFF		i0 = a0			# LN: 247 | 
382   	 009E	 9175020B		i1 = i7 - (0x20b)			# LN: 247 | 
383   	 009F	 80050000		i0 = i0 + (_sampleBuffer + 0)			# LN: 247 | 
384   	 00A0	 88140001		a0 = xmem[i1]			# LN: 247 | 
385   	 00A1	 09707FFF		a1 = i0			# LN: 247 | 
386   	 00A2	 00004480		a0 = a1 + a0			# LN: 247 | 
387   	 00A3	 98090030		AnyReg(i0, a0h)			# LN: 247 | 
388   	 00A4	 9175020D		i1 = i7 - (0x20d)			# LN: 247 | 
389   	 00A5	 88140000		a0 = xmem[i0]			# LN: 247 | 
390   	 00A6	 98540001		xmem[i1] = a0h			# LN: 247 | 
391   	 00A7				cline_247_0:			/* LN: 248 | CYCLE: 0 | RULES: () */ 
392   	 00A7	 90750209		i0 = i7 - (0x209)			# LN: 248 | 
393   	 00A8	 9175020D		i1 = i7 - (0x20d)			# LN: 248 | 
394   	 00A9	 88140001		a0 = xmem[i1]			# LN: 248 | 
395   	 00AA	 B0140000		i0 = xmem[i0]			# LN: 248 | 
396   	 00AB	 80880000		call (_cl_wavwrite_sendsample)			# LN: 248 | 
397   	 00AC				cline_248_0:			/* LN: 245 | CYCLE: 0 | RULES: () */ 
398   	 00AC				init_latch_label_7:			/* LN: 249 | CYCLE: 0 | RULES: () */ 
399   	 00AC	 9075020C		i0 = i7 - (0x20c)			# LN: 245 | 
400   	 00AD	 88140000		a0 = xmem[i0]			# LN: 245 | 
401   	 00AE	 894A0001		uhalfword(a1) = (0x1)			# LN: 245 | 
402   	 00AF	 00004408		a0 = a0 + a1			# LN: 245 | 
403   	 00B0	 9075020C		i0 = i7 - (0x20c)			# LN: 245 | 
404   	 00B1	 98540000		xmem[i0] = a0h			# LN: 245 | 
405   	 00B2	 80080094		jmp (for_9)			# LN: 245 | 
406   	 00B3				cline_245_1:			/* LN: 243 | CYCLE: 0 | RULES: () */ 
407   	 00B3				init_latch_label_8:			/* LN: 250 | CYCLE: 0 | RULES: () */ 
408   	 00B3				for_end_9:			/* LN: 245 | CYCLE: 0 | RULES: () */ 
409   	 00B3	 9075020B		i0 = i7 - (0x20b)			# LN: 243 | 
410   	 00B4	 88140000		a0 = xmem[i0]			# LN: 243 | 
411   	 00B5	 894A0001		uhalfword(a1) = (0x1)			# LN: 243 | 
412   	 00B6	 00004408		a0 = a0 + a1			# LN: 243 | 
413   	 00B7	 9075020B		i0 = i7 - (0x20b)			# LN: 243 | 
414   	 00B8				label_end_98:			# LN: 243 | CYCLE: 5 | RULES: ()
415   	 00B8	 98540000		xmem[i0] = a0h			# LN: 243 | 
416   	 00B9				cline_243_1:			/* LN: 230 | CYCLE: 0 | RULES: () */ 
417   	 00B9				init_latch_label_9:			/* LN: 251 | CYCLE: 0 | RULES: () */ 
418   	 00B9				for_end_8:			/* LN: 243 | CYCLE: 0 | RULES: () */ 
419   	 00B9	 9075020A		i0 = i7 - (0x20a)			# LN: 230 | 
420   	 00BA	 88140000		a0 = xmem[i0]			# LN: 230 | 
421   	 00BB	 894A0001		uhalfword(a1) = (0x1)			# LN: 230 | 
422   	 00BC	 00004408		a0 = a0 + a1			# LN: 230 | 
423   	 00BD	 9075020A		i0 = i7 - (0x20a)			# LN: 230 | 
424   	 00BE	 98540000		xmem[i0] = a0h			# LN: 230 | 
425   	 00BF	 80080058		jmp (for_5)			# LN: 230 | 
426   	 00C0				cline_230_1:			/* LN: 256 | CYCLE: 0 | RULES: () */ 
427   	 00C0				for_end_5:			/* LN: 230 | CYCLE: 0 | RULES: () */ 
428   	 00C0	 90750104		i0 = i7 - (0x104)			# LN: 256 | 
429   	 00C1	 B0140000		i0 = xmem[i0]			# LN: 256 | 
430   	 00C2	 80880000		call (_cl_wavread_close)			# LN: 256 | 
431   	 00C3				cline_256_0:			/* LN: 257 | CYCLE: 0 | RULES: () */ 
432   	 00C3	 90750209		i0 = i7 - (0x209)			# LN: 257 | 
433   	 00C4	 B0140000		i0 = xmem[i0]			# LN: 257 | 
434   	 00C5	 80880000		call (_cl_wavwrite_close)			# LN: 257 | 
435   	 00C6				cline_257_0:			/* LN: 260 | CYCLE: 0 | RULES: () */ 
436   	 00C6	 00004DC0		a0 = 0			# LN: 260 | 
437   	 00C7	 800800C8		jmp (__epilogue_200)			# LN: 260 | 
438   	 00C8				cline_260_0:			/* LN: 261 | CYCLE: 0 | RULES: () */ 
439   	 00C8				__epilogue_200:			/* LN: 261 | CYCLE: 0 | RULES: () */ 
440   	 00C8	 9775020D		i7 = i7 - (0x20d)			# LN: 261 | 
441   	 00C9	 02177FFF		i7 -= 1			# LN: 261 | 
442   	 00CA	 81880000		ret			# LN: 261 | 
443   						
444   						
445   						
446   	 00CB				_processing:			/* LN: 59 | CYCLE: 0 | RULES: () */ 
447   	 00CB	 BB540007		xmem[i7] = i7			# LN: 59 | 
448   	 00CC	 020F7FFF		i7 += 1			# LN: 59 | 
449   	 00CD	 87750011		i7 = i7 + (0x11)			# LN: 59 | 
450   	 00CE				cline_59_0:			/* LN: 61 | CYCLE: 0 | RULES: () */ 
451   	 00CE	 90750001		i0 = i7 - (0x1)			# LN: 61 | 
452   	 00CF	 884A0000		uhalfword(a0) = (_sampleBuffer + 0)			# LN: 61 | 
453   	 00D0	 88540000		xmem[i0] = a0			# LN: 61 | 
454   	 00D1				cline_61_0:			/* LN: 62 | CYCLE: 0 | RULES: () */ 
455   	 00D1	 90750002		i0 = i7 - (0x2)			# LN: 62 | 
456   	 00D2	 884A0010		uhalfword(a0) = (_sampleBuffer + 16)			# LN: 62 | 
457   	 00D3	 88540000		xmem[i0] = a0			# LN: 62 | 
458   	 00D4				cline_62_0:			/* LN: 63 | CYCLE: 0 | RULES: () */ 
459   	 00D4	 90750003		i0 = i7 - (0x3)			# LN: 63 | 
460   	 00D5	 884A0020		uhalfword(a0) = (_sampleBuffer + 32)			# LN: 63 | 
461   	 00D6	 88540000		xmem[i0] = a0			# LN: 63 | 
462   	 00D7				cline_63_0:			/* LN: 64 | CYCLE: 0 | RULES: () */ 
463   	 00D7	 90750004		i0 = i7 - (0x4)			# LN: 64 | 
464   	 00D8	 884A0030		uhalfword(a0) = (_sampleBuffer + 48)			# LN: 64 | 
465   	 00D9	 88540000		xmem[i0] = a0			# LN: 64 | 
466   	 00DA				cline_64_0:			/* LN: 65 | CYCLE: 0 | RULES: () */ 
467   	 00DA	 90750005		i0 = i7 - (0x5)			# LN: 65 | 
468   	 00DB	 884A0040		uhalfword(a0) = (_sampleBuffer + 64)			# LN: 65 | 
469   	 00DC	 88540000		xmem[i0] = a0			# LN: 65 | 
470   	 00DD				cline_65_0:			/* LN: 68 | CYCLE: 0 | RULES: () */ 
471   	 00DD	 90750006		i0 = i7 - (0x6)			# LN: 68 | 
472   	 00DE	 884A0000		uhalfword(a0) = (_temp_left + 0)			# LN: 68 | 
473   	 00DF	 88540000		xmem[i0] = a0			# LN: 68 | 
474   	 00E0				cline_68_0:			/* LN: 69 | CYCLE: 0 | RULES: () */ 
475   	 00E0	 90750007		i0 = i7 - (0x7)			# LN: 69 | 
476   	 00E1	 884A0000		uhalfword(a0) = (_temp_right + 0)			# LN: 69 | 
477   	 00E2	 88540000		xmem[i0] = a0			# LN: 69 | 
478   	 00E3				cline_69_0:			/* LN: 70 | CYCLE: 0 | RULES: () */ 
479   	 00E3	 90750008		i0 = i7 - (0x8)			# LN: 70 | 
480   	 00E4	 884A0000		uhalfword(a0) = (_temp_nizL11k + 0)			# LN: 70 | 
481   	 00E5	 88540000		xmem[i0] = a0			# LN: 70 | 
482   	 00E6				cline_70_0:			/* LN: 71 | CYCLE: 0 | RULES: () */ 
483   	 00E6	 90750009		i0 = i7 - (0x9)			# LN: 71 | 
484   	 00E7	 884A0000		uhalfword(a0) = (_temp_nizR11k + 0)			# LN: 71 | 
485   	 00E8	 88540000		xmem[i0] = a0			# LN: 71 | 
486   	 00E9				cline_71_0:			/* LN: 72 | CYCLE: 0 | RULES: () */ 
487   	 00E9	 9075000A		i0 = i7 - (0xa)			# LN: 72 | 
488   	 00EA	 884A0000		uhalfword(a0) = (_temp_nizL5k + 0)			# LN: 72 | 
489   	 00EB	 88540000		xmem[i0] = a0			# LN: 72 | 
490   	 00EC				cline_72_0:			/* LN: 73 | CYCLE: 0 | RULES: () */ 
491   	 00EC	 9075000B		i0 = i7 - (0xb)			# LN: 73 | 
492   	 00ED	 884A0000		uhalfword(a0) = (_temp_nizR5k + 0)			# LN: 73 | 
493   	 00EE	 88540000		xmem[i0] = a0			# LN: 73 | 
494   	 00EF				cline_73_0:			/* LN: 74 | CYCLE: 0 | RULES: () */ 
495   	 00EF	 9075000C		i0 = i7 - (0xc)			# LN: 74 | 
496   	 00F0	 884A0000		uhalfword(a0) = (_temp_nizL3k + 0)			# LN: 74 | 
497   	 00F1	 88540000		xmem[i0] = a0			# LN: 74 | 
498   	 00F2				cline_74_0:			/* LN: 75 | CYCLE: 0 | RULES: () */ 
499   	 00F2	 9075000D		i0 = i7 - (0xd)			# LN: 75 | 
500   	 00F3	 884A0000		uhalfword(a0) = (_temp_nizR3k + 0)			# LN: 75 | 
501   	 00F4	 88540000		xmem[i0] = a0			# LN: 75 | 
502   	 00F5				cline_75_0:			/* LN: 80 | CYCLE: 0 | RULES: () */ 
503   	 00F5	 9075000E		i0 = i7 - (0xe)			# LN: 80 | 
504   	 00F6	 00004DC0		a0 = 0			# LN: 80 | 
505   	 00F7	 98540000		xmem[i0] = a0h			# LN: 80 | 
506   	 00F8	 810001D4		do (0x10), label_end_92			# LN: 80 | 
507   	 00F9				cline_80_0:			/* LN: 82 | CYCLE: 0 | RULES: () */ 
508   	 00F9				label_begin_92:			/* LN: 80 | CYCLE: 0 | RULES: () */ 
509   	 00F9	 90750001		i0 = i7 - (0x1)			# LN: 82 | 
510   	 00FA	 B0140000		i0 = xmem[i0]			# LN: 82 | 
511   	 00FB	 91750006		i1 = i7 - (0x6)			# LN: 82 | 
512   	 00FC	 B1140001		i1 = xmem[i1]			# LN: 82 | 
513   	 00FD	 88140000		a0 = xmem[i0]			# LN: 82 | 
514   	 00FE	 98540001		xmem[i1] = a0h			# LN: 82 | 
515   	 00FF	 90750001		i0 = i7 - (0x1)			# LN: 82 | 
516   	 0100	 B0140000		i0 = xmem[i0]			# LN: 82 | 
517   	 0101	 91750001		i1 = i7 - (0x1)			# LN: 82 | 
518   	 0102	 02087FFF		i0 += 1			# LN: 82 | 
519   	 0103	 B0540001		xmem[i1] = i0			# LN: 82 | 
520   	 0104				cline_82_0:			/* LN: 83 | CYCLE: 0 | RULES: () */ 
521   	 0104	 90750002		i0 = i7 - (0x2)			# LN: 83 | 
522   	 0105	 B0140000		i0 = xmem[i0]			# LN: 83 | 
523   	 0106	 91750007		i1 = i7 - (0x7)			# LN: 83 | 
524   	 0107	 B1140001		i1 = xmem[i1]			# LN: 83 | 
525   	 0108	 88140000		a0 = xmem[i0]			# LN: 83 | 
526   	 0109	 98540001		xmem[i1] = a0h			# LN: 83 | 
527   	 010A	 90750002		i0 = i7 - (0x2)			# LN: 83 | 
528   	 010B	 B0140000		i0 = xmem[i0]			# LN: 83 | 
529   	 010C	 91750002		i1 = i7 - (0x2)			# LN: 83 | 
530   	 010D	 02087FFF		i0 += 1			# LN: 83 | 
531   	 010E	 B0540001		xmem[i1] = i0			# LN: 83 | 
532   	 010F				cline_83_0:			/* LN: 84 | CYCLE: 0 | RULES: () */ 
533   	 010F	 90750006		i0 = i7 - (0x6)			# LN: 84 | 
534   	 0110	 B0140000		i0 = xmem[i0]			# LN: 84 | 
535   	 0111	 80040000		x0 = xmem[_INITIAL_GAIN + 0]			# LN: 84 | 
536   	 0112	 81140000		x1 = xmem[i0]			# LN: 84 | 
537   	 0113	 90750006		i0 = i7 - (0x6)			# LN: 84 | 
538   	 0114	 B0140000		i0 = xmem[i0]			# LN: 84 | 
539   	 0115	 00002020		a0 = x1 * x0			# LN: 84 | 
540   	 0116	 88540000		xmem[i0] = a0			# LN: 84 | 
541   	 0117				cline_84_0:			/* LN: 85 | CYCLE: 0 | RULES: () */ 
542   	 0117	 90750007		i0 = i7 - (0x7)			# LN: 85 | 
543   	 0118	 B0140000		i0 = xmem[i0]			# LN: 85 | 
544   	 0119	 80040000		x0 = xmem[_INITIAL_GAIN + 0]			# LN: 85 | 
545   	 011A	 81140000		x1 = xmem[i0]			# LN: 85 | 
546   	 011B	 90750007		i0 = i7 - (0x7)			# LN: 85 | 
547   	 011C	 B0140000		i0 = xmem[i0]			# LN: 85 | 
548   	 011D	 00002020		a0 = x1 * x0			# LN: 85 | 
549   	 011E	 88540000		xmem[i0] = a0			# LN: 85 | 
550   	 011F				cline_85_0:			/* LN: 86 | CYCLE: 0 | RULES: () */ 
551   	 011F	 90750006		i0 = i7 - (0x6)			# LN: 86 | 
552   	 0120	 B0140000		i0 = xmem[i0]			# LN: 86 | 
553   	 0121	 A1050000		i1 = (0) + (_coefficients_11k_lpf)			# LN: 86 | 
554   	 0122	 88140000		a0 = xmem[i0]			# LN: 86 | 
555   	 0123	 A4050000		i4 = (0) + (_x_history0)			# LN: 86 | 
556   	 0124	 A5050000		i5 = (0) + (_y_history0)			# LN: 86 | 
557   	 0125	 B1090030		i0 = i1			# LN: 86 | 
558   	 0126	 B8090031		i1 = i4			# LN: 86 | 
559   	 0127	 B9090038		i4 = i5			# LN: 86 | 
560   	 0128	 808802D3		call (_second_order_IIR)			# LN: 86 | 
561   	 0129	 90750008		i0 = i7 - (0x8)			# LN: 86 | 
562   	 012A	 B0140000		i0 = xmem[i0]			# LN: 86 | 
563   	 012B	 00007FFF		nop #empty cycle
564   	 012C	 88540000		xmem[i0] = a0			# LN: 86 | 
565   	 012D				cline_86_0:			/* LN: 87 | CYCLE: 0 | RULES: () */ 
566   	 012D	 90750007		i0 = i7 - (0x7)			# LN: 87 | 
567   	 012E	 B0140000		i0 = xmem[i0]			# LN: 87 | 
568   	 012F	 A1050000		i1 = (0) + (_coefficients_11k_lpf)			# LN: 87 | 
569   	 0130	 88140000		a0 = xmem[i0]			# LN: 87 | 
570   	 0131	 A4050000		i4 = (0) + (_x_history1)			# LN: 87 | 
571   	 0132	 A5050000		i5 = (0) + (_y_history1)			# LN: 87 | 
572   	 0133	 B1090030		i0 = i1			# LN: 87 | 
573   	 0134	 B8090031		i1 = i4			# LN: 87 | 
574   	 0135	 B9090038		i4 = i5			# LN: 87 | 
575   	 0136	 808802D3		call (_second_order_IIR)			# LN: 87 | 
576   	 0137	 90750009		i0 = i7 - (0x9)			# LN: 87 | 
577   	 0138	 B0140000		i0 = xmem[i0]			# LN: 87 | 
578   	 0139	 00007FFF		nop #empty cycle
579   	 013A	 88540000		xmem[i0] = a0			# LN: 87 | 
580   	 013B				cline_87_0:			/* LN: 88 | CYCLE: 0 | RULES: () */ 
581   	 013B	 90750006		i0 = i7 - (0x6)			# LN: 88 | 
582   	 013C	 B0140000		i0 = xmem[i0]			# LN: 88 | 
583   	 013D	 A1050000		i1 = (0) + (_coefficients_5k_hpf)			# LN: 88 | 
584   	 013E	 88140000		a0 = xmem[i0]			# LN: 88 | 
585   	 013F	 A4050000		i4 = (0) + (_x_history2)			# LN: 88 | 
586   	 0140	 A5050000		i5 = (0) + (_y_history2)			# LN: 88 | 
587   	 0141	 B1090030		i0 = i1			# LN: 88 | 
588   	 0142	 B8090031		i1 = i4			# LN: 88 | 
589   	 0143	 B9090038		i4 = i5			# LN: 88 | 
590   	 0144	 808802D3		call (_second_order_IIR)			# LN: 88 | 
591   	 0145	 9075000A		i0 = i7 - (0xa)			# LN: 88 | 
592   	 0146	 B0140000		i0 = xmem[i0]			# LN: 88 | 
593   	 0147	 00007FFF		nop #empty cycle
594   	 0148	 88540000		xmem[i0] = a0			# LN: 88 | 
595   	 0149				cline_88_0:			/* LN: 89 | CYCLE: 0 | RULES: () */ 
596   	 0149	 90750006		i0 = i7 - (0x6)			# LN: 89 | 
597   	 014A	 B0140000		i0 = xmem[i0]			# LN: 89 | 
598   	 014B	 91750006		i1 = i7 - (0x6)			# LN: 89 | 
599   	 014C	 02087FFF		i0 += 1			# LN: 89 | 
600   	 014D	 B0540001		xmem[i1] = i0			# LN: 89 | 
601   	 014E				cline_89_0:			/* LN: 90 | CYCLE: 0 | RULES: () */ 
602   	 014E	 9075000A		i0 = i7 - (0xa)			# LN: 90 | 
603   	 014F	 B0140000		i0 = xmem[i0]			# LN: 90 | 
604   	 0150	 80040000		x0 = xmem[__extractedConst_0_1 + 0]			# LN: 90 | 
605   	 0151	 81140000		x1 = xmem[i0]			# LN: 90 | 
606   	 0152	 9075000A		i0 = i7 - (0xa)			# LN: 90 | 
607   	 0153	 B0140000		i0 = xmem[i0]			# LN: 90 | 
608   	 0154	 00002020		a0 = x1 * x0			# LN: 90 | 
609   	 0155	 88540000		xmem[i0] = a0			# LN: 90 | 
610   	 0156				cline_90_0:			/* LN: 91 | CYCLE: 0 | RULES: () */ 
611   	 0156	 90750007		i0 = i7 - (0x7)			# LN: 91 | 
612   	 0157	 B0140000		i0 = xmem[i0]			# LN: 91 | 
613   	 0158	 A1050000		i1 = (0) + (_coefficients_5k_hpf)			# LN: 91 | 
614   	 0159	 88140000		a0 = xmem[i0]			# LN: 91 | 
615   	 015A	 A4050000		i4 = (0) + (_x_history3)			# LN: 91 | 
616   	 015B	 A5050000		i5 = (0) + (_y_history3)			# LN: 91 | 
617   	 015C	 B1090030		i0 = i1			# LN: 91 | 
618   	 015D	 B8090031		i1 = i4			# LN: 91 | 
619   	 015E	 B9090038		i4 = i5			# LN: 91 | 
620   	 015F	 808802D3		call (_second_order_IIR)			# LN: 91 | 
621   	 0160	 9075000B		i0 = i7 - (0xb)			# LN: 91 | 
622   	 0161	 B0140000		i0 = xmem[i0]			# LN: 91 | 
623   	 0162	 00007FFF		nop #empty cycle
624   	 0163	 88540000		xmem[i0] = a0			# LN: 91 | 
625   	 0164				cline_91_0:			/* LN: 92 | CYCLE: 0 | RULES: () */ 
626   	 0164	 90750007		i0 = i7 - (0x7)			# LN: 92 | 
627   	 0165	 B0140000		i0 = xmem[i0]			# LN: 92 | 
628   	 0166	 91750007		i1 = i7 - (0x7)			# LN: 92 | 
629   	 0167	 02087FFF		i0 += 1			# LN: 92 | 
630   	 0168	 B0540001		xmem[i1] = i0			# LN: 92 | 
631   	 0169				cline_92_0:			/* LN: 93 | CYCLE: 0 | RULES: () */ 
632   	 0169	 9075000B		i0 = i7 - (0xb)			# LN: 93 | 
633   	 016A	 B0140000		i0 = xmem[i0]			# LN: 93 | 
634   	 016B	 80040000		x0 = xmem[__extractedConst_1_1 + 0]			# LN: 93 | 
635   	 016C	 81140000		x1 = xmem[i0]			# LN: 93 | 
636   	 016D	 9075000B		i0 = i7 - (0xb)			# LN: 93 | 
637   	 016E	 B0140000		i0 = xmem[i0]			# LN: 93 | 
638   	 016F	 00002020		a0 = x1 * x0			# LN: 93 | 
639   	 0170	 88540000		xmem[i0] = a0			# LN: 93 | 
640   	 0171				cline_93_0:			/* LN: 94 | CYCLE: 0 | RULES: () */ 
641   	 0171	 90750008		i0 = i7 - (0x8)			# LN: 94 | 
642   	 0172	 B0140000		i0 = xmem[i0]			# LN: 94 | 
643   	 0173	 A1050000		i1 = (0) + (_coefficients_3k_hpf)			# LN: 94 | 
644   	 0174	 88140000		a0 = xmem[i0]			# LN: 94 | 
645   	 0175	 A4050000		i4 = (0) + (_x_history4)			# LN: 94 | 
646   	 0176	 A5050000		i5 = (0) + (_y_history4)			# LN: 94 | 
647   	 0177	 B1090030		i0 = i1			# LN: 94 | 
648   	 0178	 B8090031		i1 = i4			# LN: 94 | 
649   	 0179	 B9090038		i4 = i5			# LN: 94 | 
650   	 017A	 808802D3		call (_second_order_IIR)			# LN: 94 | 
651   	 017B	 9075000C		i0 = i7 - (0xc)			# LN: 94 | 
652   	 017C	 B0140000		i0 = xmem[i0]			# LN: 94 | 
653   	 017D	 00007FFF		nop #empty cycle
654   	 017E	 88540000		xmem[i0] = a0			# LN: 94 | 
655   	 017F				cline_94_0:			/* LN: 95 | CYCLE: 0 | RULES: () */ 
656   	 017F	 90750008		i0 = i7 - (0x8)			# LN: 95 | 
657   	 0180	 B0140000		i0 = xmem[i0]			# LN: 95 | 
658   	 0181	 91750008		i1 = i7 - (0x8)			# LN: 95 | 
659   	 0182	 02087FFF		i0 += 1			# LN: 95 | 
660   	 0183	 B0540001		xmem[i1] = i0			# LN: 95 | 
661   	 0184				cline_95_0:			/* LN: 96 | CYCLE: 0 | RULES: () */ 
662   	 0184	 9075000C		i0 = i7 - (0xc)			# LN: 96 | 
663   	 0185	 B0140000		i0 = xmem[i0]			# LN: 96 | 
664   	 0186	 80040000		x0 = xmem[__extractedConst_2_1 + 0]			# LN: 96 | 
665   	 0187	 81140000		x1 = xmem[i0]			# LN: 96 | 
666   	 0188	 9075000C		i0 = i7 - (0xc)			# LN: 96 | 
667   	 0189	 B0140000		i0 = xmem[i0]			# LN: 96 | 
668   	 018A	 00002020		a0 = x1 * x0			# LN: 96 | 
669   	 018B	 88540000		xmem[i0] = a0			# LN: 96 | 
670   	 018C				cline_96_0:			/* LN: 97 | CYCLE: 0 | RULES: () */ 
671   	 018C	 90750009		i0 = i7 - (0x9)			# LN: 97 | 
672   	 018D	 B0140000		i0 = xmem[i0]			# LN: 97 | 
673   	 018E	 A1050000		i1 = (0) + (_coefficients_3k_hpf)			# LN: 97 | 
674   	 018F	 88140000		a0 = xmem[i0]			# LN: 97 | 
675   	 0190	 A4050000		i4 = (0) + (_x_history5)			# LN: 97 | 
676   	 0191	 A5050000		i5 = (0) + (_y_history5)			# LN: 97 | 
677   	 0192	 B1090030		i0 = i1			# LN: 97 | 
678   	 0193	 B8090031		i1 = i4			# LN: 97 | 
679   	 0194	 B9090038		i4 = i5			# LN: 97 | 
680   	 0195	 808802D3		call (_second_order_IIR)			# LN: 97 | 
681   	 0196	 9075000D		i0 = i7 - (0xd)			# LN: 97 | 
682   	 0197	 B0140000		i0 = xmem[i0]			# LN: 97 | 
683   	 0198	 00007FFF		nop #empty cycle
684   	 0199	 88540000		xmem[i0] = a0			# LN: 97 | 
685   	 019A				cline_97_0:			/* LN: 98 | CYCLE: 0 | RULES: () */ 
686   	 019A	 90750009		i0 = i7 - (0x9)			# LN: 98 | 
687   	 019B	 B0140000		i0 = xmem[i0]			# LN: 98 | 
688   	 019C	 91750009		i1 = i7 - (0x9)			# LN: 98 | 
689   	 019D	 02087FFF		i0 += 1			# LN: 98 | 
690   	 019E	 B0540001		xmem[i1] = i0			# LN: 98 | 
691   	 019F				cline_98_0:			/* LN: 99 | CYCLE: 0 | RULES: () */ 
692   	 019F	 9075000D		i0 = i7 - (0xd)			# LN: 99 | 
693   	 01A0	 B0140000		i0 = xmem[i0]			# LN: 99 | 
694   	 01A1	 80040000		x0 = xmem[__extractedConst_3_1 + 0]			# LN: 99 | 
695   	 01A2	 81140000		x1 = xmem[i0]			# LN: 99 | 
696   	 01A3	 9075000D		i0 = i7 - (0xd)			# LN: 99 | 
697   	 01A4	 B0140000		i0 = xmem[i0]			# LN: 99 | 
698   	 01A5	 00002020		a0 = x1 * x0			# LN: 99 | 
699   	 01A6	 88540000		xmem[i0] = a0			# LN: 99 | 
700   	 01A7				cline_99_0:			/* LN: 100 | CYCLE: 0 | RULES: () */ 
701   	 01A7	 9075000C		i0 = i7 - (0xc)			# LN: 100 | 
702   	 01A8	 B0140000		i0 = xmem[i0]			# LN: 100 | 
703   	 01A9	 9175000A		i1 = i7 - (0xa)			# LN: 100 | 
704   	 01AA	 B1140001		i1 = xmem[i1]			# LN: 100 | 
705   	 01AB	 88140000		a0 = xmem[i0]			# LN: 100 | 
706   	 01AC	 89140001		a1 = xmem[i1]			# LN: 100 | 
707   	 01AD	 9075000C		i0 = i7 - (0xc)			# LN: 100 | 
708   	 01AE	 B0140000		i0 = xmem[i0]			# LN: 100 | 
709   	 01AF	 00004408		a0 = a0 + a1			# LN: 100 | 
710   	 01B0	 98540000		xmem[i0] = a0h			# LN: 100 | 
711   	 01B1				cline_100_0:			/* LN: 101 | CYCLE: 0 | RULES: () */ 
712   	 01B1	 9075000C		i0 = i7 - (0xc)			# LN: 101 | 
713   	 01B2	 B0140000		i0 = xmem[i0]			# LN: 101 | 
714   	 01B3	 9175000C		i1 = i7 - (0xc)			# LN: 101 | 
715   	 01B4	 02087FFF		i0 += 1			# LN: 101 | 
716   	 01B5	 B0540001		xmem[i1] = i0			# LN: 101 | 
717   	 01B6				cline_101_0:			/* LN: 102 | CYCLE: 0 | RULES: () */ 
718   	 01B6	 9075000A		i0 = i7 - (0xa)			# LN: 102 | 
719   	 01B7	 B0140000		i0 = xmem[i0]			# LN: 102 | 
720   	 01B8	 9175000A		i1 = i7 - (0xa)			# LN: 102 | 
721   	 01B9	 02087FFF		i0 += 1			# LN: 102 | 
722   	 01BA	 B0540001		xmem[i1] = i0			# LN: 102 | 
723   	 01BB				cline_102_0:			/* LN: 103 | CYCLE: 0 | RULES: () */ 
724   	 01BB	 9075000D		i0 = i7 - (0xd)			# LN: 103 | 
725   	 01BC	 B0140000		i0 = xmem[i0]			# LN: 103 | 
726   	 01BD	 9175000B		i1 = i7 - (0xb)			# LN: 103 | 
727   	 01BE	 B1140001		i1 = xmem[i1]			# LN: 103 | 
728   	 01BF	 88140000		a0 = xmem[i0]			# LN: 103 | 
729   	 01C0	 89140001		a1 = xmem[i1]			# LN: 103 | 
730   	 01C1	 9075000D		i0 = i7 - (0xd)			# LN: 103 | 
731   	 01C2	 B0140000		i0 = xmem[i0]			# LN: 103 | 
732   	 01C3	 00004408		a0 = a0 + a1			# LN: 103 | 
733   	 01C4	 98540000		xmem[i0] = a0h			# LN: 103 | 
734   	 01C5				cline_103_0:			/* LN: 104 | CYCLE: 0 | RULES: () */ 
735   	 01C5	 9075000D		i0 = i7 - (0xd)			# LN: 104 | 
736   	 01C6	 B0140000		i0 = xmem[i0]			# LN: 104 | 
737   	 01C7	 9175000D		i1 = i7 - (0xd)			# LN: 104 | 
738   	 01C8	 02087FFF		i0 += 1			# LN: 104 | 
739   	 01C9	 B0540001		xmem[i1] = i0			# LN: 104 | 
740   	 01CA				cline_104_0:			/* LN: 105 | CYCLE: 0 | RULES: () */ 
741   	 01CA	 9075000B		i0 = i7 - (0xb)			# LN: 105 | 
742   	 01CB	 B0140000		i0 = xmem[i0]			# LN: 105 | 
743   	 01CC	 9175000B		i1 = i7 - (0xb)			# LN: 105 | 
744   	 01CD	 02087FFF		i0 += 1			# LN: 105 | 
745   	 01CE	 B0540001		xmem[i1] = i0			# LN: 105 | 
746   	 01CF				cline_105_0:			/* LN: 80 | CYCLE: 0 | RULES: () */ 
747   	 01CF				init_latch_label_0:			/* LN: 106 | CYCLE: 0 | RULES: () */ 
748   	 01CF	 9075000E		i0 = i7 - (0xe)			# LN: 80 | 
749   	 01D0	 88140000		a0 = xmem[i0]			# LN: 80 | 
750   	 01D1	 894A0001		uhalfword(a1) = (0x1)			# LN: 80 | 
751   	 01D2	 00004408		a0 = a0 + a1			# LN: 80 | 
752   	 01D3	 9075000E		i0 = i7 - (0xe)			# LN: 80 | 
753   	 01D4				label_end_92:			# LN: 80 | CYCLE: 5 | RULES: ()
754   	 01D4	 98540000		xmem[i0] = a0h			# LN: 80 | 
755   	 01D5				cline_80_1:			/* LN: 108 | CYCLE: 0 | RULES: () */ 
756   	 01D5				for_end_0:			/* LN: 80 | CYCLE: 0 | RULES: () */ 
757   	 01D5	 90750001		i0 = i7 - (0x1)			# LN: 108 | 
758   	 01D6	 884A0000		uhalfword(a0) = (_sampleBuffer + 0)			# LN: 108 | 
759   	 01D7	 88540000		xmem[i0] = a0			# LN: 108 | 
760   	 01D8				cline_108_0:			/* LN: 109 | CYCLE: 0 | RULES: () */ 
761   	 01D8	 90750002		i0 = i7 - (0x2)			# LN: 109 | 
762   	 01D9	 884A0010		uhalfword(a0) = (_sampleBuffer + 16)			# LN: 109 | 
763   	 01DA	 88540000		xmem[i0] = a0			# LN: 109 | 
764   	 01DB				cline_109_0:			/* LN: 110 | CYCLE: 0 | RULES: () */ 
765   	 01DB	 90750008		i0 = i7 - (0x8)			# LN: 110 | 
766   	 01DC	 884A0000		uhalfword(a0) = (_temp_nizL11k + 0)			# LN: 110 | 
767   	 01DD	 88540000		xmem[i0] = a0			# LN: 110 | 
768   	 01DE				cline_110_0:			/* LN: 111 | CYCLE: 0 | RULES: () */ 
769   	 01DE	 90750009		i0 = i7 - (0x9)			# LN: 111 | 
770   	 01DF	 884A0000		uhalfword(a0) = (_temp_nizR11k + 0)			# LN: 111 | 
771   	 01E0	 88540000		xmem[i0] = a0			# LN: 111 | 
772   	 01E1				cline_111_0:			/* LN: 112 | CYCLE: 0 | RULES: () */ 
773   	 01E1	 9075000A		i0 = i7 - (0xa)			# LN: 112 | 
774   	 01E2	 884A0000		uhalfword(a0) = (_temp_nizL5k + 0)			# LN: 112 | 
775   	 01E3	 88540000		xmem[i0] = a0			# LN: 112 | 
776   	 01E4				cline_112_0:			/* LN: 113 | CYCLE: 0 | RULES: () */ 
777   	 01E4	 9075000B		i0 = i7 - (0xb)			# LN: 113 | 
778   	 01E5	 884A0000		uhalfword(a0) = (_temp_nizR5k + 0)			# LN: 113 | 
779   	 01E6	 88540000		xmem[i0] = a0			# LN: 113 | 
780   	 01E7				cline_113_0:			/* LN: 114 | CYCLE: 0 | RULES: () */ 
781   	 01E7	 9075000C		i0 = i7 - (0xc)			# LN: 114 | 
782   	 01E8	 884A0000		uhalfword(a0) = (_temp_nizL3k + 0)			# LN: 114 | 
783   	 01E9	 88540000		xmem[i0] = a0			# LN: 114 | 
784   	 01EA				cline_114_0:			/* LN: 115 | CYCLE: 0 | RULES: () */ 
785   	 01EA	 9075000D		i0 = i7 - (0xd)			# LN: 115 | 
786   	 01EB	 884A0000		uhalfword(a0) = (_temp_nizR3k + 0)			# LN: 115 | 
787   	 01EC	 88540000		xmem[i0] = a0			# LN: 115 | 
788   	 01ED				cline_115_0:			/* LN: 118 | CYCLE: 0 | RULES: () */ 
789   	 01ED	 88040000		a0 = xmem[_MODE + 0]			# LN: 118 | 
790   	 01EE	 894A0140		uhalfword(a1) = (0x140)			# LN: 118 | 
791   	 01EF	 00004F08		a0 - a1			# LN: 118 | 
792   	 01F0	 8448024C		if (a != 0) jmp (else_0)			# LN: 118 | 
793   	 01F1				cline_118_0:			/* LN: 121 | CYCLE: 0 | RULES: () */ 
794   	 01F1	 9075000F		i0 = i7 - (0xf)			# LN: 121 | 
795   	 01F2	 00004DC0		a0 = 0			# LN: 121 | 
796   	 01F3	 98540000		xmem[i0] = a0h			# LN: 121 | 
797   	 01F4	 8100024A		do (0x10), label_end_93			# LN: 121 | 
798   	 01F5				cline_121_0:			/* LN: 123 | CYCLE: 0 | RULES: () */ 
799   	 01F5				label_begin_93:			/* LN: 121 | CYCLE: 0 | RULES: () */ 
800   	 01F5	 9075000C		i0 = i7 - (0xc)			# LN: 123 | 
801   	 01F6	 B0140000		i0 = xmem[i0]			# LN: 123 | 
802   	 01F7	 91750001		i1 = i7 - (0x1)			# LN: 123 | 
803   	 01F8	 B1140001		i1 = xmem[i1]			# LN: 123 | 
804   	 01F9	 88140000		a0 = xmem[i0]			# LN: 123 | 
805   	 01FA	 98540001		xmem[i1] = a0h			# LN: 123 | 
806   	 01FB				cline_123_0:			/* LN: 124 | CYCLE: 0 | RULES: () */ 
807   	 01FB	 9075000D		i0 = i7 - (0xd)			# LN: 124 | 
808   	 01FC	 B0140000		i0 = xmem[i0]			# LN: 124 | 
809   	 01FD	 91750002		i1 = i7 - (0x2)			# LN: 124 | 
810   	 01FE	 B1140001		i1 = xmem[i1]			# LN: 124 | 
811   	 01FF	 88140000		a0 = xmem[i0]			# LN: 124 | 
812   	 0200	 98540001		xmem[i1] = a0h			# LN: 124 | 
813   	 0201				cline_124_0:			/* LN: 125 | CYCLE: 0 | RULES: () */ 
814   	 0201	 90750008		i0 = i7 - (0x8)			# LN: 125 | 
815   	 0202	 B0140000		i0 = xmem[i0]			# LN: 125 | 
816   	 0203	 91750003		i1 = i7 - (0x3)			# LN: 125 | 
817   	 0204	 B1140001		i1 = xmem[i1]			# LN: 125 | 
818   	 0205	 88140000		a0 = xmem[i0]			# LN: 125 | 
819   	 0206	 98540001		xmem[i1] = a0h			# LN: 125 | 
820   	 0207				cline_125_0:			/* LN: 126 | CYCLE: 0 | RULES: () */ 
821   	 0207	 90750009		i0 = i7 - (0x9)			# LN: 126 | 
822   	 0208	 B0140000		i0 = xmem[i0]			# LN: 126 | 
823   	 0209	 91750004		i1 = i7 - (0x4)			# LN: 126 | 
824   	 020A	 B1140001		i1 = xmem[i1]			# LN: 126 | 
825   	 020B	 88140000		a0 = xmem[i0]			# LN: 126 | 
826   	 020C	 98540001		xmem[i1] = a0h			# LN: 126 | 
827   	 020D				cline_126_0:			/* LN: 127 | CYCLE: 0 | RULES: () */ 
828   	 020D	 9075000A		i0 = i7 - (0xa)			# LN: 127 | 
829   	 020E	 B0140000		i0 = xmem[i0]			# LN: 127 | 
830   	 020F	 91750005		i1 = i7 - (0x5)			# LN: 127 | 
831   	 0210	 B1140001		i1 = xmem[i1]			# LN: 127 | 
832   	 0211	 88140000		a0 = xmem[i0]			# LN: 127 | 
833   	 0212	 98540001		xmem[i1] = a0h			# LN: 127 | 
834   	 0213				cline_127_0:			/* LN: 128 | CYCLE: 0 | RULES: () */ 
835   	 0213	 90750001		i0 = i7 - (0x1)			# LN: 128 | 
836   	 0214	 B0140000		i0 = xmem[i0]			# LN: 128 | 
837   	 0215	 91750001		i1 = i7 - (0x1)			# LN: 128 | 
838   	 0216	 02087FFF		i0 += 1			# LN: 128 | 
839   	 0217	 B0540001		xmem[i1] = i0			# LN: 128 | 
840   	 0218				cline_128_0:			/* LN: 129 | CYCLE: 0 | RULES: () */ 
841   	 0218	 90750002		i0 = i7 - (0x2)			# LN: 129 | 
842   	 0219	 B0140000		i0 = xmem[i0]			# LN: 129 | 
843   	 021A	 91750002		i1 = i7 - (0x2)			# LN: 129 | 
844   	 021B	 02087FFF		i0 += 1			# LN: 129 | 
845   	 021C	 B0540001		xmem[i1] = i0			# LN: 129 | 
846   	 021D				cline_129_0:			/* LN: 130 | CYCLE: 0 | RULES: () */ 
847   	 021D	 90750003		i0 = i7 - (0x3)			# LN: 130 | 
848   	 021E	 B0140000		i0 = xmem[i0]			# LN: 130 | 
849   	 021F	 91750003		i1 = i7 - (0x3)			# LN: 130 | 
850   	 0220	 02087FFF		i0 += 1			# LN: 130 | 
851   	 0221	 B0540001		xmem[i1] = i0			# LN: 130 | 
852   	 0222				cline_130_0:			/* LN: 131 | CYCLE: 0 | RULES: () */ 
853   	 0222	 90750004		i0 = i7 - (0x4)			# LN: 131 | 
854   	 0223	 B0140000		i0 = xmem[i0]			# LN: 131 | 
855   	 0224	 91750004		i1 = i7 - (0x4)			# LN: 131 | 
856   	 0225	 02087FFF		i0 += 1			# LN: 131 | 
857   	 0226	 B0540001		xmem[i1] = i0			# LN: 131 | 
858   	 0227				cline_131_0:			/* LN: 132 | CYCLE: 0 | RULES: () */ 
859   	 0227	 90750005		i0 = i7 - (0x5)			# LN: 132 | 
860   	 0228	 B0140000		i0 = xmem[i0]			# LN: 132 | 
861   	 0229	 91750005		i1 = i7 - (0x5)			# LN: 132 | 
862   	 022A	 02087FFF		i0 += 1			# LN: 132 | 
863   	 022B	 B0540001		xmem[i1] = i0			# LN: 132 | 
864   	 022C				cline_132_0:			/* LN: 133 | CYCLE: 0 | RULES: () */ 
865   	 022C	 9075000C		i0 = i7 - (0xc)			# LN: 133 | 
866   	 022D	 B0140000		i0 = xmem[i0]			# LN: 133 | 
867   	 022E	 9175000C		i1 = i7 - (0xc)			# LN: 133 | 
868   	 022F	 02087FFF		i0 += 1			# LN: 133 | 
869   	 0230	 B0540001		xmem[i1] = i0			# LN: 133 | 
870   	 0231				cline_133_0:			/* LN: 134 | CYCLE: 0 | RULES: () */ 
871   	 0231	 9075000D		i0 = i7 - (0xd)			# LN: 134 | 
872   	 0232	 B0140000		i0 = xmem[i0]			# LN: 134 | 
873   	 0233	 9175000D		i1 = i7 - (0xd)			# LN: 134 | 
874   	 0234	 02087FFF		i0 += 1			# LN: 134 | 
875   	 0235	 B0540001		xmem[i1] = i0			# LN: 134 | 
876   	 0236				cline_134_0:			/* LN: 135 | CYCLE: 0 | RULES: () */ 
877   	 0236	 90750008		i0 = i7 - (0x8)			# LN: 135 | 
878   	 0237	 B0140000		i0 = xmem[i0]			# LN: 135 | 
879   	 0238	 91750008		i1 = i7 - (0x8)			# LN: 135 | 
880   	 0239	 02087FFF		i0 += 1			# LN: 135 | 
881   	 023A	 B0540001		xmem[i1] = i0			# LN: 135 | 
882   	 023B				cline_135_0:			/* LN: 136 | CYCLE: 0 | RULES: () */ 
883   	 023B	 90750009		i0 = i7 - (0x9)			# LN: 136 | 
884   	 023C	 B0140000		i0 = xmem[i0]			# LN: 136 | 
885   	 023D	 91750009		i1 = i7 - (0x9)			# LN: 136 | 
886   	 023E	 02087FFF		i0 += 1			# LN: 136 | 
887   	 023F	 B0540001		xmem[i1] = i0			# LN: 136 | 
888   	 0240				cline_136_0:			/* LN: 137 | CYCLE: 0 | RULES: () */ 
889   	 0240	 9075000A		i0 = i7 - (0xa)			# LN: 137 | 
890   	 0241	 B0140000		i0 = xmem[i0]			# LN: 137 | 
891   	 0242	 9175000A		i1 = i7 - (0xa)			# LN: 137 | 
892   	 0243	 02087FFF		i0 += 1			# LN: 137 | 
893   	 0244	 B0540001		xmem[i1] = i0			# LN: 137 | 
894   	 0245				cline_137_0:			/* LN: 121 | CYCLE: 0 | RULES: () */ 
895   	 0245				init_latch_label_1:			/* LN: 138 | CYCLE: 0 | RULES: () */ 
896   	 0245	 9075000F		i0 = i7 - (0xf)			# LN: 121 | 
897   	 0246	 88140000		a0 = xmem[i0]			# LN: 121 | 
898   	 0247	 894A0001		uhalfword(a1) = (0x1)			# LN: 121 | 
899   	 0248	 00004408		a0 = a0 + a1			# LN: 121 | 
900   	 0249	 9075000F		i0 = i7 - (0xf)			# LN: 121 | 
901   	 024A				label_end_93:			# LN: 121 | CYCLE: 5 | RULES: ()
902   	 024A	 98540000		xmem[i0] = a0h			# LN: 121 | 
903   	 024B				for_end_1:			/* LN: 121 | CYCLE: 0 | RULES: () */ 
904   	 024B	 800802CF		jmp (endif_0)			# LN: 121 | 
905   	 024C				cline_121_1:			/* LN: 139 | CYCLE: 0 | RULES: () */ 
906   	 024C				else_0:			/* LN: 118 | CYCLE: 0 | RULES: () */ 
907   	 024C	 88040000		a0 = xmem[_MODE + 0]			# LN: 139 | 
908   	 024D	 894A00DC		uhalfword(a1) = (0xdc)			# LN: 139 | 
909   	 024E	 00004F08		a0 - a1			# LN: 139 | 
910   	 024F	 8448029B		if (a != 0) jmp (else_1)			# LN: 139 | 
911   	 0250				cline_139_0:			/* LN: 142 | CYCLE: 0 | RULES: () */ 
912   	 0250	 90750010		i0 = i7 - (0x10)			# LN: 142 | 
913   	 0251	 00004DC0		a0 = 0			# LN: 142 | 
914   	 0252	 98540000		xmem[i0] = a0h			# LN: 142 | 
915   	 0253	 81000299		do (0x10), label_end_94			# LN: 142 | 
916   	 0254				cline_142_0:			/* LN: 144 | CYCLE: 0 | RULES: () */ 
917   	 0254				label_begin_94:			/* LN: 142 | CYCLE: 0 | RULES: () */ 
918   	 0254	 9075000C		i0 = i7 - (0xc)			# LN: 144 | 
919   	 0255	 B0140000		i0 = xmem[i0]			# LN: 144 | 
920   	 0256	 91750001		i1 = i7 - (0x1)			# LN: 144 | 
921   	 0257	 B1140001		i1 = xmem[i1]			# LN: 144 | 
922   	 0258	 88140000		a0 = xmem[i0]			# LN: 144 | 
923   	 0259	 98540001		xmem[i1] = a0h			# LN: 144 | 
924   	 025A				cline_144_0:			/* LN: 145 | CYCLE: 0 | RULES: () */ 
925   	 025A	 9075000D		i0 = i7 - (0xd)			# LN: 145 | 
926   	 025B	 B0140000		i0 = xmem[i0]			# LN: 145 | 
927   	 025C	 91750002		i1 = i7 - (0x2)			# LN: 145 | 
928   	 025D	 B1140001		i1 = xmem[i1]			# LN: 145 | 
929   	 025E	 88140000		a0 = xmem[i0]			# LN: 145 | 
930   	 025F	 98540001		xmem[i1] = a0h			# LN: 145 | 
931   	 0260				cline_145_0:			/* LN: 146 | CYCLE: 0 | RULES: () */ 
932   	 0260	 90750008		i0 = i7 - (0x8)			# LN: 146 | 
933   	 0261	 B0140000		i0 = xmem[i0]			# LN: 146 | 
934   	 0262	 91750003		i1 = i7 - (0x3)			# LN: 146 | 
935   	 0263	 B1140001		i1 = xmem[i1]			# LN: 146 | 
936   	 0264	 88140000		a0 = xmem[i0]			# LN: 146 | 
937   	 0265	 98540001		xmem[i1] = a0h			# LN: 146 | 
938   	 0266				cline_146_0:			/* LN: 147 | CYCLE: 0 | RULES: () */ 
939   	 0266	 90750009		i0 = i7 - (0x9)			# LN: 147 | 
940   	 0267	 B0140000		i0 = xmem[i0]			# LN: 147 | 
941   	 0268	 91750004		i1 = i7 - (0x4)			# LN: 147 | 
942   	 0269	 B1140001		i1 = xmem[i1]			# LN: 147 | 
943   	 026A	 88140000		a0 = xmem[i0]			# LN: 147 | 
944   	 026B	 98540001		xmem[i1] = a0h			# LN: 147 | 
945   	 026C				cline_147_0:			/* LN: 148 | CYCLE: 0 | RULES: () */ 
946   	 026C	 90750001		i0 = i7 - (0x1)			# LN: 148 | 
947   	 026D	 B0140000		i0 = xmem[i0]			# LN: 148 | 
948   	 026E	 91750001		i1 = i7 - (0x1)			# LN: 148 | 
949   	 026F	 02087FFF		i0 += 1			# LN: 148 | 
950   	 0270	 B0540001		xmem[i1] = i0			# LN: 148 | 
951   	 0271				cline_148_0:			/* LN: 149 | CYCLE: 0 | RULES: () */ 
952   	 0271	 90750002		i0 = i7 - (0x2)			# LN: 149 | 
953   	 0272	 B0140000		i0 = xmem[i0]			# LN: 149 | 
954   	 0273	 91750002		i1 = i7 - (0x2)			# LN: 149 | 
955   	 0274	 02087FFF		i0 += 1			# LN: 149 | 
956   	 0275	 B0540001		xmem[i1] = i0			# LN: 149 | 
957   	 0276				cline_149_0:			/* LN: 150 | CYCLE: 0 | RULES: () */ 
958   	 0276	 90750003		i0 = i7 - (0x3)			# LN: 150 | 
959   	 0277	 B0140000		i0 = xmem[i0]			# LN: 150 | 
960   	 0278	 91750003		i1 = i7 - (0x3)			# LN: 150 | 
961   	 0279	 02087FFF		i0 += 1			# LN: 150 | 
962   	 027A	 B0540001		xmem[i1] = i0			# LN: 150 | 
963   	 027B				cline_150_0:			/* LN: 151 | CYCLE: 0 | RULES: () */ 
964   	 027B	 90750004		i0 = i7 - (0x4)			# LN: 151 | 
965   	 027C	 B0140000		i0 = xmem[i0]			# LN: 151 | 
966   	 027D	 91750004		i1 = i7 - (0x4)			# LN: 151 | 
967   	 027E	 02087FFF		i0 += 1			# LN: 151 | 
968   	 027F	 B0540001		xmem[i1] = i0			# LN: 151 | 
969   	 0280				cline_151_0:			/* LN: 152 | CYCLE: 0 | RULES: () */ 
970   	 0280	 9075000C		i0 = i7 - (0xc)			# LN: 152 | 
971   	 0281	 B0140000		i0 = xmem[i0]			# LN: 152 | 
972   	 0282	 9175000C		i1 = i7 - (0xc)			# LN: 152 | 
973   	 0283	 02087FFF		i0 += 1			# LN: 152 | 
974   	 0284	 B0540001		xmem[i1] = i0			# LN: 152 | 
975   	 0285				cline_152_0:			/* LN: 153 | CYCLE: 0 | RULES: () */ 
976   	 0285	 9075000D		i0 = i7 - (0xd)			# LN: 153 | 
977   	 0286	 B0140000		i0 = xmem[i0]			# LN: 153 | 
978   	 0287	 9175000D		i1 = i7 - (0xd)			# LN: 153 | 
979   	 0288	 02087FFF		i0 += 1			# LN: 153 | 
980   	 0289	 B0540001		xmem[i1] = i0			# LN: 153 | 
981   	 028A				cline_153_0:			/* LN: 154 | CYCLE: 0 | RULES: () */ 
982   	 028A	 90750008		i0 = i7 - (0x8)			# LN: 154 | 
983   	 028B	 B0140000		i0 = xmem[i0]			# LN: 154 | 
984   	 028C	 91750008		i1 = i7 - (0x8)			# LN: 154 | 
985   	 028D	 02087FFF		i0 += 1			# LN: 154 | 
986   	 028E	 B0540001		xmem[i1] = i0			# LN: 154 | 
987   	 028F				cline_154_0:			/* LN: 155 | CYCLE: 0 | RULES: () */ 
988   	 028F	 90750009		i0 = i7 - (0x9)			# LN: 155 | 
989   	 0290	 B0140000		i0 = xmem[i0]			# LN: 155 | 
990   	 0291	 91750009		i1 = i7 - (0x9)			# LN: 155 | 
991   	 0292	 02087FFF		i0 += 1			# LN: 155 | 
992   	 0293	 B0540001		xmem[i1] = i0			# LN: 155 | 
993   	 0294				cline_155_0:			/* LN: 142 | CYCLE: 0 | RULES: () */ 
994   	 0294				init_latch_label_2:			/* LN: 156 | CYCLE: 0 | RULES: () */ 
995   	 0294	 90750010		i0 = i7 - (0x10)			# LN: 142 | 
996   	 0295	 88140000		a0 = xmem[i0]			# LN: 142 | 
997   	 0296	 894A0001		uhalfword(a1) = (0x1)			# LN: 142 | 
998   	 0297	 00004408		a0 = a0 + a1			# LN: 142 | 
999   	 0298	 90750010		i0 = i7 - (0x10)			# LN: 142 | 
1000  	 0299				label_end_94:			# LN: 142 | CYCLE: 5 | RULES: ()
1001  	 0299	 98540000		xmem[i0] = a0h			# LN: 142 | 
1002  	 029A				for_end_2:			/* LN: 142 | CYCLE: 0 | RULES: () */ 
1003  	 029A	 800802CF		jmp (endif_1)			# LN: 142 | 
1004  	 029B				cline_142_1:			/* LN: 159 | CYCLE: 0 | RULES: () */ 
1005  	 029B				else_1:			/* LN: 139 | CYCLE: 0 | RULES: () */ 
1006  	 029B	 90750011		i0 = i7 - (0x11)			# LN: 159 | 
1007  	 029C	 00004DC0		a0 = 0			# LN: 159 | 
1008  	 029D	 98540000		xmem[i0] = a0h			# LN: 159 | 
1009  	 029E	 810002CE		do (0x10), label_end_95			# LN: 159 | 
1010  	 029F				cline_159_0:			/* LN: 161 | CYCLE: 0 | RULES: () */ 
1011  	 029F				label_begin_95:			/* LN: 159 | CYCLE: 0 | RULES: () */ 
1012  	 029F	 90750001		i0 = i7 - (0x1)			# LN: 161 | 
1013  	 02A0	 91750006		i1 = i7 - (0x6)			# LN: 161 | 
1014  	 02A1	 B1140001		i1 = xmem[i1]			# LN: 161 | 
1015  	 02A2	 B0140000		i0 = xmem[i0]			# LN: 161 | 
1016  	 02A3	 88140001		a0 = xmem[i1]			# LN: 161 | 
1017  	 02A4	 98540000		xmem[i0] = a0h			# LN: 161 | 
1018  	 02A5	 90750001		i0 = i7 - (0x1)			# LN: 161 | 
1019  	 02A6	 B0140000		i0 = xmem[i0]			# LN: 161 | 
1020  	 02A7	 91750001		i1 = i7 - (0x1)			# LN: 161 | 
1021  	 02A8	 02087FFF		i0 += 1			# LN: 161 | 
1022  	 02A9	 B0540001		xmem[i1] = i0			# LN: 161 | 
1023  	 02AA				cline_161_0:			/* LN: 162 | CYCLE: 0 | RULES: () */ 
1024  	 02AA	 90750002		i0 = i7 - (0x2)			# LN: 162 | 
1025  	 02AB	 91750007		i1 = i7 - (0x7)			# LN: 162 | 
1026  	 02AC	 B1140001		i1 = xmem[i1]			# LN: 162 | 
1027  	 02AD	 B0140000		i0 = xmem[i0]			# LN: 162 | 
1028  	 02AE	 88140001		a0 = xmem[i1]			# LN: 162 | 
1029  	 02AF	 98540000		xmem[i0] = a0h			# LN: 162 | 
1030  	 02B0	 90750002		i0 = i7 - (0x2)			# LN: 162 | 
1031  	 02B1	 B0140000		i0 = xmem[i0]			# LN: 162 | 
1032  	 02B2	 91750002		i1 = i7 - (0x2)			# LN: 162 | 
1033  	 02B3	 02087FFF		i0 += 1			# LN: 162 | 
1034  	 02B4	 B0540001		xmem[i1] = i0			# LN: 162 | 
1035  	 02B5				cline_162_0:			/* LN: 163 | CYCLE: 0 | RULES: () */ 
1036  	 02B5	 90750001		i0 = i7 - (0x1)			# LN: 163 | 
1037  	 02B6	 B0140000		i0 = xmem[i0]			# LN: 163 | 
1038  	 02B7	 91750001		i1 = i7 - (0x1)			# LN: 163 | 
1039  	 02B8	 02087FFF		i0 += 1			# LN: 163 | 
1040  	 02B9	 B0540001		xmem[i1] = i0			# LN: 163 | 
1041  	 02BA				cline_163_0:			/* LN: 164 | CYCLE: 0 | RULES: () */ 
1042  	 02BA	 90750002		i0 = i7 - (0x2)			# LN: 164 | 
1043  	 02BB	 B0140000		i0 = xmem[i0]			# LN: 164 | 
1044  	 02BC	 91750002		i1 = i7 - (0x2)			# LN: 164 | 
1045  	 02BD	 02087FFF		i0 += 1			# LN: 164 | 
1046  	 02BE	 B0540001		xmem[i1] = i0			# LN: 164 | 
1047  	 02BF				cline_164_0:			/* LN: 165 | CYCLE: 0 | RULES: () */ 
1048  	 02BF	 90750006		i0 = i7 - (0x6)			# LN: 165 | 
1049  	 02C0	 B0140000		i0 = xmem[i0]			# LN: 165 | 
1050  	 02C1	 91750006		i1 = i7 - (0x6)			# LN: 165 | 
1051  	 02C2	 02087FFF		i0 += 1			# LN: 165 | 
1052  	 02C3	 B0540001		xmem[i1] = i0			# LN: 165 | 
1053  	 02C4				cline_165_0:			/* LN: 166 | CYCLE: 0 | RULES: () */ 
1054  	 02C4	 90750007		i0 = i7 - (0x7)			# LN: 166 | 
1055  	 02C5	 B0140000		i0 = xmem[i0]			# LN: 166 | 
1056  	 02C6	 91750007		i1 = i7 - (0x7)			# LN: 166 | 
1057  	 02C7	 02087FFF		i0 += 1			# LN: 166 | 
1058  	 02C8	 B0540001		xmem[i1] = i0			# LN: 166 | 
1059  	 02C9				cline_166_0:			/* LN: 159 | CYCLE: 0 | RULES: () */ 
1060  	 02C9				init_latch_label_3:			/* LN: 167 | CYCLE: 0 | RULES: () */ 
1061  	 02C9	 90750011		i0 = i7 - (0x11)			# LN: 159 | 
1062  	 02CA	 88140000		a0 = xmem[i0]			# LN: 159 | 
1063  	 02CB	 894A0001		uhalfword(a1) = (0x1)			# LN: 159 | 
1064  	 02CC	 00004408		a0 = a0 + a1			# LN: 159 | 
1065  	 02CD	 90750011		i0 = i7 - (0x11)			# LN: 159 | 
1066  	 02CE				label_end_95:			# LN: 159 | CYCLE: 5 | RULES: ()
1067  	 02CE	 98540000		xmem[i0] = a0h			# LN: 159 | 
1068  	 02CF				cline_159_1:			/* LN: 170 | CYCLE: 0 | RULES: () */ 
1069  	 02CF				endif_0:			/* LN: 118 | CYCLE: 0 | RULES: () */ 
1070  	 02CF				endif_1:			/* LN: 139 | CYCLE: 0 | RULES: () */ 
1071  	 02CF				for_end_3:			/* LN: 159 | CYCLE: 0 | RULES: () */ 
1072  	 02CF	 800802D0		jmp (__epilogue_198)			# LN: 170 | 
1073  	 02D0				cline_170_0:			/* LN: 171 | CYCLE: 0 | RULES: () */ 
1074  	 02D0				__epilogue_198:			/* LN: 171 | CYCLE: 0 | RULES: () */ 
1075  	 02D0	 97750011		i7 = i7 - (0x11)			# LN: 171 | 
1076  	 02D1	 02177FFF		i7 -= 1			# LN: 171 | 
1077  	 02D2	 81880000		ret			# LN: 171 | 
1078  						
1079  						
1080  						
1081  	 02D3				_second_order_IIR:			/* LN: 42 | CYCLE: 0 | RULES: () */ 
1082  	 02D3	 BB540007		xmem[i7] = i7			# LN: 42 | 
1083  	 02D4	 020F7FFF		i7 += 1			# LN: 42 | 
1084  	 02D5	 87750007		i7 = i7 + (0x7)			# LN: 42 | 
1085  	 02D6	 95750001		i5 = i7 - (0x1)			# LN: 42 | 
1086  	 02D7	 98540005		xmem[i5] = a0h			# LN: 42 | 
1087  	 02D8	 95750002		i5 = i7 - (0x2)			# LN: 42 | 
1088  	 02D9	 B0540005		xmem[i5] = i0			# LN: 42 | 
1089  	 02DA	 90750003		i0 = i7 - (0x3)			# LN: 42 | 
1090  	 02DB	 B1540000		xmem[i0] = i1			# LN: 42 | 
1091  	 02DC	 90750004		i0 = i7 - (0x4)			# LN: 42 | 
1092  	 02DD	 B8540000		xmem[i0] = i4			# LN: 42 | 
1093  	 02DE				cline_42_0:			/* LN: 43 | CYCLE: 0 | RULES: () */ 
1094  	 02DE	 90750007		i0 = i7 - (0x7)			# LN: 43 | 
1095  	 02DF	 00004DC0		a0 = 0			# LN: 43 | 
1096  	 02E0	 A0540010		xmem[i0] = a0g; i0 += 1			# LN: 43, 43 | 
1097  	 02E1	 98540010		xmem[i0] = a0h; i0 += 1			# LN: 43, 43 | 
1098  	 02E2	 90540000		xmem[i0] = a0l			# LN: 43 | 
1099  	 02E3				cline_43_0:			/* LN: 45 | CYCLE: 0 | RULES: () */ 
1100  	 02E3	 90750002		i0 = i7 - (0x2)			# LN: 45 | 
1101  	 02E4	 B0140000		i0 = xmem[i0]			# LN: 45 | 
1102  	 02E5	 91750001		i1 = i7 - (0x1)			# LN: 45 | 
1103  	 02E6	 80140000		x0 = xmem[i0]			# LN: 45 | 
1104  	 02E7	 81140001		x1 = xmem[i1]			# LN: 45 | 
1105  	 02E8	 90750007		i0 = i7 - (0x7)			# LN: 45 | 
1106  	 02E9	 A0140010		a0g = xmem[i0]; i0 += 1			# LN: 45, 45 | 
1107  	 02EA	 98140010		a0h = xmem[i0]; i0 += 1			# LN: 45, 45 | 
1108  	 02EB	 90140000		a0l = xmem[i0]			# LN: 45 | 
1109  	 02EC	 00002088		a0 += x0 * x1			# LN: 45 | 
1110  	 02ED	 90750007		i0 = i7 - (0x7)			# LN: 45 | 
1111  	 02EE	 A0540010		xmem[i0] = a0g; i0 += 1			# LN: 45, 45 | 
1112  	 02EF	 98540010		xmem[i0] = a0h; i0 += 1			# LN: 45, 45 | 
1113  	 02F0	 90540000		xmem[i0] = a0l			# LN: 45 | 
1114  	 02F1				cline_45_0:			/* LN: 46 | CYCLE: 0 | RULES: () */ 
1115  	 02F1	 90750002		i0 = i7 - (0x2)			# LN: 46 | 
1116  	 02F2	 B0140000		i0 = xmem[i0]			# LN: 46 | 
1117  	 02F3	 91750003		i1 = i7 - (0x3)			# LN: 46 | 
1118  	 02F4	 02087FFF		i0 += 1			# LN: 46 | 
1119  	 02F5	 B1140001		i1 = xmem[i1]			# LN: 46 | 
1120  	 02F6	 80140000		x0 = xmem[i0]			# LN: 46 | 
1121  	 02F7	 81140001		x1 = xmem[i1]			# LN: 46 | 
1122  	 02F8	 90750007		i0 = i7 - (0x7)			# LN: 46 | 
1123  	 02F9	 A0140010		a0g = xmem[i0]; i0 += 1			# LN: 46, 46 | 
1124  	 02FA	 00002081		a1 = x0 * x1			# LN: 46 | 
1125  	 02FB	 98140010		a0h = xmem[i0]; i0 += 1			# LN: 46, 46 | 
1126  	 02FC	 00004E01		a1 = a1 << 1			# LN: 46 | 
1127  	 02FD	 90140000		a0l = xmem[i0]			# LN: 46 | 
1128  	 02FE	 00004408		a0 = a0 + a1			# LN: 46 | 
1129  	 02FF	 90750007		i0 = i7 - (0x7)			# LN: 46 | 
1130  	 0300	 A0540010		xmem[i0] = a0g; i0 += 1			# LN: 46, 46 | 
1131  	 0301	 98540010		xmem[i0] = a0h; i0 += 1			# LN: 46, 46 | 
1132  	 0302	 90540000		xmem[i0] = a0l			# LN: 46 | 
1133  	 0303				cline_46_0:			/* LN: 47 | CYCLE: 0 | RULES: () */ 
1134  	 0303	 90750002		i0 = i7 - (0x2)			# LN: 47 | 
1135  	 0304	 B0140000		i0 = xmem[i0]			# LN: 47 | 
1136  	 0305	 91750003		i1 = i7 - (0x3)			# LN: 47 | 
1137  	 0306	 02287FFF		i0 += 2			# LN: 47 | 
1138  	 0307	 B1140001		i1 = xmem[i1]			# LN: 47 | 
1139  	 0308	 80140000		x0 = xmem[i0]			# LN: 47 | 
1140  	 0309	 02097FFF		i1 += 1			# LN: 47 | 
1141  	 030A	 81140001		x1 = xmem[i1]			# LN: 47 | 
1142  	 030B	 90750007		i0 = i7 - (0x7)			# LN: 47 | 
1143  	 030C	 A0140010		a0g = xmem[i0]; i0 += 1			# LN: 47, 47 | 
1144  	 030D	 98140010		a0h = xmem[i0]; i0 += 1			# LN: 47, 47 | 
1145  	 030E	 90140000		a0l = xmem[i0]			# LN: 47 | 
1146  	 030F	 00002088		a0 += x0 * x1			# LN: 47 | 
1147  	 0310	 90750007		i0 = i7 - (0x7)			# LN: 47 | 
1148  	 0311	 A0540010		xmem[i0] = a0g; i0 += 1			# LN: 47, 47 | 
1149  	 0312	 98540010		xmem[i0] = a0h; i0 += 1			# LN: 47, 47 | 
1150  	 0313	 90540000		xmem[i0] = a0l			# LN: 47 | 
1151  	 0314				cline_47_0:			/* LN: 48 | CYCLE: 0 | RULES: () */ 
1152  	 0314	 90750002		i0 = i7 - (0x2)			# LN: 48 | 
1153  	 0315	 B0140000		i0 = xmem[i0]			# LN: 48 | 
1154  	 0316	 91750004		i1 = i7 - (0x4)			# LN: 48 | 
1155  	 0317	 80050004		i0 = i0 + (0x4)			# LN: 48 | 
1156  	 0318	 B1140001		i1 = xmem[i1]			# LN: 48 | 
1157  	 0319	 80140000		x0 = xmem[i0]			# LN: 48 | 
1158  	 031A	 81140001		x1 = xmem[i1]			# LN: 48 | 
1159  	 031B	 90750007		i0 = i7 - (0x7)			# LN: 48 | 
1160  	 031C	 A0140010		a0g = xmem[i0]; i0 += 1			# LN: 48, 48 | 
1161  	 031D	 00002081		a1 = x0 * x1			# LN: 48 | 
1162  	 031E	 98140010		a0h = xmem[i0]; i0 += 1			# LN: 48, 48 | 
1163  	 031F	 00004E01		a1 = a1 << 1			# LN: 48 | 
1164  	 0320	 90140000		a0l = xmem[i0]			# LN: 48 | 
1165  	 0321	 00004448		a0 = a0 - a1			# LN: 48 | 
1166  	 0322	 90750007		i0 = i7 - (0x7)			# LN: 48 | 
1167  	 0323	 A0540010		xmem[i0] = a0g; i0 += 1			# LN: 48, 48 | 
1168  	 0324	 98540010		xmem[i0] = a0h; i0 += 1			# LN: 48, 48 | 
1169  	 0325	 90540000		xmem[i0] = a0l			# LN: 48 | 
1170  	 0326				cline_48_0:			/* LN: 49 | CYCLE: 0 | RULES: () */ 
1171  	 0326	 90750002		i0 = i7 - (0x2)			# LN: 49 | 
1172  	 0327	 B0140000		i0 = xmem[i0]			# LN: 49 | 
1173  	 0328	 91750004		i1 = i7 - (0x4)			# LN: 49 | 
1174  	 0329	 80050005		i0 = i0 + (0x5)			# LN: 49 | 
1175  	 032A	 B1140001		i1 = xmem[i1]			# LN: 49 | 
1176  	 032B	 80140000		x0 = xmem[i0]			# LN: 49 | 
1177  	 032C	 02097FFF		i1 += 1			# LN: 49 | 
1178  	 032D	 81140001		x1 = xmem[i1]			# LN: 49 | 
1179  	 032E	 90750007		i0 = i7 - (0x7)			# LN: 49 | 
1180  	 032F	 A0140010		a0g = xmem[i0]; i0 += 1			# LN: 49, 49 | 
1181  	 0330	 98140010		a0h = xmem[i0]; i0 += 1			# LN: 49, 49 | 
1182  	 0331	 90140000		a0l = xmem[i0]			# LN: 49 | 
1183  	 0332	 00002098		a0 -= x0 * x1			# LN: 49 | 
1184  	 0333	 90750007		i0 = i7 - (0x7)			# LN: 49 | 
1185  	 0334	 A0540010		xmem[i0] = a0g; i0 += 1			# LN: 49, 49 | 
1186  	 0335	 98540010		xmem[i0] = a0h; i0 += 1			# LN: 49, 49 | 
1187  	 0336	 90540000		xmem[i0] = a0l			# LN: 49 | 
1188  	 0337				cline_49_0:			/* LN: 51 | CYCLE: 0 | RULES: () */ 
1189  	 0337	 90750004		i0 = i7 - (0x4)			# LN: 51 | 
1190  	 0338	 B0140000		i0 = xmem[i0]			# LN: 51 | 
1191  	 0339	 91750004		i1 = i7 - (0x4)			# LN: 51 | 
1192  	 033A	 B1140001		i1 = xmem[i1]			# LN: 51 | 
1193  	 033B	 02087FFF		i0 += 1			# LN: 51 | 
1194  	 033C	 88140001		a0 = xmem[i1]			# LN: 51 | 
1195  	 033D	 98540000		xmem[i0] = a0h			# LN: 51 | 
1196  	 033E				cline_51_0:			/* LN: 52 | CYCLE: 0 | RULES: () */ 
1197  	 033E	 90750007		i0 = i7 - (0x7)			# LN: 52 | 
1198  	 033F	 A0140010		a0g = xmem[i0]; i0 += 1			# LN: 52, 52 | 
1199  	 0340	 98140010		a0h = xmem[i0]; i0 += 1			# LN: 52, 52 | 
1200  	 0341	 91750004		i1 = i7 - (0x4)			# LN: 52 | 
1201  	 0342	 B1140001		i1 = xmem[i1]			# LN: 52 | 
1202  	 0343	 90140000		a0l = xmem[i0]			# LN: 52 | 
1203  	 0344	 88540001		xmem[i1] = a0			# LN: 52 | 
1204  	 0345				cline_52_0:			/* LN: 53 | CYCLE: 0 | RULES: () */ 
1205  	 0345	 90750003		i0 = i7 - (0x3)			# LN: 53 | 
1206  	 0346	 B0140000		i0 = xmem[i0]			# LN: 53 | 
1207  	 0347	 91750003		i1 = i7 - (0x3)			# LN: 53 | 
1208  	 0348	 B1140001		i1 = xmem[i1]			# LN: 53 | 
1209  	 0349	 02087FFF		i0 += 1			# LN: 53 | 
1210  	 034A	 88140001		a0 = xmem[i1]			# LN: 53 | 
1211  	 034B	 98540000		xmem[i0] = a0h			# LN: 53 | 
1212  	 034C				cline_53_0:			/* LN: 54 | CYCLE: 0 | RULES: () */ 
1213  	 034C	 90750001		i0 = i7 - (0x1)			# LN: 54 | 
1214  	 034D	 91750003		i1 = i7 - (0x3)			# LN: 54 | 
1215  	 034E	 B1140001		i1 = xmem[i1]			# LN: 54 | 
1216  	 034F	 88140000		a0 = xmem[i0]			# LN: 54 | 
1217  	 0350	 98540001		xmem[i1] = a0h			# LN: 54 | 
1218  	 0351				cline_54_0:			/* LN: 56 | CYCLE: 0 | RULES: () */ 
1219  	 0351	 90750007		i0 = i7 - (0x7)			# LN: 56 | 
1220  	 0352	 A0140010		a0g = xmem[i0]; i0 += 1			# LN: 56, 56 | 
1221  	 0353	 98140010		a0h = xmem[i0]; i0 += 1			# LN: 56, 56 | 
1222  	 0354	 90140000		a0l = xmem[i0]			# LN: 56 | 
1223  	 0355	 80080356		jmp (__epilogue_196)			# LN: 56 | 
1224  	 0356				cline_56_0:			/* LN: 57 | CYCLE: 0 | RULES: () */ 
1225  	 0356				__epilogue_196:			/* LN: 57 | CYCLE: 0 | RULES: () */ 
1226  	 0356	 97750007		i7 = i7 - (0x7)			# LN: 57 | 
1227  	 0357	 02177FFF		i7 -= 1			# LN: 57 | 
1228  	 0358	 81880000		ret			# LN: 57 | 
1229  						(null)
				 SYMBOL TABLE 

    Name                                                                                    Type                  Value 

_COMMON_INC_PATH_                                                               					 Define                 "C:/CirrusDSP/crystal32/common/inc/"
_DSP_                                                                           					 Define                 "a"
_INITIAL_GAIN                                                                   			  Public Relocatable       main_GEN_0000:0000H
_LOCAL_INC_PATH_                                                                					 Define                 "inc/"
_LOCAL_SRC_PATH_                                                                					 Define                 "src/"
_MODE                                                                           			  Public Relocatable       main_GEN_0001:0000H
_MUI_VERSION_                                                                   					 Define                 "020000"
_OVLY_                                                                          					 Define                 "standalone"
_OVLY_REVISION_                                                                 					 Define                 "020000"
_ROUTER_INC_PATH_                                                               					 Define                 "rom_inc/"
_SLOT_                                                                          					 Define                 "0"
_TARGET_FAMILY_                                                                 					 Define                 "crystal32"
_TOOLS_VERSION_                                                                 					 Define                 "0x0701"
_VERSION_                                                                       					 Define                 "00"
__CASM_VER__                                                                    			  Unused Variable		        0 (701H)
___TIMER0_COUNT                                                                 					 External   
___TIMER1_COUNT                                                                 					 External   
___TIMER1_ENABLE                                                                					 External   
__div                                                                           					 External   
__epilogue_196                                                                  			         Relocatable         main_GEN_0030:0356H
__epilogue_198                                                                  			         Relocatable         main_GEN_0030:02D0H
__epilogue_200                                                                  			         Relocatable         main_GEN_0030:00C8H
__extractedConst_0_1                                                            			         Relocatable         main_GEN_0002:0000H
__extractedConst_1_1                                                            			         Relocatable         main_GEN_0003:0000H
__extractedConst_2_1                                                            			         Relocatable         main_GEN_0004:0000H
__extractedConst_3_1                                                            			         Relocatable         main_GEN_0005:0000H
__start                                                                         					 External   
_cl_wavread_bits_per_sample                                                     					 External   
_cl_wavread_close                                                               					 External   
_cl_wavread_frame_rate                                                          					 External   
_cl_wavread_number_of_frames                                                    					 External   
_cl_wavread_open                                                                					 External   
_cl_wavread_recvsample                                                          					 External   
_cl_wavwrite_close                                                              					 External   
_cl_wavwrite_open                                                               					 External   
_cl_wavwrite_sendsample                                                         					 External   
_coefficients_11k_lpf                                                           			  Public Relocatable       main_GEN_0006:0000H
_coefficients_3k_hpf                                                            			  Public Relocatable       main_GEN_0007:0000H
_coefficients_5k_hpf                                                            			  Public Relocatable       main_GEN_0008:0000H
_main                                                                           			  Public Relocatable       main_GEN_0030:0000H
_memset                                                                         					 External   
_processing                                                                     			  Public Relocatable       main_GEN_0030:00CBH
_sampleBuffer                                                                   			  Public Relocatable       main_GEN_0009:0000H
_second_order_IIR                                                               			  Public Relocatable       main_GEN_0030:02D3H
_strcpy                                                                         					 External   
_temp_left                                                                      			  Public Relocatable       main_GEN_0010:0000H
_temp_nizL11k                                                                   			  Public Relocatable       main_GEN_0011:0000H
_temp_nizL3k                                                                    			  Public Relocatable       main_GEN_0012:0000H
_temp_nizL5k                                                                    			  Public Relocatable       main_GEN_0013:0000H
_temp_nizR11k                                                                   			  Public Relocatable       main_GEN_0014:0000H
_temp_nizR3k                                                                    			  Public Relocatable       main_GEN_0015:0000H
_temp_nizR5k                                                                    			  Public Relocatable       main_GEN_0016:0000H
_temp_right                                                                     			  Public Relocatable       main_GEN_0017:0000H
_x_history0                                                                     			  Public Relocatable       main_GEN_0018:0000H
_x_history1                                                                     			  Public Relocatable       main_GEN_0019:0000H
_x_history2                                                                     			  Public Relocatable       main_GEN_0020:0000H
_x_history3                                                                     			  Public Relocatable       main_GEN_0021:0000H
_x_history4                                                                     			  Public Relocatable       main_GEN_0022:0000H
_x_history5                                                                     			  Public Relocatable       main_GEN_0023:0000H
_y_history0                                                                     			  Public Relocatable       main_GEN_0024:0000H
_y_history1                                                                     			  Public Relocatable       main_GEN_0025:0000H
_y_history2                                                                     			  Public Relocatable       main_GEN_0026:0000H
_y_history3                                                                     			  Public Relocatable       main_GEN_0027:0000H
_y_history4                                                                     			  Public Relocatable       main_GEN_0028:0000H
_y_history5                                                                     			  Public Relocatable       main_GEN_0029:0000H
cline_100_0                                                                     			  Unused Relocatable        main_GEN_0030:01B1H
cline_101_0                                                                     			  Unused Relocatable        main_GEN_0030:01B6H
cline_102_0                                                                     			  Unused Relocatable        main_GEN_0030:01BBH
cline_103_0                                                                     			  Unused Relocatable        main_GEN_0030:01C5H
cline_104_0                                                                     			  Unused Relocatable        main_GEN_0030:01CAH
cline_105_0                                                                     			  Unused Relocatable        main_GEN_0030:01CFH
cline_108_0                                                                     			  Unused Relocatable        main_GEN_0030:01D8H
cline_109_0                                                                     			  Unused Relocatable        main_GEN_0030:01DBH
cline_110_0                                                                     			  Unused Relocatable        main_GEN_0030:01DEH
cline_111_0                                                                     			  Unused Relocatable        main_GEN_0030:01E1H
cline_112_0                                                                     			  Unused Relocatable        main_GEN_0030:01E4H
cline_113_0                                                                     			  Unused Relocatable        main_GEN_0030:01E7H
cline_114_0                                                                     			  Unused Relocatable        main_GEN_0030:01EAH
cline_115_0                                                                     			  Unused Relocatable        main_GEN_0030:01EDH
cline_118_0                                                                     			  Unused Relocatable        main_GEN_0030:01F1H
cline_121_0                                                                     			  Unused Relocatable        main_GEN_0030:01F5H
cline_121_1                                                                     			  Unused Relocatable        main_GEN_0030:024CH
cline_123_0                                                                     			  Unused Relocatable        main_GEN_0030:01FBH
cline_124_0                                                                     			  Unused Relocatable        main_GEN_0030:0201H
cline_125_0                                                                     			  Unused Relocatable        main_GEN_0030:0207H
cline_126_0                                                                     			  Unused Relocatable        main_GEN_0030:020DH
cline_127_0                                                                     			  Unused Relocatable        main_GEN_0030:0213H
cline_128_0                                                                     			  Unused Relocatable        main_GEN_0030:0218H
cline_129_0                                                                     			  Unused Relocatable        main_GEN_0030:021DH
cline_130_0                                                                     			  Unused Relocatable        main_GEN_0030:0222H
cline_131_0                                                                     			  Unused Relocatable        main_GEN_0030:0227H
cline_132_0                                                                     			  Unused Relocatable        main_GEN_0030:022CH
cline_133_0                                                                     			  Unused Relocatable        main_GEN_0030:0231H
cline_134_0                                                                     			  Unused Relocatable        main_GEN_0030:0236H
cline_135_0                                                                     			  Unused Relocatable        main_GEN_0030:023BH
cline_136_0                                                                     			  Unused Relocatable        main_GEN_0030:0240H
cline_137_0                                                                     			  Unused Relocatable        main_GEN_0030:0245H
cline_139_0                                                                     			  Unused Relocatable        main_GEN_0030:0250H
cline_142_0                                                                     			  Unused Relocatable        main_GEN_0030:0254H
cline_142_1                                                                     			  Unused Relocatable        main_GEN_0030:029BH
cline_144_0                                                                     			  Unused Relocatable        main_GEN_0030:025AH
cline_145_0                                                                     			  Unused Relocatable        main_GEN_0030:0260H
cline_146_0                                                                     			  Unused Relocatable        main_GEN_0030:0266H
cline_147_0                                                                     			  Unused Relocatable        main_GEN_0030:026CH
cline_148_0                                                                     			  Unused Relocatable        main_GEN_0030:0271H
cline_149_0                                                                     			  Unused Relocatable        main_GEN_0030:0276H
cline_150_0                                                                     			  Unused Relocatable        main_GEN_0030:027BH
cline_151_0                                                                     			  Unused Relocatable        main_GEN_0030:0280H
cline_152_0                                                                     			  Unused Relocatable        main_GEN_0030:0285H
cline_153_0                                                                     			  Unused Relocatable        main_GEN_0030:028AH
cline_154_0                                                                     			  Unused Relocatable        main_GEN_0030:028FH
cline_155_0                                                                     			  Unused Relocatable        main_GEN_0030:0294H
cline_159_0                                                                     			  Unused Relocatable        main_GEN_0030:029FH
cline_159_1                                                                     			  Unused Relocatable        main_GEN_0030:02CFH
cline_161_0                                                                     			  Unused Relocatable        main_GEN_0030:02AAH
cline_162_0                                                                     			  Unused Relocatable        main_GEN_0030:02B5H
cline_163_0                                                                     			  Unused Relocatable        main_GEN_0030:02BAH
cline_164_0                                                                     			  Unused Relocatable        main_GEN_0030:02BFH
cline_165_0                                                                     			  Unused Relocatable        main_GEN_0030:02C4H
cline_166_0                                                                     			  Unused Relocatable        main_GEN_0030:02C9H
cline_170_0                                                                     			  Unused Relocatable        main_GEN_0030:02D0H
cline_173_0                                                                     			  Unused Relocatable        main_GEN_0030:0007H
cline_188_0                                                                     			  Unused Relocatable        main_GEN_0030:000BH
cline_188_1                                                                     			  Unused Relocatable        main_GEN_0030:0018H
cline_189_0                                                                     			  Unused Relocatable        main_GEN_0030:0012H
cline_193_0                                                                     			  Unused Relocatable        main_GEN_0030:001FH
cline_194_0                                                                     			  Unused Relocatable        main_GEN_0030:0024H
cline_195_0                                                                     			  Unused Relocatable        main_GEN_0030:0028H
cline_198_0                                                                     			  Unused Relocatable        main_GEN_0030:002AH
cline_204_0                                                                     			  Unused Relocatable        main_GEN_0030:002DH
cline_205_0                                                                     			  Unused Relocatable        main_GEN_0030:0032H
cline_206_0                                                                     			  Unused Relocatable        main_GEN_0030:0037H
cline_207_0                                                                     			  Unused Relocatable        main_GEN_0030:003CH
cline_212_0                                                                     			  Unused Relocatable        main_GEN_0030:0044H
cline_213_0                                                                     			  Unused Relocatable        main_GEN_0030:004FH
cline_214_0                                                                     			  Unused Relocatable        main_GEN_0030:0053H
cline_217_0                                                                     			  Unused Relocatable        main_GEN_0030:0055H
cline_230_0                                                                     			  Unused Relocatable        main_GEN_0030:0060H
cline_230_1                                                                     			  Unused Relocatable        main_GEN_0030:00C0H
cline_232_0                                                                     			  Unused Relocatable        main_GEN_0030:0064H
cline_232_1                                                                     			  Unused Relocatable        main_GEN_0030:008CH
cline_234_0                                                                     			  Unused Relocatable        main_GEN_0030:006DH
cline_234_1                                                                     			  Unused Relocatable        main_GEN_0030:0086H
cline_236_0                                                                     			  Unused Relocatable        main_GEN_0030:0072H
cline_237_0                                                                     			  Unused Relocatable        main_GEN_0030:007FH
cline_241_0                                                                     			  Unused Relocatable        main_GEN_0030:008DH
cline_243_0                                                                     			  Unused Relocatable        main_GEN_0030:0091H
cline_243_1                                                                     			  Unused Relocatable        main_GEN_0030:00B9H
cline_245_0                                                                     			  Unused Relocatable        main_GEN_0030:009AH
cline_245_1                                                                     			  Unused Relocatable        main_GEN_0030:00B3H
cline_247_0                                                                     			  Unused Relocatable        main_GEN_0030:00A7H
cline_248_0                                                                     			  Unused Relocatable        main_GEN_0030:00ACH
cline_256_0                                                                     			  Unused Relocatable        main_GEN_0030:00C3H
cline_257_0                                                                     			  Unused Relocatable        main_GEN_0030:00C6H
cline_260_0                                                                     			  Unused Relocatable        main_GEN_0030:00C8H
cline_42_0                                                                      			  Unused Relocatable        main_GEN_0030:02DEH
cline_43_0                                                                      			  Unused Relocatable        main_GEN_0030:02E3H
cline_45_0                                                                      			  Unused Relocatable        main_GEN_0030:02F1H
cline_46_0                                                                      			  Unused Relocatable        main_GEN_0030:0303H
cline_47_0                                                                      			  Unused Relocatable        main_GEN_0030:0314H
cline_48_0                                                                      			  Unused Relocatable        main_GEN_0030:0326H
cline_49_0                                                                      			  Unused Relocatable        main_GEN_0030:0337H
cline_51_0                                                                      			  Unused Relocatable        main_GEN_0030:033EH
cline_52_0                                                                      			  Unused Relocatable        main_GEN_0030:0345H
cline_53_0                                                                      			  Unused Relocatable        main_GEN_0030:034CH
cline_54_0                                                                      			  Unused Relocatable        main_GEN_0030:0351H
cline_56_0                                                                      			  Unused Relocatable        main_GEN_0030:0356H
cline_59_0                                                                      			  Unused Relocatable        main_GEN_0030:00CEH
cline_61_0                                                                      			  Unused Relocatable        main_GEN_0030:00D1H
cline_62_0                                                                      			  Unused Relocatable        main_GEN_0030:00D4H
cline_63_0                                                                      			  Unused Relocatable        main_GEN_0030:00D7H
cline_64_0                                                                      			  Unused Relocatable        main_GEN_0030:00DAH
cline_65_0                                                                      			  Unused Relocatable        main_GEN_0030:00DDH
cline_68_0                                                                      			  Unused Relocatable        main_GEN_0030:00E0H
cline_69_0                                                                      			  Unused Relocatable        main_GEN_0030:00E3H
cline_70_0                                                                      			  Unused Relocatable        main_GEN_0030:00E6H
cline_71_0                                                                      			  Unused Relocatable        main_GEN_0030:00E9H
cline_72_0                                                                      			  Unused Relocatable        main_GEN_0030:00ECH
cline_73_0                                                                      			  Unused Relocatable        main_GEN_0030:00EFH
cline_74_0                                                                      			  Unused Relocatable        main_GEN_0030:00F2H
cline_75_0                                                                      			  Unused Relocatable        main_GEN_0030:00F5H
cline_80_0                                                                      			  Unused Relocatable        main_GEN_0030:00F9H
cline_80_1                                                                      			  Unused Relocatable        main_GEN_0030:01D5H
cline_82_0                                                                      			  Unused Relocatable        main_GEN_0030:0104H
cline_83_0                                                                      			  Unused Relocatable        main_GEN_0030:010FH
cline_84_0                                                                      			  Unused Relocatable        main_GEN_0030:0117H
cline_85_0                                                                      			  Unused Relocatable        main_GEN_0030:011FH
cline_86_0                                                                      			  Unused Relocatable        main_GEN_0030:012DH
cline_87_0                                                                      			  Unused Relocatable        main_GEN_0030:013BH
cline_88_0                                                                      			  Unused Relocatable        main_GEN_0030:0149H
cline_89_0                                                                      			  Unused Relocatable        main_GEN_0030:014EH
cline_90_0                                                                      			  Unused Relocatable        main_GEN_0030:0156H
cline_91_0                                                                      			  Unused Relocatable        main_GEN_0030:0164H
cline_92_0                                                                      			  Unused Relocatable        main_GEN_0030:0169H
cline_93_0                                                                      			  Unused Relocatable        main_GEN_0030:0171H
cline_94_0                                                                      			  Unused Relocatable        main_GEN_0030:017FH
cline_95_0                                                                      			  Unused Relocatable        main_GEN_0030:0184H
cline_96_0                                                                      			  Unused Relocatable        main_GEN_0030:018CH
cline_97_0                                                                      			  Unused Relocatable        main_GEN_0030:019AH
cline_98_0                                                                      			  Unused Relocatable        main_GEN_0030:019FH
cline_99_0                                                                      			  Unused Relocatable        main_GEN_0030:01A7H
dummy                                                                           			  Unused Number				     0 (0H)
else_0                                                                          			         Relocatable         main_GEN_0030:024CH
else_1                                                                          			         Relocatable         main_GEN_0030:029BH
else_2                                                                          			         Relocatable         main_GEN_0030:002AH
else_3                                                                          			         Relocatable         main_GEN_0030:0055H
endif_0                                                                         			         Relocatable         main_GEN_0030:02CFH
endif_1                                                                         			         Relocatable         main_GEN_0030:02CFH
endif_2                                                                         			  Unused Relocatable        main_GEN_0030:002AH
endif_3                                                                         			  Unused Relocatable        main_GEN_0030:0055H
for_5                                                                           			         Relocatable         main_GEN_0030:0058H
for_7                                                                           			         Relocatable         main_GEN_0030:0067H
for_9                                                                           			         Relocatable         main_GEN_0030:0094H
for_end_0                                                                       			  Unused Relocatable        main_GEN_0030:01D5H
for_end_1                                                                       			  Unused Relocatable        main_GEN_0030:024BH
for_end_2                                                                       			  Unused Relocatable        main_GEN_0030:029AH
for_end_3                                                                       			  Unused Relocatable        main_GEN_0030:02CFH
for_end_4                                                                       			  Unused Relocatable        main_GEN_0030:0018H
for_end_5                                                                       			         Relocatable         main_GEN_0030:00C0H
for_end_6                                                                       			  Unused Relocatable        main_GEN_0030:008CH
for_end_7                                                                       			         Relocatable         main_GEN_0030:0086H
for_end_8                                                                       			  Unused Relocatable        main_GEN_0030:00B9H
for_end_9                                                                       			         Relocatable         main_GEN_0030:00B3H
init_latch_label_0                                                              			  Unused Relocatable        main_GEN_0030:01CFH
init_latch_label_1                                                              			  Unused Relocatable        main_GEN_0030:0245H
init_latch_label_2                                                              			  Unused Relocatable        main_GEN_0030:0294H
init_latch_label_3                                                              			  Unused Relocatable        main_GEN_0030:02C9H
init_latch_label_4                                                              			  Unused Relocatable        main_GEN_0030:0012H
init_latch_label_5                                                              			  Unused Relocatable        main_GEN_0030:007FH
init_latch_label_6                                                              			  Unused Relocatable        main_GEN_0030:0086H
init_latch_label_7                                                              			  Unused Relocatable        main_GEN_0030:00ACH
init_latch_label_8                                                              			  Unused Relocatable        main_GEN_0030:00B3H
init_latch_label_9                                                              			  Unused Relocatable        main_GEN_0030:00B9H
label_begin_92                                                                  			  Unused Relocatable        main_GEN_0030:00F9H
label_begin_93                                                                  			  Unused Relocatable        main_GEN_0030:01F5H
label_begin_94                                                                  			  Unused Relocatable        main_GEN_0030:0254H
label_begin_95                                                                  			  Unused Relocatable        main_GEN_0030:029FH
label_begin_96                                                                  			  Unused Relocatable        main_GEN_0030:000BH
label_begin_97                                                                  			  Unused Relocatable        main_GEN_0030:0064H
label_begin_98                                                                  			  Unused Relocatable        main_GEN_0030:0091H
label_end_92                                                                    			         Relocatable         main_GEN_0030:01D4H
label_end_93                                                                    			         Relocatable         main_GEN_0030:024AH
label_end_94                                                                    			         Relocatable         main_GEN_0030:0299H
label_end_95                                                                    			         Relocatable         main_GEN_0030:02CEH
label_end_96                                                                    			         Relocatable         main_GEN_0030:0017H
label_end_97                                                                    			         Relocatable         main_GEN_0030:008BH
label_end_98                                                                    			         Relocatable         main_GEN_0030:00B8H

	       SEGMENTS:

Size			  Name										 Class
0000H	 __INIT                                  			 CODE                                    
0001H	 main_GEN_0000                           			 X_OVLY                                  
0001H	 main_GEN_0001                           			 X_OVLY                                  
0001H	 main_GEN_0002                           			 X_OVLY                                  
0001H	 main_GEN_0003                           			 X_OVLY                                  
0001H	 main_GEN_0004                           			 X_OVLY                                  
0001H	 main_GEN_0005                           			 X_OVLY                                  
0006H	 main_GEN_0006                           			 X_OVLY                                  
0006H	 main_GEN_0007                           			 X_OVLY                                  
0006H	 main_GEN_0008                           			 X_OVLY                                  
0050H	 main_GEN_0009                           			 X_OVLY                                  
0010H	 main_GEN_0010                           			 X_OVLY                                  
0010H	 main_GEN_0011                           			 X_OVLY                                  
0010H	 main_GEN_0012                           			 X_OVLY                                  
0010H	 main_GEN_0013                           			 X_OVLY                                  
0010H	 main_GEN_0014                           			 X_OVLY                                  
0010H	 main_GEN_0015                           			 X_OVLY                                  
0010H	 main_GEN_0016                           			 X_OVLY                                  
0010H	 main_GEN_0017                           			 X_OVLY                                  
0002H	 main_GEN_0018                           			 X_OVLY                                  
0002H	 main_GEN_0019                           			 X_OVLY                                  
0002H	 main_GEN_0020                           			 X_OVLY                                  
0002H	 main_GEN_0021                           			 X_OVLY                                  
0002H	 main_GEN_0022                           			 X_OVLY                                  
0002H	 main_GEN_0023                           			 X_OVLY                                  
0002H	 main_GEN_0024                           			 X_OVLY                                  
0002H	 main_GEN_0025                           			 X_OVLY                                  
0002H	 main_GEN_0026                           			 X_OVLY                                  
0002H	 main_GEN_0027                           			 X_OVLY                                  
0002H	 main_GEN_0028                           			 X_OVLY                                  
0002H	 main_GEN_0029                           			 X_OVLY                                  
0359H	 main_GEN_0030                           			 CODE_OVLY                               
